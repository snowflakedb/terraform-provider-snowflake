// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

import (
	"context"
)

var _ DataMetricFunctionReferences = (*dataMetricFunctionReferences)(nil)

// Manually added
var _ convertibleRow[DataMetricFunctionReference] = new(dataMetricFunctionReferencesRow)

type dataMetricFunctionReferences struct {
	client *Client
}

// Manually edited return type
func (v *dataMetricFunctionReferences) GetForEntity(ctx context.Context, request *GetForEntityDataMetricFunctionReferenceRequest) ([]DataMetricFunctionReference, error) {
	opts := request.toOpts()
	// Manually edited the implementation
	dbRows, err := validateAndQuery[dataMetricFunctionReferencesRow](v.client, ctx, opts)
	if err != nil {
		return nil, err
	}
	return convertRows[dataMetricFunctionReferencesRow, DataMetricFunctionReference](dbRows)
}

func (r *GetForEntityDataMetricFunctionReferenceRequest) toOpts() *GetForEntityDataMetricFunctionReferenceOptions {
	opts := &GetForEntityDataMetricFunctionReferenceOptions{}
	if r.parameters != nil {
		opts.parameters = &dataMetricFunctionReferenceParameters{}
		if r.parameters.arguments != nil {
			opts.parameters.arguments = &dataMetricFunctionReferenceFunctionArguments{
				refEntityName:   r.parameters.arguments.refEntityName,
				RefEntityDomain: r.parameters.arguments.RefEntityDomain,
			}
		}
	}
	return opts
}
