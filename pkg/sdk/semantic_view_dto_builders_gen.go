// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

func NewCreateSemanticViewRequest(
	name SchemaObjectIdentifier,
	// adjusted manually
	logicalTables []LogicalTableRequest,
) *CreateSemanticViewRequest {
	s := CreateSemanticViewRequest{}
	s.name = name
	s.logicalTables = logicalTables
	return &s
}

func (s *CreateSemanticViewRequest) WithOrReplace(orReplace bool) *CreateSemanticViewRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateSemanticViewRequest) WithIfNotExists(ifNotExists bool) *CreateSemanticViewRequest {
	s.IfNotExists = &ifNotExists
	return s
}

// adjusted manually
func (s *CreateSemanticViewRequest) WithSemanticViewRelationships(semanticViewRelationships []SemanticViewRelationshipRequest) *CreateSemanticViewRequest {
	s.semanticViewRelationships = semanticViewRelationships
	return s
}

// adjusted manually
func (s *CreateSemanticViewRequest) WithSemanticViewFacts(semanticViewFacts []SemanticExpressionRequest) *CreateSemanticViewRequest {
	s.semanticViewFacts = semanticViewFacts
	return s
}

// adjusted manually
func (s *CreateSemanticViewRequest) WithSemanticViewDimensions(semanticViewDimensions []SemanticExpressionRequest) *CreateSemanticViewRequest {
	s.semanticViewDimensions = semanticViewDimensions
	return s
}

// adjusted manually
func (s *CreateSemanticViewRequest) WithSemanticViewMetrics(semanticViewMetrics []MetricDefinitionRequest) *CreateSemanticViewRequest {
	s.semanticViewMetrics = semanticViewMetrics
	return s
}

func (s *CreateSemanticViewRequest) WithComment(comment string) *CreateSemanticViewRequest {
	s.Comment = &comment
	return s
}

func (s *CreateSemanticViewRequest) WithCopyGrants(copyGrants bool) *CreateSemanticViewRequest {
	s.CopyGrants = &copyGrants
	return s
}

func NewAlterSemanticViewRequest(
	name SchemaObjectIdentifier,
) *AlterSemanticViewRequest {
	s := AlterSemanticViewRequest{}
	s.name = name
	return &s
}

func (s *AlterSemanticViewRequest) WithIfExists(ifExists bool) *AlterSemanticViewRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterSemanticViewRequest) WithSetComment(setComment string) *AlterSemanticViewRequest {
	s.SetComment = &setComment
	return s
}

func (s *AlterSemanticViewRequest) WithUnsetComment(unsetComment bool) *AlterSemanticViewRequest {
	s.UnsetComment = &unsetComment
	return s
}

func NewDropSemanticViewRequest(
	name SchemaObjectIdentifier,
) *DropSemanticViewRequest {
	s := DropSemanticViewRequest{}
	s.name = name
	return &s
}

func (s *DropSemanticViewRequest) WithIfExists(ifExists bool) *DropSemanticViewRequest {
	s.IfExists = &ifExists
	return s
}

func NewDescribeSemanticViewRequest(
	name SchemaObjectIdentifier,
) *DescribeSemanticViewRequest {
	s := DescribeSemanticViewRequest{}
	s.name = name
	return &s
}

func NewShowSemanticViewRequest() *ShowSemanticViewRequest {
	s := ShowSemanticViewRequest{}
	return &s
}

func (s *ShowSemanticViewRequest) WithTerse(terse bool) *ShowSemanticViewRequest {
	s.Terse = &terse
	return s
}

func (s *ShowSemanticViewRequest) WithLike(like Like) *ShowSemanticViewRequest {
	s.Like = &like
	return s
}

func (s *ShowSemanticViewRequest) WithIn(in In) *ShowSemanticViewRequest {
	s.In = &in
	return s
}

func (s *ShowSemanticViewRequest) WithStartsWith(startsWith string) *ShowSemanticViewRequest {
	s.StartsWith = &startsWith
	return s
}

func (s *ShowSemanticViewRequest) WithLimit(limit LimitFrom) *ShowSemanticViewRequest {
	s.Limit = &limit
	return s
}

// All below added manually
func NewLogicalTableRequest(
	TableName SchemaObjectIdentifier,
) *LogicalTableRequest {
	s := LogicalTableRequest{}
	s.TableName = TableName
	return &s
}

func (s *LogicalTableRequest) WithLogicalTableAlias(logicalTableAlias LogicalTableAliasRequest) *LogicalTableRequest {
	s.logicalTableAlias = &logicalTableAlias
	return s
}

func (s *LogicalTableRequest) WithPrimaryKeys(primaryKeys PrimaryKeysRequest) *LogicalTableRequest {
	s.primaryKeys = &primaryKeys
	return s
}

func (s *LogicalTableRequest) WithUniqueKeys(uniqueKeys []UniqueKeysRequest) *LogicalTableRequest {
	s.uniqueKeys = uniqueKeys
	return s
}

func (s *LogicalTableRequest) WithSynonyms(synonyms SynonymsRequest) *LogicalTableRequest {
	s.synonyms = &synonyms
	return s
}

func (s *LogicalTableRequest) WithComment(Comment string) *LogicalTableRequest {
	s.Comment = &Comment
	return s
}

func NewLogicalTableAliasRequest() *LogicalTableAliasRequest {
	return &LogicalTableAliasRequest{}
}

func (s *LogicalTableAliasRequest) WithLogicalTableAlias(LogicalTableAlias string) *LogicalTableAliasRequest {
	s.LogicalTableAlias = LogicalTableAlias
	return s
}

func NewPrimaryKeysRequest() *PrimaryKeysRequest {
	return &PrimaryKeysRequest{}
}

func (s *PrimaryKeysRequest) WithPrimaryKey(PrimaryKey []SemanticViewColumn) *PrimaryKeysRequest {
	s.PrimaryKey = PrimaryKey
	return s
}

func NewUniqueKeysRequest() *UniqueKeysRequest {
	return &UniqueKeysRequest{}
}

func (s *UniqueKeysRequest) WithUnique(Unique []SemanticViewColumn) *UniqueKeysRequest {
	s.Unique = Unique
	return s
}

func NewSynonymsRequest() *SynonymsRequest {
	return &SynonymsRequest{}
}

func (s *SynonymsRequest) WithWithSynonyms(WithSynonyms []Synonym) *SynonymsRequest {
	s.WithSynonyms = WithSynonyms
	return s
}

func NewSemanticViewRelationshipRequest(
	tableNameOrAlias *RelationshipTableAliasRequest,
	relationshipColumnNames []SemanticViewColumnRequest,
	refTableNameOrAlias *RelationshipTableAliasRequest,
) *SemanticViewRelationshipRequest {
	s := SemanticViewRelationshipRequest{}
	s.tableNameOrAlias = tableNameOrAlias
	s.relationshipColumnNames = relationshipColumnNames
	s.refTableNameOrAlias = refTableNameOrAlias
	return &s
}

func (s *SemanticViewRelationshipRequest) WithRelationshipAlias(relationshipAlias RelationshipAliasRequest) *SemanticViewRelationshipRequest {
	s.relationshipAlias = &relationshipAlias
	return s
}

func (s *SemanticViewRelationshipRequest) WithRelationshipRefColumnNames(relationshipRefColumnNames []SemanticViewColumnRequest) *SemanticViewRelationshipRequest {
	s.relationshipRefColumnNames = relationshipRefColumnNames
	return s
}

func NewRelationshipAliasRequest() *RelationshipAliasRequest {
	return &RelationshipAliasRequest{}
}

func (s *RelationshipAliasRequest) WithRelationshipAlias(RelationshipAlias string) *RelationshipAliasRequest {
	s.RelationshipAlias = RelationshipAlias
	return s
}

func NewRelationshipTableAliasRequest() *RelationshipTableAliasRequest {
	return &RelationshipTableAliasRequest{}
}

func (s *RelationshipTableAliasRequest) WithRelationshipTableName(RelationshipTableName SchemaObjectIdentifier) *RelationshipTableAliasRequest {
	s.RelationshipTableName = &RelationshipTableName
	return s
}

func (s *RelationshipTableAliasRequest) WithRelationshipTableAlias(RelationshipTableAlias string) *RelationshipTableAliasRequest {
	s.RelationshipTableAlias = &RelationshipTableAlias
	return s
}

func NewSemanticViewColumnRequest(
	Name string,
) *SemanticViewColumnRequest {
	s := SemanticViewColumnRequest{}
	s.Name = Name
	return &s
}

func NewSemanticExpressionRequest(
	qualifiedExpressionName *QualifiedExpressionNameRequest,
	sqlExpression *SemanticSqlExpressionRequest,
) *SemanticExpressionRequest {
	s := SemanticExpressionRequest{}
	s.qualifiedExpressionName = qualifiedExpressionName
	s.sqlExpression = sqlExpression
	return &s
}

func (s *SemanticExpressionRequest) WithSynonyms(synonyms SynonymsRequest) *SemanticExpressionRequest {
	s.synonyms = &synonyms
	return s
}

func (s *SemanticExpressionRequest) WithComment(Comment string) *SemanticExpressionRequest {
	s.Comment = &Comment
	return s
}

func NewQualifiedExpressionNameRequest() *QualifiedExpressionNameRequest {
	return &QualifiedExpressionNameRequest{}
}

func (s *QualifiedExpressionNameRequest) WithQualifiedExpressionName(QualifiedExpressionName string) *QualifiedExpressionNameRequest {
	s.QualifiedExpressionName = QualifiedExpressionName
	return s
}

func NewSemanticSqlExpressionRequest() *SemanticSqlExpressionRequest {
	return &SemanticSqlExpressionRequest{}
}

func (s *SemanticSqlExpressionRequest) WithSqlExpression(SqlExpression string) *SemanticSqlExpressionRequest {
	s.SqlExpression = SqlExpression
	return s
}

func NewMetricDefinitionRequest() *MetricDefinitionRequest {
	return &MetricDefinitionRequest{}
}

func (s *MetricDefinitionRequest) WithSemanticExpression(semanticExpression SemanticExpressionRequest) *MetricDefinitionRequest {
	s.semanticExpression = &semanticExpression
	return s
}

func (s *MetricDefinitionRequest) WithWindowFunctionMetricDefinition(windowFunctionMetricDefinition WindowFunctionMetricDefinitionRequest) *MetricDefinitionRequest {
	s.windowFunctionMetricDefinition = &windowFunctionMetricDefinition
	return s
}

func NewWindowFunctionMetricDefinitionRequest(
	WindowFunction string,
	Metric string,
) *WindowFunctionMetricDefinitionRequest {
	s := WindowFunctionMetricDefinitionRequest{}
	s.WindowFunction = WindowFunction
	s.Metric = Metric
	return &s
}

func (s *WindowFunctionMetricDefinitionRequest) WithOverClause(OverClause WindowFunctionOverClauseRequest) *WindowFunctionMetricDefinitionRequest {
	s.OverClause = &OverClause
	return s
}

func NewWindowFunctionOverClauseRequest() *WindowFunctionOverClauseRequest {
	return &WindowFunctionOverClauseRequest{}
}

func (s *WindowFunctionOverClauseRequest) WithPartitionBy(PartitionBy string) *WindowFunctionOverClauseRequest {
	s.PartitionBy = &PartitionBy
	return s
}

func (s *WindowFunctionOverClauseRequest) WithOrderBy(OrderBy string) *WindowFunctionOverClauseRequest {
	s.OrderBy = &OrderBy
	return s
}

func (s *WindowFunctionOverClauseRequest) WithWindowFrameClause(WindowFrameClause string) *WindowFunctionOverClauseRequest {
	s.WindowFrameClause = &WindowFrameClause
	return s
}
