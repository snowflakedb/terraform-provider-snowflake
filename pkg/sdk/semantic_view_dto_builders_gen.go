// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateSemanticViewRequest(
	name SchemaObjectIdentifier,
	Tables []LogicalTable,
) *CreateSemanticViewRequest {
	s := CreateSemanticViewRequest{}
	s.name = name
	s.Tables = Tables
	return &s
}

func (s *CreateSemanticViewRequest) WithOrReplace(OrReplace bool) *CreateSemanticViewRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateSemanticViewRequest) WithIfNotExists(IfNotExists bool) *CreateSemanticViewRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateSemanticViewRequest) WithComment(Comment string) *CreateSemanticViewRequest {
	s.Comment = &Comment
	return s
}

func (s *CreateSemanticViewRequest) WithCopyGrants(CopyGrants bool) *CreateSemanticViewRequest {
	s.CopyGrants = &CopyGrants
	return s
}

func NewDropSemanticViewRequest(
	name SchemaObjectIdentifier,
) *DropSemanticViewRequest {
	s := DropSemanticViewRequest{}
	s.name = name
	return &s
}

func (s *DropSemanticViewRequest) WithIfExists(IfExists bool) *DropSemanticViewRequest {
	s.IfExists = &IfExists
	return s
}

func NewDescribeSemanticViewRequest(
	name SchemaObjectIdentifier,
) *DescribeSemanticViewRequest {
	s := DescribeSemanticViewRequest{}
	s.name = name
	return &s
}

func NewShowSemanticViewRequest() *ShowSemanticViewRequest {
	return &ShowSemanticViewRequest{}
}

func (s *ShowSemanticViewRequest) WithTerse(Terse bool) *ShowSemanticViewRequest {
	s.Terse = &Terse
	return s
}

func (s *ShowSemanticViewRequest) WithLike(Like Like) *ShowSemanticViewRequest {
	s.Like = &Like
	return s
}

func (s *ShowSemanticViewRequest) WithIn(In In) *ShowSemanticViewRequest {
	s.In = &In
	return s
}

func (s *ShowSemanticViewRequest) WithStartsWith(StartsWith string) *ShowSemanticViewRequest {
	s.StartsWith = &StartsWith
	return s
}

func (s *ShowSemanticViewRequest) WithLimit(Limit LimitFrom) *ShowSemanticViewRequest {
	s.Limit = &Limit
	return s
}
