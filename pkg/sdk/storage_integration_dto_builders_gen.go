// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

func NewCreateStorageIntegrationRequest(
	name AccountObjectIdentifier,
	enabled bool,
	storageAllowedLocations []StorageLocation,
) *CreateStorageIntegrationRequest {
	s := CreateStorageIntegrationRequest{}
	s.name = name
	s.Enabled = enabled
	s.StorageAllowedLocations = storageAllowedLocations
	return &s
}

func (s *CreateStorageIntegrationRequest) WithOrReplace(orReplace bool) *CreateStorageIntegrationRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateStorageIntegrationRequest) WithIfNotExists(ifNotExists bool) *CreateStorageIntegrationRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateStorageIntegrationRequest) WithS3StorageProviderParams(s3StorageProviderParams S3StorageParamsRequest) *CreateStorageIntegrationRequest {
	s.S3StorageProviderParams = &s3StorageProviderParams
	return s
}

func (s *CreateStorageIntegrationRequest) WithGCSStorageProviderParams(gCSStorageProviderParams GCSStorageParamsRequest) *CreateStorageIntegrationRequest {
	s.GCSStorageProviderParams = &gCSStorageProviderParams
	return s
}

func (s *CreateStorageIntegrationRequest) WithAzureStorageProviderParams(azureStorageProviderParams AzureStorageParamsRequest) *CreateStorageIntegrationRequest {
	s.AzureStorageProviderParams = &azureStorageProviderParams
	return s
}

func (s *CreateStorageIntegrationRequest) WithStorageBlockedLocations(storageBlockedLocations []StorageLocation) *CreateStorageIntegrationRequest {
	s.StorageBlockedLocations = storageBlockedLocations
	return s
}

func (s *CreateStorageIntegrationRequest) WithComment(comment string) *CreateStorageIntegrationRequest {
	s.Comment = &comment
	return s
}

func NewS3StorageParamsRequest(
	protocol S3Protocol,
	storageAwsRoleArn string,
) *S3StorageParamsRequest {
	s := S3StorageParamsRequest{}
	s.Protocol = protocol
	s.StorageAwsRoleArn = storageAwsRoleArn
	return &s
}

func (s *S3StorageParamsRequest) WithStorageAwsExternalId(storageAwsExternalId string) *S3StorageParamsRequest {
	s.StorageAwsExternalId = &storageAwsExternalId
	return s
}

func (s *S3StorageParamsRequest) WithStorageAwsObjectAcl(storageAwsObjectAcl string) *S3StorageParamsRequest {
	s.StorageAwsObjectAcl = &storageAwsObjectAcl
	return s
}

func (s *S3StorageParamsRequest) WithUsePrivatelinkEndpoint(usePrivatelinkEndpoint bool) *S3StorageParamsRequest {
	s.UsePrivatelinkEndpoint = &usePrivatelinkEndpoint
	return s
}

func NewGCSStorageParamsRequest() *GCSStorageParamsRequest {
	s := GCSStorageParamsRequest{}
	return &s
}

func NewAzureStorageParamsRequest(
	azureTenantId *string,
) *AzureStorageParamsRequest {
	s := AzureStorageParamsRequest{}
	s.AzureTenantId = azureTenantId
	return &s
}

func (s *AzureStorageParamsRequest) WithUsePrivatelinkEndpoint(usePrivatelinkEndpoint bool) *AzureStorageParamsRequest {
	s.UsePrivatelinkEndpoint = &usePrivatelinkEndpoint
	return s
}

func NewAlterStorageIntegrationRequest(
	name AccountObjectIdentifier,
) *AlterStorageIntegrationRequest {
	s := AlterStorageIntegrationRequest{}
	s.name = name
	return &s
}

func (s *AlterStorageIntegrationRequest) WithIfExists(ifExists bool) *AlterStorageIntegrationRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterStorageIntegrationRequest) WithSet(set StorageIntegrationSetRequest) *AlterStorageIntegrationRequest {
	s.Set = &set
	return s
}

func (s *AlterStorageIntegrationRequest) WithUnset(unset StorageIntegrationUnsetRequest) *AlterStorageIntegrationRequest {
	s.Unset = &unset
	return s
}

func (s *AlterStorageIntegrationRequest) WithSetTags(setTags []TagAssociation) *AlterStorageIntegrationRequest {
	s.SetTags = setTags
	return s
}

func (s *AlterStorageIntegrationRequest) WithUnsetTags(unsetTags []ObjectIdentifier) *AlterStorageIntegrationRequest {
	s.UnsetTags = unsetTags
	return s
}

func NewStorageIntegrationSetRequest() *StorageIntegrationSetRequest {
	s := StorageIntegrationSetRequest{}
	return &s
}

func (s *StorageIntegrationSetRequest) WithS3Params(s3Params SetS3StorageParamsRequest) *StorageIntegrationSetRequest {
	s.S3Params = &s3Params
	return s
}

func (s *StorageIntegrationSetRequest) WithAzureParams(azureParams SetAzureStorageParamsRequest) *StorageIntegrationSetRequest {
	s.AzureParams = &azureParams
	return s
}

func (s *StorageIntegrationSetRequest) WithEnabled(enabled bool) *StorageIntegrationSetRequest {
	s.Enabled = &enabled
	return s
}

func (s *StorageIntegrationSetRequest) WithStorageAllowedLocations(storageAllowedLocations []StorageLocation) *StorageIntegrationSetRequest {
	s.StorageAllowedLocations = storageAllowedLocations
	return s
}

func (s *StorageIntegrationSetRequest) WithStorageBlockedLocations(storageBlockedLocations []StorageLocation) *StorageIntegrationSetRequest {
	s.StorageBlockedLocations = storageBlockedLocations
	return s
}

func (s *StorageIntegrationSetRequest) WithComment(comment string) *StorageIntegrationSetRequest {
	s.Comment = &comment
	return s
}

func NewSetS3StorageParamsRequest(
	storageAwsRoleArn string,
) *SetS3StorageParamsRequest {
	s := SetS3StorageParamsRequest{}
	s.StorageAwsRoleArn = storageAwsRoleArn
	return &s
}

func (s *SetS3StorageParamsRequest) WithStorageAwsExternalId(storageAwsExternalId string) *SetS3StorageParamsRequest {
	s.StorageAwsExternalId = &storageAwsExternalId
	return s
}

func (s *SetS3StorageParamsRequest) WithStorageAwsObjectAcl(storageAwsObjectAcl string) *SetS3StorageParamsRequest {
	s.StorageAwsObjectAcl = &storageAwsObjectAcl
	return s
}

func (s *SetS3StorageParamsRequest) WithUsePrivatelinkEndpoint(usePrivatelinkEndpoint bool) *SetS3StorageParamsRequest {
	s.UsePrivatelinkEndpoint = &usePrivatelinkEndpoint
	return s
}

func NewSetAzureStorageParamsRequest(
	azureTenantId string,
) *SetAzureStorageParamsRequest {
	s := SetAzureStorageParamsRequest{}
	s.AzureTenantId = azureTenantId
	return &s
}

func (s *SetAzureStorageParamsRequest) WithUsePrivatelinkEndpoint(usePrivatelinkEndpoint bool) *SetAzureStorageParamsRequest {
	s.UsePrivatelinkEndpoint = &usePrivatelinkEndpoint
	return s
}

func NewStorageIntegrationUnsetRequest() *StorageIntegrationUnsetRequest {
	s := StorageIntegrationUnsetRequest{}
	return &s
}

func (s *StorageIntegrationUnsetRequest) WithStorageAwsExternalId(storageAwsExternalId bool) *StorageIntegrationUnsetRequest {
	s.StorageAwsExternalId = &storageAwsExternalId
	return s
}

func (s *StorageIntegrationUnsetRequest) WithStorageAwsObjectAcl(storageAwsObjectAcl bool) *StorageIntegrationUnsetRequest {
	s.StorageAwsObjectAcl = &storageAwsObjectAcl
	return s
}

func (s *StorageIntegrationUnsetRequest) WithEnabled(enabled bool) *StorageIntegrationUnsetRequest {
	s.Enabled = &enabled
	return s
}

func (s *StorageIntegrationUnsetRequest) WithStorageBlockedLocations(storageBlockedLocations bool) *StorageIntegrationUnsetRequest {
	s.StorageBlockedLocations = &storageBlockedLocations
	return s
}

func (s *StorageIntegrationUnsetRequest) WithComment(comment bool) *StorageIntegrationUnsetRequest {
	s.Comment = &comment
	return s
}

func (s *StorageIntegrationUnsetRequest) WithUsePrivatelinkEndpoint(usePrivatelinkEndpoint bool) *StorageIntegrationUnsetRequest {
	s.UsePrivatelinkEndpoint = &usePrivatelinkEndpoint
	return s
}

func NewDropStorageIntegrationRequest(
	name AccountObjectIdentifier,
) *DropStorageIntegrationRequest {
	s := DropStorageIntegrationRequest{}
	s.name = name
	return &s
}

func (s *DropStorageIntegrationRequest) WithIfExists(ifExists bool) *DropStorageIntegrationRequest {
	s.IfExists = &ifExists
	return s
}

func NewShowStorageIntegrationRequest() *ShowStorageIntegrationRequest {
	s := ShowStorageIntegrationRequest{}
	return &s
}

func (s *ShowStorageIntegrationRequest) WithLike(like Like) *ShowStorageIntegrationRequest {
	s.Like = &like
	return s
}

func NewDescribeStorageIntegrationRequest(
	name AccountObjectIdentifier,
) *DescribeStorageIntegrationRequest {
	s := DescribeStorageIntegrationRequest{}
	s.name = name
	return &s
}
