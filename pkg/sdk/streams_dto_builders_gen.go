// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

func NewCreateOnTableStreamRequest(
	name SchemaObjectIdentifier,
	tableId SchemaObjectIdentifier,
) *CreateOnTableStreamRequest {
	s := CreateOnTableStreamRequest{}
	s.name = name
	s.TableId = tableId
	return &s
}

func (s *CreateOnTableStreamRequest) WithOrReplace(orReplace bool) *CreateOnTableStreamRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateOnTableStreamRequest) WithIfNotExists(ifNotExists bool) *CreateOnTableStreamRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateOnTableStreamRequest) WithTag(tag []TagAssociation) *CreateOnTableStreamRequest {
	s.Tag = tag
	return s
}

func (s *CreateOnTableStreamRequest) WithCopyGrants(copyGrants bool) *CreateOnTableStreamRequest {
	s.CopyGrants = &copyGrants
	return s
}

func (s *CreateOnTableStreamRequest) WithOn(on OnStreamRequest) *CreateOnTableStreamRequest {
	s.On = &on
	return s
}

func (s *CreateOnTableStreamRequest) WithAppendOnly(appendOnly bool) *CreateOnTableStreamRequest {
	s.AppendOnly = &appendOnly
	return s
}

func (s *CreateOnTableStreamRequest) WithShowInitialRows(showInitialRows bool) *CreateOnTableStreamRequest {
	s.ShowInitialRows = &showInitialRows
	return s
}

func (s *CreateOnTableStreamRequest) WithComment(comment string) *CreateOnTableStreamRequest {
	s.Comment = &comment
	return s
}

func NewOnStreamRequest() *OnStreamRequest {
	s := OnStreamRequest{}
	return &s
}

func (s *OnStreamRequest) WithAt(at bool) *OnStreamRequest {
	s.At = &at
	return s
}

func (s *OnStreamRequest) WithBefore(before bool) *OnStreamRequest {
	s.Before = &before
	return s
}

func (s *OnStreamRequest) WithStatement(statement OnStreamStatementRequest) *OnStreamRequest {
	s.Statement = statement
	return s
}

func NewOnStreamStatementRequest() *OnStreamStatementRequest {
	s := OnStreamStatementRequest{}
	return &s
}

func (s *OnStreamStatementRequest) WithTimestamp(timestamp string) *OnStreamStatementRequest {
	s.Timestamp = &timestamp
	return s
}

func (s *OnStreamStatementRequest) WithOffset(offset string) *OnStreamStatementRequest {
	s.Offset = &offset
	return s
}

func (s *OnStreamStatementRequest) WithStatement(statement string) *OnStreamStatementRequest {
	s.Statement = &statement
	return s
}

func (s *OnStreamStatementRequest) WithStream(stream string) *OnStreamStatementRequest {
	s.Stream = &stream
	return s
}

func NewCreateOnExternalTableStreamRequest(
	name SchemaObjectIdentifier,
	externalTableId SchemaObjectIdentifier,
) *CreateOnExternalTableStreamRequest {
	s := CreateOnExternalTableStreamRequest{}
	s.name = name
	s.ExternalTableId = externalTableId
	return &s
}

func (s *CreateOnExternalTableStreamRequest) WithOrReplace(orReplace bool) *CreateOnExternalTableStreamRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateOnExternalTableStreamRequest) WithIfNotExists(ifNotExists bool) *CreateOnExternalTableStreamRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateOnExternalTableStreamRequest) WithTag(tag []TagAssociation) *CreateOnExternalTableStreamRequest {
	s.Tag = tag
	return s
}

func (s *CreateOnExternalTableStreamRequest) WithCopyGrants(copyGrants bool) *CreateOnExternalTableStreamRequest {
	s.CopyGrants = &copyGrants
	return s
}

func (s *CreateOnExternalTableStreamRequest) WithOn(on OnStreamRequest) *CreateOnExternalTableStreamRequest {
	s.On = &on
	return s
}

func (s *CreateOnExternalTableStreamRequest) WithInsertOnly(insertOnly bool) *CreateOnExternalTableStreamRequest {
	s.InsertOnly = &insertOnly
	return s
}

func (s *CreateOnExternalTableStreamRequest) WithComment(comment string) *CreateOnExternalTableStreamRequest {
	s.Comment = &comment
	return s
}

func NewCreateOnDirectoryTableStreamRequest(
	name SchemaObjectIdentifier,
	stageId SchemaObjectIdentifier,
) *CreateOnDirectoryTableStreamRequest {
	s := CreateOnDirectoryTableStreamRequest{}
	s.name = name
	s.StageId = stageId
	return &s
}

func (s *CreateOnDirectoryTableStreamRequest) WithOrReplace(orReplace bool) *CreateOnDirectoryTableStreamRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateOnDirectoryTableStreamRequest) WithIfNotExists(ifNotExists bool) *CreateOnDirectoryTableStreamRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateOnDirectoryTableStreamRequest) WithTag(tag []TagAssociation) *CreateOnDirectoryTableStreamRequest {
	s.Tag = tag
	return s
}

func (s *CreateOnDirectoryTableStreamRequest) WithCopyGrants(copyGrants bool) *CreateOnDirectoryTableStreamRequest {
	s.CopyGrants = &copyGrants
	return s
}

func (s *CreateOnDirectoryTableStreamRequest) WithComment(comment string) *CreateOnDirectoryTableStreamRequest {
	s.Comment = &comment
	return s
}

func NewCreateOnViewStreamRequest(
	name SchemaObjectIdentifier,
	viewId SchemaObjectIdentifier,
) *CreateOnViewStreamRequest {
	s := CreateOnViewStreamRequest{}
	s.name = name
	s.ViewId = viewId
	return &s
}

func (s *CreateOnViewStreamRequest) WithOrReplace(orReplace bool) *CreateOnViewStreamRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateOnViewStreamRequest) WithIfNotExists(ifNotExists bool) *CreateOnViewStreamRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateOnViewStreamRequest) WithTag(tag []TagAssociation) *CreateOnViewStreamRequest {
	s.Tag = tag
	return s
}

func (s *CreateOnViewStreamRequest) WithCopyGrants(copyGrants bool) *CreateOnViewStreamRequest {
	s.CopyGrants = &copyGrants
	return s
}

func (s *CreateOnViewStreamRequest) WithOn(on OnStreamRequest) *CreateOnViewStreamRequest {
	s.On = &on
	return s
}

func (s *CreateOnViewStreamRequest) WithAppendOnly(appendOnly bool) *CreateOnViewStreamRequest {
	s.AppendOnly = &appendOnly
	return s
}

func (s *CreateOnViewStreamRequest) WithShowInitialRows(showInitialRows bool) *CreateOnViewStreamRequest {
	s.ShowInitialRows = &showInitialRows
	return s
}

func (s *CreateOnViewStreamRequest) WithComment(comment string) *CreateOnViewStreamRequest {
	s.Comment = &comment
	return s
}

func NewCloneStreamRequest(
	name SchemaObjectIdentifier,
	sourceStream SchemaObjectIdentifier,
) *CloneStreamRequest {
	s := CloneStreamRequest{}
	s.name = name
	s.sourceStream = sourceStream
	return &s
}

func (s *CloneStreamRequest) WithOrReplace(orReplace bool) *CloneStreamRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CloneStreamRequest) WithCopyGrants(copyGrants bool) *CloneStreamRequest {
	s.CopyGrants = &copyGrants
	return s
}

func NewAlterStreamRequest(
	name SchemaObjectIdentifier,
) *AlterStreamRequest {
	s := AlterStreamRequest{}
	s.name = name
	return &s
}

func (s *AlterStreamRequest) WithIfExists(ifExists bool) *AlterStreamRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterStreamRequest) WithSetComment(setComment string) *AlterStreamRequest {
	s.SetComment = &setComment
	return s
}

func (s *AlterStreamRequest) WithUnsetComment(unsetComment bool) *AlterStreamRequest {
	s.UnsetComment = &unsetComment
	return s
}

func (s *AlterStreamRequest) WithSetTags(setTags []TagAssociation) *AlterStreamRequest {
	s.SetTags = setTags
	return s
}

func (s *AlterStreamRequest) WithUnsetTags(unsetTags []ObjectIdentifier) *AlterStreamRequest {
	s.UnsetTags = unsetTags
	return s
}

func NewDropStreamRequest(
	name SchemaObjectIdentifier,
) *DropStreamRequest {
	s := DropStreamRequest{}
	s.name = name
	return &s
}

func (s *DropStreamRequest) WithIfExists(ifExists bool) *DropStreamRequest {
	s.IfExists = &ifExists
	return s
}

func NewShowStreamRequest() *ShowStreamRequest {
	s := ShowStreamRequest{}
	return &s
}

func (s *ShowStreamRequest) WithTerse(terse bool) *ShowStreamRequest {
	s.Terse = &terse
	return s
}

func (s *ShowStreamRequest) WithLike(like Like) *ShowStreamRequest {
	s.Like = &like
	return s
}

func (s *ShowStreamRequest) WithIn(in ExtendedIn) *ShowStreamRequest {
	s.In = &in
	return s
}

func (s *ShowStreamRequest) WithStartsWith(startsWith string) *ShowStreamRequest {
	s.StartsWith = &startsWith
	return s
}

func (s *ShowStreamRequest) WithLimit(limit LimitFrom) *ShowStreamRequest {
	s.Limit = &limit
	return s
}

func NewDescribeStreamRequest(
	name SchemaObjectIdentifier,
) *DescribeStreamRequest {
	s := DescribeStreamRequest{}
	s.name = name
	return &s
}
