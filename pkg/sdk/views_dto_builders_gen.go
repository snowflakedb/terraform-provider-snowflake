// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

func NewCreateViewRequest(
	name SchemaObjectIdentifier,
	sql string,
) *CreateViewRequest {
	s := CreateViewRequest{}
	s.name = name
	s.sql = sql
	return &s
}

func (s *CreateViewRequest) WithOrReplace(orReplace bool) *CreateViewRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateViewRequest) WithSecure(secure bool) *CreateViewRequest {
	s.Secure = &secure
	return s
}

func (s *CreateViewRequest) WithTemporary(temporary bool) *CreateViewRequest {
	s.Temporary = &temporary
	return s
}

func (s *CreateViewRequest) WithRecursive(recursive bool) *CreateViewRequest {
	s.Recursive = &recursive
	return s
}

func (s *CreateViewRequest) WithIfNotExists(ifNotExists bool) *CreateViewRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateViewRequest) WithColumns(columns []ViewColumnRequest) *CreateViewRequest {
	s.Columns = columns
	return s
}

func (s *CreateViewRequest) WithCopyGrants(copyGrants bool) *CreateViewRequest {
	s.CopyGrants = &copyGrants
	return s
}

func (s *CreateViewRequest) WithComment(comment string) *CreateViewRequest {
	s.Comment = &comment
	return s
}

func (s *CreateViewRequest) WithRowAccessPolicy(rowAccessPolicy ViewRowAccessPolicyRequest) *CreateViewRequest {
	s.RowAccessPolicy = &rowAccessPolicy
	return s
}

func (s *CreateViewRequest) WithAggregationPolicy(aggregationPolicy ViewAggregationPolicyRequest) *CreateViewRequest {
	s.AggregationPolicy = &aggregationPolicy
	return s
}

func (s *CreateViewRequest) WithTag(tag []TagAssociation) *CreateViewRequest {
	s.Tag = tag
	return s
}

func NewViewColumnRequest(
	name string,
) *ViewColumnRequest {
	s := ViewColumnRequest{}
	s.Name = name
	return &s
}

func (s *ViewColumnRequest) WithProjectionPolicy(projectionPolicy ViewColumnProjectionPolicyRequest) *ViewColumnRequest {
	s.ProjectionPolicy = &projectionPolicy
	return s
}

func (s *ViewColumnRequest) WithMaskingPolicy(maskingPolicy ViewColumnMaskingPolicyRequest) *ViewColumnRequest {
	s.MaskingPolicy = &maskingPolicy
	return s
}

func (s *ViewColumnRequest) WithComment(comment string) *ViewColumnRequest {
	s.Comment = &comment
	return s
}

func (s *ViewColumnRequest) WithTag(tag []TagAssociation) *ViewColumnRequest {
	s.Tag = tag
	return s
}

func NewViewColumnProjectionPolicyRequest(
	projectionPolicy SchemaObjectIdentifier,
) *ViewColumnProjectionPolicyRequest {
	s := ViewColumnProjectionPolicyRequest{}
	s.ProjectionPolicy = projectionPolicy
	return &s
}

func NewViewColumnMaskingPolicyRequest(
	maskingPolicy SchemaObjectIdentifier,
) *ViewColumnMaskingPolicyRequest {
	s := ViewColumnMaskingPolicyRequest{}
	s.MaskingPolicy = maskingPolicy
	return &s
}

func (s *ViewColumnMaskingPolicyRequest) WithUsing(using []Column) *ViewColumnMaskingPolicyRequest {
	s.Using = using
	return s
}

func NewViewRowAccessPolicyRequest(
	rowAccessPolicy SchemaObjectIdentifier,
	on []Column,
) *ViewRowAccessPolicyRequest {
	s := ViewRowAccessPolicyRequest{}
	s.RowAccessPolicy = rowAccessPolicy
	s.On = on
	return &s
}

func NewViewAggregationPolicyRequest(
	aggregationPolicy SchemaObjectIdentifier,
) *ViewAggregationPolicyRequest {
	s := ViewAggregationPolicyRequest{}
	s.AggregationPolicy = aggregationPolicy
	return &s
}

func (s *ViewAggregationPolicyRequest) WithEntityKey(entityKey []Column) *ViewAggregationPolicyRequest {
	s.EntityKey = entityKey
	return s
}

func NewAlterViewRequest(
	name SchemaObjectIdentifier,
) *AlterViewRequest {
	s := AlterViewRequest{}
	s.name = name
	return &s
}

func (s *AlterViewRequest) WithIfExists(ifExists bool) *AlterViewRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterViewRequest) WithRenameTo(renameTo SchemaObjectIdentifier) *AlterViewRequest {
	s.RenameTo = &renameTo
	return s
}

func (s *AlterViewRequest) WithSetComment(setComment string) *AlterViewRequest {
	s.SetComment = &setComment
	return s
}

func (s *AlterViewRequest) WithUnsetComment(unsetComment bool) *AlterViewRequest {
	s.UnsetComment = &unsetComment
	return s
}

func (s *AlterViewRequest) WithSetSecure(setSecure bool) *AlterViewRequest {
	s.SetSecure = &setSecure
	return s
}

func (s *AlterViewRequest) WithSetChangeTracking(setChangeTracking bool) *AlterViewRequest {
	s.SetChangeTracking = &setChangeTracking
	return s
}

func (s *AlterViewRequest) WithUnsetSecure(unsetSecure bool) *AlterViewRequest {
	s.UnsetSecure = &unsetSecure
	return s
}

func (s *AlterViewRequest) WithSetTags(setTags []TagAssociation) *AlterViewRequest {
	s.SetTags = setTags
	return s
}

func (s *AlterViewRequest) WithUnsetTags(unsetTags []ObjectIdentifier) *AlterViewRequest {
	s.UnsetTags = unsetTags
	return s
}

func (s *AlterViewRequest) WithAddDataMetricFunction(addDataMetricFunction ViewAddDataMetricFunctionRequest) *AlterViewRequest {
	s.AddDataMetricFunction = &addDataMetricFunction
	return s
}

func (s *AlterViewRequest) WithDropDataMetricFunction(dropDataMetricFunction ViewDropDataMetricFunctionRequest) *AlterViewRequest {
	s.DropDataMetricFunction = &dropDataMetricFunction
	return s
}

func (s *AlterViewRequest) WithModifyDataMetricFunction(modifyDataMetricFunction ViewModifyDataMetricFunctionsRequest) *AlterViewRequest {
	s.ModifyDataMetricFunction = &modifyDataMetricFunction
	return s
}

func (s *AlterViewRequest) WithSetDataMetricSchedule(setDataMetricSchedule ViewSetDataMetricScheduleRequest) *AlterViewRequest {
	s.SetDataMetricSchedule = &setDataMetricSchedule
	return s
}

func (s *AlterViewRequest) WithUnsetDataMetricSchedule(unsetDataMetricSchedule ViewUnsetDataMetricScheduleRequest) *AlterViewRequest {
	s.UnsetDataMetricSchedule = &unsetDataMetricSchedule
	return s
}

func (s *AlterViewRequest) WithAddRowAccessPolicy(addRowAccessPolicy ViewAddRowAccessPolicyRequest) *AlterViewRequest {
	s.AddRowAccessPolicy = &addRowAccessPolicy
	return s
}

func (s *AlterViewRequest) WithDropRowAccessPolicy(dropRowAccessPolicy ViewDropRowAccessPolicyRequest) *AlterViewRequest {
	s.DropRowAccessPolicy = &dropRowAccessPolicy
	return s
}

func (s *AlterViewRequest) WithDropAndAddRowAccessPolicy(dropAndAddRowAccessPolicy ViewDropAndAddRowAccessPolicyRequest) *AlterViewRequest {
	s.DropAndAddRowAccessPolicy = &dropAndAddRowAccessPolicy
	return s
}

func (s *AlterViewRequest) WithDropAllRowAccessPolicies(dropAllRowAccessPolicies bool) *AlterViewRequest {
	s.DropAllRowAccessPolicies = &dropAllRowAccessPolicies
	return s
}

func (s *AlterViewRequest) WithSetAggregationPolicy(setAggregationPolicy ViewSetAggregationPolicyRequest) *AlterViewRequest {
	s.SetAggregationPolicy = &setAggregationPolicy
	return s
}

func (s *AlterViewRequest) WithUnsetAggregationPolicy(unsetAggregationPolicy ViewUnsetAggregationPolicyRequest) *AlterViewRequest {
	s.UnsetAggregationPolicy = &unsetAggregationPolicy
	return s
}

func (s *AlterViewRequest) WithSetMaskingPolicyOnColumn(setMaskingPolicyOnColumn ViewSetColumnMaskingPolicyRequest) *AlterViewRequest {
	s.SetMaskingPolicyOnColumn = &setMaskingPolicyOnColumn
	return s
}

func (s *AlterViewRequest) WithUnsetMaskingPolicyOnColumn(unsetMaskingPolicyOnColumn ViewUnsetColumnMaskingPolicyRequest) *AlterViewRequest {
	s.UnsetMaskingPolicyOnColumn = &unsetMaskingPolicyOnColumn
	return s
}

func (s *AlterViewRequest) WithSetProjectionPolicyOnColumn(setProjectionPolicyOnColumn ViewSetProjectionPolicyRequest) *AlterViewRequest {
	s.SetProjectionPolicyOnColumn = &setProjectionPolicyOnColumn
	return s
}

func (s *AlterViewRequest) WithUnsetProjectionPolicyOnColumn(unsetProjectionPolicyOnColumn ViewUnsetProjectionPolicyRequest) *AlterViewRequest {
	s.UnsetProjectionPolicyOnColumn = &unsetProjectionPolicyOnColumn
	return s
}

func (s *AlterViewRequest) WithSetTagsOnColumn(setTagsOnColumn ViewSetColumnTagsRequest) *AlterViewRequest {
	s.SetTagsOnColumn = &setTagsOnColumn
	return s
}

func (s *AlterViewRequest) WithUnsetTagsOnColumn(unsetTagsOnColumn ViewUnsetColumnTagsRequest) *AlterViewRequest {
	s.UnsetTagsOnColumn = &unsetTagsOnColumn
	return s
}

func NewViewAddDataMetricFunctionRequest(
	dataMetricFunction []ViewDataMetricFunction,
) *ViewAddDataMetricFunctionRequest {
	s := ViewAddDataMetricFunctionRequest{}
	s.DataMetricFunction = dataMetricFunction
	return &s
}

func NewViewDropDataMetricFunctionRequest(
	dataMetricFunction []ViewDataMetricFunction,
) *ViewDropDataMetricFunctionRequest {
	s := ViewDropDataMetricFunctionRequest{}
	s.DataMetricFunction = dataMetricFunction
	return &s
}

func NewViewModifyDataMetricFunctionsRequest(
	dataMetricFunction []ViewModifyDataMetricFunction,
) *ViewModifyDataMetricFunctionsRequest {
	s := ViewModifyDataMetricFunctionsRequest{}
	s.DataMetricFunction = dataMetricFunction
	return &s
}

func NewViewSetDataMetricScheduleRequest(
	dataMetricSchedule string,
) *ViewSetDataMetricScheduleRequest {
	s := ViewSetDataMetricScheduleRequest{}
	s.DataMetricSchedule = dataMetricSchedule
	return &s
}

func NewViewUnsetDataMetricScheduleRequest() *ViewUnsetDataMetricScheduleRequest {
	s := ViewUnsetDataMetricScheduleRequest{}
	return &s
}

func NewViewAddRowAccessPolicyRequest(
	rowAccessPolicy SchemaObjectIdentifier,
	on []Column,
) *ViewAddRowAccessPolicyRequest {
	s := ViewAddRowAccessPolicyRequest{}
	s.RowAccessPolicy = rowAccessPolicy
	s.On = on
	return &s
}

func NewViewDropRowAccessPolicyRequest(
	rowAccessPolicy SchemaObjectIdentifier,
) *ViewDropRowAccessPolicyRequest {
	s := ViewDropRowAccessPolicyRequest{}
	s.RowAccessPolicy = rowAccessPolicy
	return &s
}

func NewViewDropAndAddRowAccessPolicyRequest(
	drop ViewDropRowAccessPolicyRequest,
	add ViewAddRowAccessPolicyRequest,
) *ViewDropAndAddRowAccessPolicyRequest {
	s := ViewDropAndAddRowAccessPolicyRequest{}
	s.Drop = drop
	s.Add = add
	return &s
}

func NewViewSetAggregationPolicyRequest(
	aggregationPolicy SchemaObjectIdentifier,
) *ViewSetAggregationPolicyRequest {
	s := ViewSetAggregationPolicyRequest{}
	s.AggregationPolicy = aggregationPolicy
	return &s
}

func (s *ViewSetAggregationPolicyRequest) WithEntityKey(entityKey []Column) *ViewSetAggregationPolicyRequest {
	s.EntityKey = entityKey
	return s
}

func (s *ViewSetAggregationPolicyRequest) WithForce(force bool) *ViewSetAggregationPolicyRequest {
	s.Force = &force
	return s
}

func NewViewUnsetAggregationPolicyRequest() *ViewUnsetAggregationPolicyRequest {
	s := ViewUnsetAggregationPolicyRequest{}
	return &s
}

func NewViewSetColumnMaskingPolicyRequest(
	name string,
	maskingPolicy SchemaObjectIdentifier,
) *ViewSetColumnMaskingPolicyRequest {
	s := ViewSetColumnMaskingPolicyRequest{}
	s.Name = name
	s.MaskingPolicy = maskingPolicy
	return &s
}

func (s *ViewSetColumnMaskingPolicyRequest) WithUsing(using []Column) *ViewSetColumnMaskingPolicyRequest {
	s.Using = using
	return s
}

func (s *ViewSetColumnMaskingPolicyRequest) WithForce(force bool) *ViewSetColumnMaskingPolicyRequest {
	s.Force = &force
	return s
}

func NewViewUnsetColumnMaskingPolicyRequest(
	name string,
) *ViewUnsetColumnMaskingPolicyRequest {
	s := ViewUnsetColumnMaskingPolicyRequest{}
	s.Name = name
	return &s
}

func NewViewSetProjectionPolicyRequest(
	name string,
	projectionPolicy SchemaObjectIdentifier,
) *ViewSetProjectionPolicyRequest {
	s := ViewSetProjectionPolicyRequest{}
	s.Name = name
	s.ProjectionPolicy = projectionPolicy
	return &s
}

func (s *ViewSetProjectionPolicyRequest) WithForce(force bool) *ViewSetProjectionPolicyRequest {
	s.Force = &force
	return s
}

func NewViewUnsetProjectionPolicyRequest(
	name string,
) *ViewUnsetProjectionPolicyRequest {
	s := ViewUnsetProjectionPolicyRequest{}
	s.Name = name
	return &s
}

func NewViewSetColumnTagsRequest(
	name string,
	setTags []TagAssociation,
) *ViewSetColumnTagsRequest {
	s := ViewSetColumnTagsRequest{}
	s.Name = name
	s.SetTags = setTags
	return &s
}

func NewViewUnsetColumnTagsRequest(
	name string,
	unsetTags []ObjectIdentifier,
) *ViewUnsetColumnTagsRequest {
	s := ViewUnsetColumnTagsRequest{}
	s.Name = name
	s.UnsetTags = unsetTags
	return &s
}

func NewDropViewRequest(
	name SchemaObjectIdentifier,
) *DropViewRequest {
	s := DropViewRequest{}
	s.name = name
	return &s
}

func (s *DropViewRequest) WithIfExists(ifExists bool) *DropViewRequest {
	s.IfExists = &ifExists
	return s
}

func NewShowViewRequest() *ShowViewRequest {
	s := ShowViewRequest{}
	return &s
}

func (s *ShowViewRequest) WithTerse(terse bool) *ShowViewRequest {
	s.Terse = &terse
	return s
}

func (s *ShowViewRequest) WithLike(like Like) *ShowViewRequest {
	s.Like = &like
	return s
}

func (s *ShowViewRequest) WithIn(in ExtendedIn) *ShowViewRequest {
	s.In = &in
	return s
}

func (s *ShowViewRequest) WithStartsWith(startsWith string) *ShowViewRequest {
	s.StartsWith = &startsWith
	return s
}

func (s *ShowViewRequest) WithLimit(limit LimitFrom) *ShowViewRequest {
	s.Limit = &limit
	return s
}

func NewDescribeViewRequest(
	name SchemaObjectIdentifier,
) *DescribeViewRequest {
	s := DescribeViewRequest{}
	s.name = name
	return &s
}
