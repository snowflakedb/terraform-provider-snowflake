// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

func NewCreateStreamlitRequest(
	name SchemaObjectIdentifier,
	rootLocation string,
	mainFile string,
) *CreateStreamlitRequest {
	s := CreateStreamlitRequest{}
	s.name = name
	s.RootLocation = rootLocation
	s.MainFile = mainFile
	return &s
}

func (s *CreateStreamlitRequest) WithOrReplace(orReplace bool) *CreateStreamlitRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateStreamlitRequest) WithIfNotExists(ifNotExists bool) *CreateStreamlitRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateStreamlitRequest) WithQueryWarehouse(queryWarehouse AccountObjectIdentifier) *CreateStreamlitRequest {
	s.QueryWarehouse = &queryWarehouse
	return s
}

func (s *CreateStreamlitRequest) WithExternalAccessIntegrations(externalAccessIntegrations ExternalAccessIntegrationsRequest) *CreateStreamlitRequest {
	s.ExternalAccessIntegrations = &externalAccessIntegrations
	return s
}

func (s *CreateStreamlitRequest) WithTitle(title string) *CreateStreamlitRequest {
	s.Title = &title
	return s
}

func (s *CreateStreamlitRequest) WithComment(comment string) *CreateStreamlitRequest {
	s.Comment = &comment
	return s
}

func NewExternalAccessIntegrationsRequest(
	externalAccessIntegrations []AccountObjectIdentifier,
) *ExternalAccessIntegrationsRequest {
	s := ExternalAccessIntegrationsRequest{}
	s.ExternalAccessIntegrations = externalAccessIntegrations
	return &s
}

func NewAlterStreamlitRequest(
	name SchemaObjectIdentifier,
) *AlterStreamlitRequest {
	s := AlterStreamlitRequest{}
	s.name = name
	return &s
}

func (s *AlterStreamlitRequest) WithIfExists(ifExists bool) *AlterStreamlitRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterStreamlitRequest) WithSet(set StreamlitSetRequest) *AlterStreamlitRequest {
	s.Set = &set
	return s
}

func (s *AlterStreamlitRequest) WithUnset(unset StreamlitUnsetRequest) *AlterStreamlitRequest {
	s.Unset = &unset
	return s
}

func (s *AlterStreamlitRequest) WithRenameTo(renameTo SchemaObjectIdentifier) *AlterStreamlitRequest {
	s.RenameTo = &renameTo
	return s
}

func NewStreamlitSetRequest() *StreamlitSetRequest {
	s := StreamlitSetRequest{}
	return &s
}

func (s *StreamlitSetRequest) WithRootLocation(rootLocation string) *StreamlitSetRequest {
	s.RootLocation = &rootLocation
	return s
}

func (s *StreamlitSetRequest) WithMainFile(mainFile string) *StreamlitSetRequest {
	s.MainFile = &mainFile
	return s
}

func (s *StreamlitSetRequest) WithQueryWarehouse(queryWarehouse AccountObjectIdentifier) *StreamlitSetRequest {
	s.QueryWarehouse = &queryWarehouse
	return s
}

func (s *StreamlitSetRequest) WithExternalAccessIntegrations(externalAccessIntegrations ExternalAccessIntegrationsRequest) *StreamlitSetRequest {
	s.ExternalAccessIntegrations = &externalAccessIntegrations
	return s
}

func (s *StreamlitSetRequest) WithComment(comment string) *StreamlitSetRequest {
	s.Comment = &comment
	return s
}

func (s *StreamlitSetRequest) WithTitle(title string) *StreamlitSetRequest {
	s.Title = &title
	return s
}

func NewStreamlitUnsetRequest() *StreamlitUnsetRequest {
	s := StreamlitUnsetRequest{}
	return &s
}

func (s *StreamlitUnsetRequest) WithQueryWarehouse(queryWarehouse bool) *StreamlitUnsetRequest {
	s.QueryWarehouse = &queryWarehouse
	return s
}

func (s *StreamlitUnsetRequest) WithComment(comment bool) *StreamlitUnsetRequest {
	s.Comment = &comment
	return s
}

func (s *StreamlitUnsetRequest) WithTitle(title bool) *StreamlitUnsetRequest {
	s.Title = &title
	return s
}

func NewDropStreamlitRequest(
	name SchemaObjectIdentifier,
) *DropStreamlitRequest {
	s := DropStreamlitRequest{}
	s.name = name
	return &s
}

func (s *DropStreamlitRequest) WithIfExists(ifExists bool) *DropStreamlitRequest {
	s.IfExists = &ifExists
	return s
}

func NewShowStreamlitRequest() *ShowStreamlitRequest {
	s := ShowStreamlitRequest{}
	return &s
}

func (s *ShowStreamlitRequest) WithTerse(terse bool) *ShowStreamlitRequest {
	s.Terse = &terse
	return s
}

func (s *ShowStreamlitRequest) WithLike(like Like) *ShowStreamlitRequest {
	s.Like = &like
	return s
}

func (s *ShowStreamlitRequest) WithIn(in In) *ShowStreamlitRequest {
	s.In = &in
	return s
}

func (s *ShowStreamlitRequest) WithLimit(limit LimitFrom) *ShowStreamlitRequest {
	s.Limit = &limit
	return s
}

func NewDescribeStreamlitRequest(
	name SchemaObjectIdentifier,
) *DescribeStreamlitRequest {
	s := DescribeStreamlitRequest{}
	s.name = name
	return &s
}
