// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

func NewCreateApplicationPackageRequest(
	name AccountObjectIdentifier,
) *CreateApplicationPackageRequest {
	s := CreateApplicationPackageRequest{}
	s.name = name
	return &s
}

func (s *CreateApplicationPackageRequest) WithIfNotExists(ifNotExists bool) *CreateApplicationPackageRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateApplicationPackageRequest) WithDataRetentionTimeInDays(dataRetentionTimeInDays int) *CreateApplicationPackageRequest {
	s.DataRetentionTimeInDays = &dataRetentionTimeInDays
	return s
}

func (s *CreateApplicationPackageRequest) WithMaxDataExtensionTimeInDays(maxDataExtensionTimeInDays int) *CreateApplicationPackageRequest {
	s.MaxDataExtensionTimeInDays = &maxDataExtensionTimeInDays
	return s
}

func (s *CreateApplicationPackageRequest) WithDefaultDdlCollation(defaultDdlCollation string) *CreateApplicationPackageRequest {
	s.DefaultDdlCollation = &defaultDdlCollation
	return s
}

func (s *CreateApplicationPackageRequest) WithComment(comment string) *CreateApplicationPackageRequest {
	s.Comment = &comment
	return s
}

func (s *CreateApplicationPackageRequest) WithDistribution(distribution Distribution) *CreateApplicationPackageRequest {
	s.Distribution = &distribution
	return s
}

func (s *CreateApplicationPackageRequest) WithTag(tag []TagAssociation) *CreateApplicationPackageRequest {
	s.Tag = tag
	return s
}

func NewAlterApplicationPackageRequest(
	name AccountObjectIdentifier,
) *AlterApplicationPackageRequest {
	s := AlterApplicationPackageRequest{}
	s.name = name
	return &s
}

func (s *AlterApplicationPackageRequest) WithIfExists(ifExists bool) *AlterApplicationPackageRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterApplicationPackageRequest) WithSet(set ApplicationPackageSetRequest) *AlterApplicationPackageRequest {
	s.Set = &set
	return s
}

func (s *AlterApplicationPackageRequest) WithUnset(unset ApplicationPackageUnsetRequest) *AlterApplicationPackageRequest {
	s.Unset = &unset
	return s
}

func (s *AlterApplicationPackageRequest) WithModifyReleaseDirective(modifyReleaseDirective ModifyReleaseDirectiveRequest) *AlterApplicationPackageRequest {
	s.ModifyReleaseDirective = &modifyReleaseDirective
	return s
}

func (s *AlterApplicationPackageRequest) WithSetDefaultReleaseDirective(setDefaultReleaseDirective SetDefaultReleaseDirectiveRequest) *AlterApplicationPackageRequest {
	s.SetDefaultReleaseDirective = &setDefaultReleaseDirective
	return s
}

func (s *AlterApplicationPackageRequest) WithSetReleaseDirective(setReleaseDirective SetReleaseDirectiveRequest) *AlterApplicationPackageRequest {
	s.SetReleaseDirective = &setReleaseDirective
	return s
}

func (s *AlterApplicationPackageRequest) WithUnsetReleaseDirective(unsetReleaseDirective UnsetReleaseDirectiveRequest) *AlterApplicationPackageRequest {
	s.UnsetReleaseDirective = &unsetReleaseDirective
	return s
}

func (s *AlterApplicationPackageRequest) WithAddVersion(addVersion AddVersionRequest) *AlterApplicationPackageRequest {
	s.AddVersion = &addVersion
	return s
}

func (s *AlterApplicationPackageRequest) WithDropVersion(dropVersion DropVersionRequest) *AlterApplicationPackageRequest {
	s.DropVersion = &dropVersion
	return s
}

func (s *AlterApplicationPackageRequest) WithAddPatchForVersion(addPatchForVersion AddPatchForVersionRequest) *AlterApplicationPackageRequest {
	s.AddPatchForVersion = &addPatchForVersion
	return s
}

func (s *AlterApplicationPackageRequest) WithSetTags(setTags []TagAssociation) *AlterApplicationPackageRequest {
	s.SetTags = setTags
	return s
}

func (s *AlterApplicationPackageRequest) WithUnsetTags(unsetTags []ObjectIdentifier) *AlterApplicationPackageRequest {
	s.UnsetTags = unsetTags
	return s
}

func NewApplicationPackageSetRequest() *ApplicationPackageSetRequest {
	s := ApplicationPackageSetRequest{}
	return &s
}

func (s *ApplicationPackageSetRequest) WithDataRetentionTimeInDays(dataRetentionTimeInDays int) *ApplicationPackageSetRequest {
	s.DataRetentionTimeInDays = &dataRetentionTimeInDays
	return s
}

func (s *ApplicationPackageSetRequest) WithMaxDataExtensionTimeInDays(maxDataExtensionTimeInDays int) *ApplicationPackageSetRequest {
	s.MaxDataExtensionTimeInDays = &maxDataExtensionTimeInDays
	return s
}

func (s *ApplicationPackageSetRequest) WithDefaultDdlCollation(defaultDdlCollation string) *ApplicationPackageSetRequest {
	s.DefaultDdlCollation = &defaultDdlCollation
	return s
}

func (s *ApplicationPackageSetRequest) WithComment(comment string) *ApplicationPackageSetRequest {
	s.Comment = &comment
	return s
}

func (s *ApplicationPackageSetRequest) WithDistribution(distribution Distribution) *ApplicationPackageSetRequest {
	s.Distribution = &distribution
	return s
}

func NewApplicationPackageUnsetRequest() *ApplicationPackageUnsetRequest {
	s := ApplicationPackageUnsetRequest{}
	return &s
}

func (s *ApplicationPackageUnsetRequest) WithDataRetentionTimeInDays(dataRetentionTimeInDays bool) *ApplicationPackageUnsetRequest {
	s.DataRetentionTimeInDays = &dataRetentionTimeInDays
	return s
}

func (s *ApplicationPackageUnsetRequest) WithMaxDataExtensionTimeInDays(maxDataExtensionTimeInDays bool) *ApplicationPackageUnsetRequest {
	s.MaxDataExtensionTimeInDays = &maxDataExtensionTimeInDays
	return s
}

func (s *ApplicationPackageUnsetRequest) WithDefaultDdlCollation(defaultDdlCollation bool) *ApplicationPackageUnsetRequest {
	s.DefaultDdlCollation = &defaultDdlCollation
	return s
}

func (s *ApplicationPackageUnsetRequest) WithComment(comment bool) *ApplicationPackageUnsetRequest {
	s.Comment = &comment
	return s
}

func (s *ApplicationPackageUnsetRequest) WithDistribution(distribution bool) *ApplicationPackageUnsetRequest {
	s.Distribution = &distribution
	return s
}

func NewModifyReleaseDirectiveRequest(
	releaseDirective string,
	version string,
	patch int,
) *ModifyReleaseDirectiveRequest {
	s := ModifyReleaseDirectiveRequest{}
	s.ReleaseDirective = releaseDirective
	s.Version = version
	s.Patch = patch
	return &s
}

func NewSetDefaultReleaseDirectiveRequest(
	version string,
	patch int,
) *SetDefaultReleaseDirectiveRequest {
	s := SetDefaultReleaseDirectiveRequest{}
	s.Version = version
	s.Patch = patch
	return &s
}

func NewSetReleaseDirectiveRequest(
	releaseDirective string,
	accounts []string,
	version string,
	patch int,
) *SetReleaseDirectiveRequest {
	s := SetReleaseDirectiveRequest{}
	s.ReleaseDirective = releaseDirective
	s.Accounts = accounts
	s.Version = version
	s.Patch = patch
	return &s
}

func NewUnsetReleaseDirectiveRequest(
	releaseDirective string,
) *UnsetReleaseDirectiveRequest {
	s := UnsetReleaseDirectiveRequest{}
	s.ReleaseDirective = releaseDirective
	return &s
}

func NewAddVersionRequest(
	using string,
) *AddVersionRequest {
	s := AddVersionRequest{}
	s.Using = using
	return &s
}

func (s *AddVersionRequest) WithVersionIdentifier(versionIdentifier string) *AddVersionRequest {
	s.VersionIdentifier = &versionIdentifier
	return s
}

func (s *AddVersionRequest) WithLabel(label string) *AddVersionRequest {
	s.Label = &label
	return s
}

func NewDropVersionRequest(
	versionIdentifier string,
) *DropVersionRequest {
	s := DropVersionRequest{}
	s.VersionIdentifier = versionIdentifier
	return &s
}

func NewAddPatchForVersionRequest(
	versionIdentifier *string,
	using string,
) *AddPatchForVersionRequest {
	s := AddPatchForVersionRequest{}
	s.VersionIdentifier = versionIdentifier
	s.Using = using
	return &s
}

func (s *AddPatchForVersionRequest) WithLabel(label string) *AddPatchForVersionRequest {
	s.Label = &label
	return s
}

func NewDropApplicationPackageRequest(
	name AccountObjectIdentifier,
) *DropApplicationPackageRequest {
	s := DropApplicationPackageRequest{}
	s.name = name
	return &s
}

func (s *DropApplicationPackageRequest) WithIfExists(ifExists bool) *DropApplicationPackageRequest {
	s.IfExists = &ifExists
	return s
}

func NewShowApplicationPackageRequest() *ShowApplicationPackageRequest {
	s := ShowApplicationPackageRequest{}
	return &s
}

func (s *ShowApplicationPackageRequest) WithLike(like Like) *ShowApplicationPackageRequest {
	s.Like = &like
	return s
}

func (s *ShowApplicationPackageRequest) WithStartsWith(startsWith string) *ShowApplicationPackageRequest {
	s.StartsWith = &startsWith
	return s
}

func (s *ShowApplicationPackageRequest) WithLimit(limit LimitFrom) *ShowApplicationPackageRequest {
	s.Limit = &limit
	return s
}
