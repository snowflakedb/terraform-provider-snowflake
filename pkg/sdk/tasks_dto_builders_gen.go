// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

func NewCreateTaskRequest(
	name SchemaObjectIdentifier,
	sql string,
) *CreateTaskRequest {
	s := CreateTaskRequest{}
	s.name = name
	s.sql = sql
	return &s
}

func (s *CreateTaskRequest) WithOrReplace(orReplace bool) *CreateTaskRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateTaskRequest) WithIfNotExists(ifNotExists bool) *CreateTaskRequest {
	s.IfNotExists = &ifNotExists
	return s
}

// adjusted manually
func (s *CreateTaskRequest) WithWarehouse(warehouse CreateTaskWarehouseRequest) *CreateTaskRequest {
	s.Warehouse = &warehouse
	return s
}

func (s *CreateTaskRequest) WithSchedule(schedule string) *CreateTaskRequest {
	s.Schedule = &schedule
	return s
}

func (s *CreateTaskRequest) WithConfig(config string) *CreateTaskRequest {
	s.Config = &config
	return s
}

func (s *CreateTaskRequest) WithAllowOverlappingExecution(allowOverlappingExecution bool) *CreateTaskRequest {
	s.AllowOverlappingExecution = &allowOverlappingExecution
	return s
}

func (s *CreateTaskRequest) WithSessionParameters(sessionParameters SessionParameters) *CreateTaskRequest {
	s.SessionParameters = &sessionParameters
	return s
}

func (s *CreateTaskRequest) WithUserTaskTimeoutMs(userTaskTimeoutMs int) *CreateTaskRequest {
	s.UserTaskTimeoutMs = &userTaskTimeoutMs
	return s
}

func (s *CreateTaskRequest) WithSuspendTaskAfterNumFailures(suspendTaskAfterNumFailures int) *CreateTaskRequest {
	s.SuspendTaskAfterNumFailures = &suspendTaskAfterNumFailures
	return s
}

func (s *CreateTaskRequest) WithErrorIntegration(errorIntegration AccountObjectIdentifier) *CreateTaskRequest {
	s.ErrorIntegration = &errorIntegration
	return s
}

func (s *CreateTaskRequest) WithComment(comment string) *CreateTaskRequest {
	s.Comment = &comment
	return s
}

func (s *CreateTaskRequest) WithFinalize(finalize SchemaObjectIdentifier) *CreateTaskRequest {
	s.Finalize = &finalize
	return s
}

func (s *CreateTaskRequest) WithTaskAutoRetryAttempts(taskAutoRetryAttempts int) *CreateTaskRequest {
	s.TaskAutoRetryAttempts = &taskAutoRetryAttempts
	return s
}

func (s *CreateTaskRequest) WithTag(tag []TagAssociation) *CreateTaskRequest {
	s.Tag = tag
	return s
}

func (s *CreateTaskRequest) WithUserTaskMinimumTriggerIntervalInSeconds(userTaskMinimumTriggerIntervalInSeconds int) *CreateTaskRequest {
	s.UserTaskMinimumTriggerIntervalInSeconds = &userTaskMinimumTriggerIntervalInSeconds
	return s
}

func (s *CreateTaskRequest) WithAfter(after []SchemaObjectIdentifier) *CreateTaskRequest {
	s.After = after
	return s
}

func (s *CreateTaskRequest) WithWhen(when string) *CreateTaskRequest {
	s.When = &when
	return s
}

// added manually
func NewCreateTaskWarehouseRequest() *CreateTaskWarehouseRequest {
	return &CreateTaskWarehouseRequest{}
}

// added manually
func (s *CreateTaskWarehouseRequest) WithWarehouse(warehouse AccountObjectIdentifier) *CreateTaskWarehouseRequest {
	s.Warehouse = &warehouse
	return s
}

// added manually
func (s *CreateTaskWarehouseRequest) WithUserTaskManagedInitialWarehouseSize(userTaskManagedInitialWarehouseSize WarehouseSize) *CreateTaskWarehouseRequest {
	s.UserTaskManagedInitialWarehouseSize = &userTaskManagedInitialWarehouseSize
	return s
}

func NewCreateOrAlterTaskRequest(
	name SchemaObjectIdentifier,
	sql string,
) *CreateOrAlterTaskRequest {
	s := CreateOrAlterTaskRequest{}
	s.name = name
	s.sql = sql
	return &s
}

// adjusted manually
func (s *CreateOrAlterTaskRequest) WithWarehouse(warehouse CreateTaskWarehouseRequest) *CreateOrAlterTaskRequest {
	s.Warehouse = &warehouse
	return s
}

func (s *CreateOrAlterTaskRequest) WithSchedule(schedule string) *CreateOrAlterTaskRequest {
	s.Schedule = &schedule
	return s
}

func (s *CreateOrAlterTaskRequest) WithConfig(config string) *CreateOrAlterTaskRequest {
	s.Config = &config
	return s
}

func (s *CreateOrAlterTaskRequest) WithAllowOverlappingExecution(allowOverlappingExecution bool) *CreateOrAlterTaskRequest {
	s.AllowOverlappingExecution = &allowOverlappingExecution
	return s
}

func (s *CreateOrAlterTaskRequest) WithUserTaskTimeoutMs(userTaskTimeoutMs int) *CreateOrAlterTaskRequest {
	s.UserTaskTimeoutMs = &userTaskTimeoutMs
	return s
}

func (s *CreateOrAlterTaskRequest) WithSessionParameters(sessionParameters SessionParameters) *CreateOrAlterTaskRequest {
	s.SessionParameters = &sessionParameters
	return s
}

func (s *CreateOrAlterTaskRequest) WithSuspendTaskAfterNumFailures(suspendTaskAfterNumFailures int) *CreateOrAlterTaskRequest {
	s.SuspendTaskAfterNumFailures = &suspendTaskAfterNumFailures
	return s
}

func (s *CreateOrAlterTaskRequest) WithErrorIntegration(errorIntegration AccountObjectIdentifier) *CreateOrAlterTaskRequest {
	s.ErrorIntegration = &errorIntegration
	return s
}

func (s *CreateOrAlterTaskRequest) WithComment(comment string) *CreateOrAlterTaskRequest {
	s.Comment = &comment
	return s
}

func (s *CreateOrAlterTaskRequest) WithFinalize(finalize SchemaObjectIdentifier) *CreateOrAlterTaskRequest {
	s.Finalize = &finalize
	return s
}

func (s *CreateOrAlterTaskRequest) WithTaskAutoRetryAttempts(taskAutoRetryAttempts int) *CreateOrAlterTaskRequest {
	s.TaskAutoRetryAttempts = &taskAutoRetryAttempts
	return s
}

func (s *CreateOrAlterTaskRequest) WithAfter(after []SchemaObjectIdentifier) *CreateOrAlterTaskRequest {
	s.After = after
	return s
}

func (s *CreateOrAlterTaskRequest) WithWhen(when string) *CreateOrAlterTaskRequest {
	s.When = &when
	return s
}

func NewCloneTaskRequest(
	name SchemaObjectIdentifier,
	sourceTask SchemaObjectIdentifier,
) *CloneTaskRequest {
	s := CloneTaskRequest{}
	s.name = name
	s.sourceTask = sourceTask
	return &s
}

func (s *CloneTaskRequest) WithOrReplace(orReplace bool) *CloneTaskRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CloneTaskRequest) WithCopyGrants(copyGrants bool) *CloneTaskRequest {
	s.CopyGrants = &copyGrants
	return s
}

func NewAlterTaskRequest(
	name SchemaObjectIdentifier,
) *AlterTaskRequest {
	s := AlterTaskRequest{}
	s.name = name
	return &s
}

func (s *AlterTaskRequest) WithIfExists(ifExists bool) *AlterTaskRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterTaskRequest) WithResume(resume bool) *AlterTaskRequest {
	s.Resume = &resume
	return s
}

func (s *AlterTaskRequest) WithSuspend(suspend bool) *AlterTaskRequest {
	s.Suspend = &suspend
	return s
}

func (s *AlterTaskRequest) WithRemoveAfter(removeAfter []SchemaObjectIdentifier) *AlterTaskRequest {
	s.RemoveAfter = removeAfter
	return s
}

func (s *AlterTaskRequest) WithAddAfter(addAfter []SchemaObjectIdentifier) *AlterTaskRequest {
	s.AddAfter = addAfter
	return s
}

func (s *AlterTaskRequest) WithSet(set TaskSetRequest) *AlterTaskRequest {
	s.Set = &set
	return s
}

func (s *AlterTaskRequest) WithUnset(unset TaskUnsetRequest) *AlterTaskRequest {
	s.Unset = &unset
	return s
}

func (s *AlterTaskRequest) WithSetTags(setTags []TagAssociation) *AlterTaskRequest {
	s.SetTags = setTags
	return s
}

func (s *AlterTaskRequest) WithUnsetTags(unsetTags []ObjectIdentifier) *AlterTaskRequest {
	s.UnsetTags = unsetTags
	return s
}

func (s *AlterTaskRequest) WithSetFinalize(setFinalize SchemaObjectIdentifier) *AlterTaskRequest {
	s.SetFinalize = &setFinalize
	return s
}

func (s *AlterTaskRequest) WithUnsetFinalize(unsetFinalize bool) *AlterTaskRequest {
	s.UnsetFinalize = &unsetFinalize
	return s
}

func (s *AlterTaskRequest) WithModifyAs(modifyAs string) *AlterTaskRequest {
	s.ModifyAs = &modifyAs
	return s
}

func (s *AlterTaskRequest) WithModifyWhen(modifyWhen string) *AlterTaskRequest {
	s.ModifyWhen = &modifyWhen
	return s
}

func (s *AlterTaskRequest) WithRemoveWhen(removeWhen bool) *AlterTaskRequest {
	s.RemoveWhen = &removeWhen
	return s
}

func NewTaskSetRequest() *TaskSetRequest {
	s := TaskSetRequest{}
	return &s
}

func (s *TaskSetRequest) WithWarehouse(warehouse AccountObjectIdentifier) *TaskSetRequest {
	s.Warehouse = &warehouse
	return s
}

func (s *TaskSetRequest) WithUserTaskManagedInitialWarehouseSize(userTaskManagedInitialWarehouseSize WarehouseSize) *TaskSetRequest {
	s.UserTaskManagedInitialWarehouseSize = &userTaskManagedInitialWarehouseSize
	return s
}

func (s *TaskSetRequest) WithSchedule(schedule string) *TaskSetRequest {
	s.Schedule = &schedule
	return s
}

func (s *TaskSetRequest) WithConfig(config string) *TaskSetRequest {
	s.Config = &config
	return s
}

func (s *TaskSetRequest) WithAllowOverlappingExecution(allowOverlappingExecution bool) *TaskSetRequest {
	s.AllowOverlappingExecution = &allowOverlappingExecution
	return s
}

func (s *TaskSetRequest) WithUserTaskTimeoutMs(userTaskTimeoutMs int) *TaskSetRequest {
	s.UserTaskTimeoutMs = &userTaskTimeoutMs
	return s
}

func (s *TaskSetRequest) WithSuspendTaskAfterNumFailures(suspendTaskAfterNumFailures int) *TaskSetRequest {
	s.SuspendTaskAfterNumFailures = &suspendTaskAfterNumFailures
	return s
}

func (s *TaskSetRequest) WithErrorIntegration(errorIntegration AccountObjectIdentifier) *TaskSetRequest {
	s.ErrorIntegration = &errorIntegration
	return s
}

func (s *TaskSetRequest) WithComment(comment string) *TaskSetRequest {
	s.Comment = &comment
	return s
}

func (s *TaskSetRequest) WithSessionParameters(sessionParameters SessionParameters) *TaskSetRequest {
	s.SessionParameters = &sessionParameters
	return s
}

func (s *TaskSetRequest) WithTaskAutoRetryAttempts(taskAutoRetryAttempts int) *TaskSetRequest {
	s.TaskAutoRetryAttempts = &taskAutoRetryAttempts
	return s
}

func (s *TaskSetRequest) WithUserTaskMinimumTriggerIntervalInSeconds(userTaskMinimumTriggerIntervalInSeconds int) *TaskSetRequest {
	s.UserTaskMinimumTriggerIntervalInSeconds = &userTaskMinimumTriggerIntervalInSeconds
	return s
}

func NewTaskUnsetRequest() *TaskUnsetRequest {
	s := TaskUnsetRequest{}
	return &s
}

func (s *TaskUnsetRequest) WithWarehouse(warehouse bool) *TaskUnsetRequest {
	s.Warehouse = &warehouse
	return s
}

func (s *TaskUnsetRequest) WithUserTaskManagedInitialWarehouseSize(userTaskManagedInitialWarehouseSize bool) *TaskUnsetRequest {
	s.UserTaskManagedInitialWarehouseSize = &userTaskManagedInitialWarehouseSize
	return s
}

func (s *TaskUnsetRequest) WithSchedule(schedule bool) *TaskUnsetRequest {
	s.Schedule = &schedule
	return s
}

func (s *TaskUnsetRequest) WithConfig(config bool) *TaskUnsetRequest {
	s.Config = &config
	return s
}

func (s *TaskUnsetRequest) WithAllowOverlappingExecution(allowOverlappingExecution bool) *TaskUnsetRequest {
	s.AllowOverlappingExecution = &allowOverlappingExecution
	return s
}

func (s *TaskUnsetRequest) WithUserTaskTimeoutMs(userTaskTimeoutMs bool) *TaskUnsetRequest {
	s.UserTaskTimeoutMs = &userTaskTimeoutMs
	return s
}

func (s *TaskUnsetRequest) WithSuspendTaskAfterNumFailures(suspendTaskAfterNumFailures bool) *TaskUnsetRequest {
	s.SuspendTaskAfterNumFailures = &suspendTaskAfterNumFailures
	return s
}

func (s *TaskUnsetRequest) WithErrorIntegration(errorIntegration bool) *TaskUnsetRequest {
	s.ErrorIntegration = &errorIntegration
	return s
}

func (s *TaskUnsetRequest) WithComment(comment bool) *TaskUnsetRequest {
	s.Comment = &comment
	return s
}

func (s *TaskUnsetRequest) WithTaskAutoRetryAttempts(taskAutoRetryAttempts bool) *TaskUnsetRequest {
	s.TaskAutoRetryAttempts = &taskAutoRetryAttempts
	return s
}

func (s *TaskUnsetRequest) WithUserTaskMinimumTriggerIntervalInSeconds(userTaskMinimumTriggerIntervalInSeconds bool) *TaskUnsetRequest {
	s.UserTaskMinimumTriggerIntervalInSeconds = &userTaskMinimumTriggerIntervalInSeconds
	return s
}

func (s *TaskUnsetRequest) WithSessionParametersUnset(sessionParametersUnset SessionParametersUnset) *TaskUnsetRequest {
	s.SessionParametersUnset = &sessionParametersUnset
	return s
}

func NewDropTaskRequest(
	name SchemaObjectIdentifier,
) *DropTaskRequest {
	s := DropTaskRequest{}
	s.name = name
	return &s
}

func (s *DropTaskRequest) WithIfExists(ifExists bool) *DropTaskRequest {
	s.IfExists = &ifExists
	return s
}

func NewShowTaskRequest() *ShowTaskRequest {
	s := ShowTaskRequest{}
	return &s
}

func (s *ShowTaskRequest) WithTerse(terse bool) *ShowTaskRequest {
	s.Terse = &terse
	return s
}

func (s *ShowTaskRequest) WithLike(like Like) *ShowTaskRequest {
	s.Like = &like
	return s
}

func (s *ShowTaskRequest) WithIn(in ExtendedIn) *ShowTaskRequest {
	s.In = &in
	return s
}

func (s *ShowTaskRequest) WithStartsWith(startsWith string) *ShowTaskRequest {
	s.StartsWith = &startsWith
	return s
}

func (s *ShowTaskRequest) WithRootOnly(rootOnly bool) *ShowTaskRequest {
	s.RootOnly = &rootOnly
	return s
}

func (s *ShowTaskRequest) WithLimit(limit LimitFrom) *ShowTaskRequest {
	s.Limit = &limit
	return s
}

func NewDescribeTaskRequest(
	name SchemaObjectIdentifier,
) *DescribeTaskRequest {
	s := DescribeTaskRequest{}
	s.name = name
	return &s
}

func NewExecuteTaskRequest(
	name SchemaObjectIdentifier,
) *ExecuteTaskRequest {
	s := ExecuteTaskRequest{}
	s.name = name
	return &s
}

func (s *ExecuteTaskRequest) WithRetryLast(retryLast bool) *ExecuteTaskRequest {
	s.RetryLast = &retryLast
	return s
}
