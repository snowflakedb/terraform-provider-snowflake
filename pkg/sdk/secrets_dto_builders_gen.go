// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

func NewCreateWithOAuthClientCredentialsFlowSecretRequest(
	name SchemaObjectIdentifier,
	apiIntegration AccountObjectIdentifier,
) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s := CreateWithOAuthClientCredentialsFlowSecretRequest{}
	s.name = name
	s.ApiIntegration = apiIntegration
	return &s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithOrReplace(orReplace bool) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithIfNotExists(ifNotExists bool) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithOauthScopes(oauthScopes OauthScopesListRequest) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.OauthScopes = &oauthScopes
	return s
}

func (s *CreateWithOAuthClientCredentialsFlowSecretRequest) WithComment(comment string) *CreateWithOAuthClientCredentialsFlowSecretRequest {
	s.Comment = &comment
	return s
}

func NewOauthScopesListRequest(
	oauthScopesList []ApiIntegrationScope,
) *OauthScopesListRequest {
	s := OauthScopesListRequest{}
	s.OauthScopesList = oauthScopesList
	return &s
}

func NewCreateWithOAuthAuthorizationCodeFlowSecretRequest(
	name SchemaObjectIdentifier,
	oauthRefreshToken string,
	oauthRefreshTokenExpiryTime string,
	apiIntegration AccountObjectIdentifier,
) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s := CreateWithOAuthAuthorizationCodeFlowSecretRequest{}
	s.name = name
	s.OauthRefreshToken = oauthRefreshToken
	s.OauthRefreshTokenExpiryTime = oauthRefreshTokenExpiryTime
	s.ApiIntegration = apiIntegration
	return &s
}

func (s *CreateWithOAuthAuthorizationCodeFlowSecretRequest) WithOrReplace(orReplace bool) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateWithOAuthAuthorizationCodeFlowSecretRequest) WithIfNotExists(ifNotExists bool) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateWithOAuthAuthorizationCodeFlowSecretRequest) WithComment(comment string) *CreateWithOAuthAuthorizationCodeFlowSecretRequest {
	s.Comment = &comment
	return s
}

func NewCreateWithBasicAuthenticationSecretRequest(
	name SchemaObjectIdentifier,
	username string,
	password string,
) *CreateWithBasicAuthenticationSecretRequest {
	s := CreateWithBasicAuthenticationSecretRequest{}
	s.name = name
	s.Username = username
	s.Password = password
	return &s
}

func (s *CreateWithBasicAuthenticationSecretRequest) WithOrReplace(orReplace bool) *CreateWithBasicAuthenticationSecretRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateWithBasicAuthenticationSecretRequest) WithIfNotExists(ifNotExists bool) *CreateWithBasicAuthenticationSecretRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateWithBasicAuthenticationSecretRequest) WithComment(comment string) *CreateWithBasicAuthenticationSecretRequest {
	s.Comment = &comment
	return s
}

func NewCreateWithGenericStringSecretRequest(
	name SchemaObjectIdentifier,
	secretString string,
) *CreateWithGenericStringSecretRequest {
	s := CreateWithGenericStringSecretRequest{}
	s.name = name
	s.SecretString = secretString
	return &s
}

func (s *CreateWithGenericStringSecretRequest) WithOrReplace(orReplace bool) *CreateWithGenericStringSecretRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateWithGenericStringSecretRequest) WithIfNotExists(ifNotExists bool) *CreateWithGenericStringSecretRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateWithGenericStringSecretRequest) WithComment(comment string) *CreateWithGenericStringSecretRequest {
	s.Comment = &comment
	return s
}

func NewAlterSecretRequest(
	name SchemaObjectIdentifier,
) *AlterSecretRequest {
	s := AlterSecretRequest{}
	s.name = name
	return &s
}

func (s *AlterSecretRequest) WithIfExists(ifExists bool) *AlterSecretRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterSecretRequest) WithSet(set SecretSetRequest) *AlterSecretRequest {
	s.Set = &set
	return s
}

func (s *AlterSecretRequest) WithUnset(unset SecretUnsetRequest) *AlterSecretRequest {
	s.Unset = &unset
	return s
}

func NewSecretSetRequest() *SecretSetRequest {
	s := SecretSetRequest{}
	return &s
}

func (s *SecretSetRequest) WithComment(comment string) *SecretSetRequest {
	s.Comment = &comment
	return s
}

func (s *SecretSetRequest) WithSetForFlow(setForFlow SetForFlowRequest) *SecretSetRequest {
	s.SetForFlow = &setForFlow
	return s
}

func NewSetForFlowRequest() *SetForFlowRequest {
	s := SetForFlowRequest{}
	return &s
}

func (s *SetForFlowRequest) WithSetForOAuthClientCredentials(setForOAuthClientCredentials SetForOAuthClientCredentialsRequest) *SetForFlowRequest {
	s.SetForOAuthClientCredentials = &setForOAuthClientCredentials
	return s
}

func (s *SetForFlowRequest) WithSetForOAuthAuthorization(setForOAuthAuthorization SetForOAuthAuthorizationRequest) *SetForFlowRequest {
	s.SetForOAuthAuthorization = &setForOAuthAuthorization
	return s
}

func (s *SetForFlowRequest) WithSetForBasicAuthentication(setForBasicAuthentication SetForBasicAuthenticationRequest) *SetForFlowRequest {
	s.SetForBasicAuthentication = &setForBasicAuthentication
	return s
}

func (s *SetForFlowRequest) WithSetForGenericString(setForGenericString SetForGenericStringRequest) *SetForFlowRequest {
	s.SetForGenericString = &setForGenericString
	return s
}

func NewSetForOAuthClientCredentialsRequest() *SetForOAuthClientCredentialsRequest {
	s := SetForOAuthClientCredentialsRequest{}
	return &s
}

func (s *SetForOAuthClientCredentialsRequest) WithOauthScopes(oauthScopes OauthScopesListRequest) *SetForOAuthClientCredentialsRequest {
	s.OauthScopes = &oauthScopes
	return s
}

func NewSetForOAuthAuthorizationRequest() *SetForOAuthAuthorizationRequest {
	s := SetForOAuthAuthorizationRequest{}
	return &s
}

func (s *SetForOAuthAuthorizationRequest) WithOauthRefreshToken(oauthRefreshToken string) *SetForOAuthAuthorizationRequest {
	s.OauthRefreshToken = &oauthRefreshToken
	return s
}

func (s *SetForOAuthAuthorizationRequest) WithOauthRefreshTokenExpiryTime(oauthRefreshTokenExpiryTime string) *SetForOAuthAuthorizationRequest {
	s.OauthRefreshTokenExpiryTime = &oauthRefreshTokenExpiryTime
	return s
}

func NewSetForBasicAuthenticationRequest() *SetForBasicAuthenticationRequest {
	s := SetForBasicAuthenticationRequest{}
	return &s
}

func (s *SetForBasicAuthenticationRequest) WithUsername(username string) *SetForBasicAuthenticationRequest {
	s.Username = &username
	return s
}

func (s *SetForBasicAuthenticationRequest) WithPassword(password string) *SetForBasicAuthenticationRequest {
	s.Password = &password
	return s
}

func NewSetForGenericStringRequest() *SetForGenericStringRequest {
	s := SetForGenericStringRequest{}
	return &s
}

func (s *SetForGenericStringRequest) WithSecretString(secretString string) *SetForGenericStringRequest {
	s.SecretString = &secretString
	return s
}

func NewSecretUnsetRequest() *SecretUnsetRequest {
	s := SecretUnsetRequest{}
	return &s
}

func (s *SecretUnsetRequest) WithComment(comment bool) *SecretUnsetRequest {
	s.Comment = &comment
	return s
}

func NewDropSecretRequest(
	name SchemaObjectIdentifier,
) *DropSecretRequest {
	s := DropSecretRequest{}
	s.name = name
	return &s
}

func (s *DropSecretRequest) WithIfExists(ifExists bool) *DropSecretRequest {
	s.IfExists = &ifExists
	return s
}

func NewShowSecretRequest() *ShowSecretRequest {
	s := ShowSecretRequest{}
	return &s
}

func (s *ShowSecretRequest) WithLike(like Like) *ShowSecretRequest {
	s.Like = &like
	return s
}

func (s *ShowSecretRequest) WithIn(in ExtendedIn) *ShowSecretRequest {
	s.In = &in
	return s
}

func NewDescribeSecretRequest(
	name SchemaObjectIdentifier,
) *DescribeSecretRequest {
	s := DescribeSecretRequest{}
	s.name = name
	return &s
}
