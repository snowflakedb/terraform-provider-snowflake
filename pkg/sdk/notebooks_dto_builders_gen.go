// Code generated by dto builder generator; DO NOT EDIT.

package sdk

func NewCreateNotebookRequest(
	name SchemaObjectIdentifier,
) *CreateNotebookRequest {
	s := CreateNotebookRequest{}
	s.name = name
	return &s
}

func (s *CreateNotebookRequest) WithOrReplace(OrReplace bool) *CreateNotebookRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateNotebookRequest) WithIfNotExists(IfNotExists bool) *CreateNotebookRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateNotebookRequest) WithFrom(From Location) *CreateNotebookRequest {
	s.From = &From
	return s
}

func (s *CreateNotebookRequest) WithTitle(Title string) *CreateNotebookRequest {
	s.Title = &Title
	return s
}

func (s *CreateNotebookRequest) WithMainFile(MainFile string) *CreateNotebookRequest {
	s.MainFile = &MainFile
	return s
}

func (s *CreateNotebookRequest) WithComment(Comment string) *CreateNotebookRequest {
	s.Comment = &Comment
	return s
}

func (s *CreateNotebookRequest) WithQueryWarehouse(QueryWarehouse AccountObjectIdentifier) *CreateNotebookRequest {
	s.QueryWarehouse = &QueryWarehouse
	return s
}

func (s *CreateNotebookRequest) WithIdleAutoShutdownTimeSeconds(IdleAutoShutdownTimeSeconds int) *CreateNotebookRequest {
	s.IdleAutoShutdownTimeSeconds = &IdleAutoShutdownTimeSeconds
	return s
}

func (s *CreateNotebookRequest) WithWarehouse(Warehouse AccountObjectIdentifier) *CreateNotebookRequest {
	s.Warehouse = &Warehouse
	return s
}

func (s *CreateNotebookRequest) WithRuntimeName(RuntimeName string) *CreateNotebookRequest {
	s.RuntimeName = &RuntimeName
	return s
}

func (s *CreateNotebookRequest) WithComputePool(ComputePool AccountObjectIdentifier) *CreateNotebookRequest {
	s.ComputePool = &ComputePool
	return s
}

func (s *CreateNotebookRequest) WithExternalAccessIntegrations(ExternalAccessIntegrations []AccountObjectIdentifier) *CreateNotebookRequest {
	s.ExternalAccessIntegrations = ExternalAccessIntegrations
	return s
}

func (s *CreateNotebookRequest) WithRuntimeEnvironmentVersion(RuntimeEnvironmentVersion string) *CreateNotebookRequest {
	s.RuntimeEnvironmentVersion = &RuntimeEnvironmentVersion
	return s
}

func (s *CreateNotebookRequest) WithDefaultVersion(DefaultVersion string) *CreateNotebookRequest {
	s.DefaultVersion = &DefaultVersion
	return s
}

func NewAlterNotebookRequest(
	name SchemaObjectIdentifier,
) *AlterNotebookRequest {
	s := AlterNotebookRequest{}
	s.name = name
	return &s
}

func (s *AlterNotebookRequest) WithIfExists(IfExists bool) *AlterNotebookRequest {
	s.IfExists = &IfExists
	return s
}

func (s *AlterNotebookRequest) WithRenameTo(RenameTo SchemaObjectIdentifier) *AlterNotebookRequest {
	s.RenameTo = &RenameTo
	return s
}

func (s *AlterNotebookRequest) WithSet(Set NotebookSetRequest) *AlterNotebookRequest {
	s.Set = &Set
	return s
}

func (s *AlterNotebookRequest) WithUnset(Unset NotebookUnsetRequest) *AlterNotebookRequest {
	s.Unset = &Unset
	return s
}

func (s *AlterNotebookRequest) WithSetTags(SetTags []TagAssociation) *AlterNotebookRequest {
	s.SetTags = SetTags
	return s
}

func (s *AlterNotebookRequest) WithUnsetTags(UnsetTags []ObjectIdentifier) *AlterNotebookRequest {
	s.UnsetTags = UnsetTags
	return s
}

func NewNotebookSetRequest() *NotebookSetRequest {
	return &NotebookSetRequest{}
}

func (s *NotebookSetRequest) WithComment(Comment string) *NotebookSetRequest {
	s.Comment = &Comment
	return s
}

func (s *NotebookSetRequest) WithQueryWarehouse(QueryWarehouse AccountObjectIdentifier) *NotebookSetRequest {
	s.QueryWarehouse = &QueryWarehouse
	return s
}

func (s *NotebookSetRequest) WithIdleAutoShutdownTimeSeconds(IdleAutoShutdownTimeSeconds int) *NotebookSetRequest {
	s.IdleAutoShutdownTimeSeconds = &IdleAutoShutdownTimeSeconds
	return s
}

func (s *NotebookSetRequest) WithSecrets(Secrets SecretsListRequest) *NotebookSetRequest {
	s.Secrets = &Secrets
	return s
}

func (s *NotebookSetRequest) WithMainFile(MainFile string) *NotebookSetRequest {
	s.MainFile = &MainFile
	return s
}

func (s *NotebookSetRequest) WithWarehouse(Warehouse AccountObjectIdentifier) *NotebookSetRequest {
	s.Warehouse = &Warehouse
	return s
}

func (s *NotebookSetRequest) WithRuntimeName(RuntimeName string) *NotebookSetRequest {
	s.RuntimeName = &RuntimeName
	return s
}

func (s *NotebookSetRequest) WithComputePool(ComputePool AccountObjectIdentifier) *NotebookSetRequest {
	s.ComputePool = &ComputePool
	return s
}

func (s *NotebookSetRequest) WithExternalAccessIntegrations(ExternalAccessIntegrations []AccountObjectIdentifier) *NotebookSetRequest {
	s.ExternalAccessIntegrations = ExternalAccessIntegrations
	return s
}

func (s *NotebookSetRequest) WithRuntimeEnvironmentVersion(RuntimeEnvironmentVersion string) *NotebookSetRequest {
	s.RuntimeEnvironmentVersion = &RuntimeEnvironmentVersion
	return s
}

func NewNotebookUnsetRequest() *NotebookUnsetRequest {
	return &NotebookUnsetRequest{}
}

func (s *NotebookUnsetRequest) WithComment(Comment bool) *NotebookUnsetRequest {
	s.Comment = &Comment
	return s
}

func (s *NotebookUnsetRequest) WithQueryWarehouse(QueryWarehouse bool) *NotebookUnsetRequest {
	s.QueryWarehouse = &QueryWarehouse
	return s
}

func (s *NotebookUnsetRequest) WithSecrets(Secrets bool) *NotebookUnsetRequest {
	s.Secrets = &Secrets
	return s
}

func (s *NotebookUnsetRequest) WithWarehouse(Warehouse bool) *NotebookUnsetRequest {
	s.Warehouse = &Warehouse
	return s
}

func (s *NotebookUnsetRequest) WithRuntimeName(RuntimeName bool) *NotebookUnsetRequest {
	s.RuntimeName = &RuntimeName
	return s
}

func (s *NotebookUnsetRequest) WithComputePool(ComputePool bool) *NotebookUnsetRequest {
	s.ComputePool = &ComputePool
	return s
}

func (s *NotebookUnsetRequest) WithExternalAccessIntegrations(ExternalAccessIntegrations bool) *NotebookUnsetRequest {
	s.ExternalAccessIntegrations = &ExternalAccessIntegrations
	return s
}

func (s *NotebookUnsetRequest) WithRuntimeEnvironmentVersion(RuntimeEnvironmentVersion bool) *NotebookUnsetRequest {
	s.RuntimeEnvironmentVersion = &RuntimeEnvironmentVersion
	return s
}

func NewDropNotebookRequest(
	name SchemaObjectIdentifier,
) *DropNotebookRequest {
	s := DropNotebookRequest{}
	s.name = name
	return &s
}

func (s *DropNotebookRequest) WithIfExists(IfExists bool) *DropNotebookRequest {
	s.IfExists = &IfExists
	return s
}

func NewDescribeNotebookRequest(
	name SchemaObjectIdentifier,
) *DescribeNotebookRequest {
	s := DescribeNotebookRequest{}
	s.name = name
	return &s
}

func NewShowNotebookRequest() *ShowNotebookRequest {
	return &ShowNotebookRequest{}
}

func (s *ShowNotebookRequest) WithLike(Like Like) *ShowNotebookRequest {
	s.Like = &Like
	return s
}

func (s *ShowNotebookRequest) WithIn(In In) *ShowNotebookRequest {
	s.In = &In
	return s
}

func (s *ShowNotebookRequest) WithLimit(Limit LimitFrom) *ShowNotebookRequest {
	s.Limit = &Limit
	return s
}

func (s *ShowNotebookRequest) WithStartsWith(StartsWith string) *ShowNotebookRequest {
	s.StartsWith = &StartsWith
	return s
}
