// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

import "github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk/datatypes"

func NewCreateForJavaProcedureRequest(
	name SchemaObjectIdentifier,
	returns ProcedureReturnsRequest,
	runtimeVersion string,
	packages []ProcedurePackageRequest,
	handler string,
) *CreateForJavaProcedureRequest {
	s := CreateForJavaProcedureRequest{}
	s.name = name
	s.Returns = returns
	s.RuntimeVersion = runtimeVersion
	s.Packages = packages
	s.Handler = handler
	return &s
}

func (s *CreateForJavaProcedureRequest) WithOrReplace(orReplace bool) *CreateForJavaProcedureRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateForJavaProcedureRequest) WithSecure(secure bool) *CreateForJavaProcedureRequest {
	s.Secure = &secure
	return s
}

func (s *CreateForJavaProcedureRequest) WithArguments(arguments []ProcedureArgumentRequest) *CreateForJavaProcedureRequest {
	s.Arguments = arguments
	return s
}

func (s *CreateForJavaProcedureRequest) WithCopyGrants(copyGrants bool) *CreateForJavaProcedureRequest {
	s.CopyGrants = &copyGrants
	return s
}

func (s *CreateForJavaProcedureRequest) WithNullInputBehavior(nullInputBehavior NullInputBehavior) *CreateForJavaProcedureRequest {
	s.NullInputBehavior = &nullInputBehavior
	return s
}

func (s *CreateForJavaProcedureRequest) WithReturnResultsBehavior(returnResultsBehavior ReturnResultsBehavior) *CreateForJavaProcedureRequest {
	s.ReturnResultsBehavior = &returnResultsBehavior
	return s
}

func (s *CreateForJavaProcedureRequest) WithImports(imports []ProcedureImportRequest) *CreateForJavaProcedureRequest {
	s.Imports = imports
	return s
}

func (s *CreateForJavaProcedureRequest) WithExternalAccessIntegrations(externalAccessIntegrations []AccountObjectIdentifier) *CreateForJavaProcedureRequest {
	s.ExternalAccessIntegrations = externalAccessIntegrations
	return s
}

func (s *CreateForJavaProcedureRequest) WithSecrets(secrets []SecretReference) *CreateForJavaProcedureRequest {
	s.Secrets = secrets
	return s
}

func (s *CreateForJavaProcedureRequest) WithTargetPath(targetPath string) *CreateForJavaProcedureRequest {
	s.TargetPath = &targetPath
	return s
}

func (s *CreateForJavaProcedureRequest) WithComment(comment string) *CreateForJavaProcedureRequest {
	s.Comment = &comment
	return s
}

func (s *CreateForJavaProcedureRequest) WithExecuteAs(executeAs ExecuteAs) *CreateForJavaProcedureRequest {
	s.ExecuteAs = &executeAs
	return s
}

func (s *CreateForJavaProcedureRequest) WithProcedureDefinition(procedureDefinition string) *CreateForJavaProcedureRequest {
	s.ProcedureDefinition = &procedureDefinition
	return s
}

func NewProcedureArgumentRequest(
	argName string,
	argDataType datatypes.DataType,
) *ProcedureArgumentRequest {
	s := ProcedureArgumentRequest{}
	s.ArgName = argName
	s.ArgDataType = argDataType
	return &s
}

func (s *ProcedureArgumentRequest) WithArgDataTypeOld(argDataTypeOld DataType) *ProcedureArgumentRequest {
	s.ArgDataTypeOld = argDataTypeOld
	return s
}

func (s *ProcedureArgumentRequest) WithDefaultValue(defaultValue string) *ProcedureArgumentRequest {
	s.DefaultValue = &defaultValue
	return s
}

func NewProcedureReturnsRequest() *ProcedureReturnsRequest {
	s := ProcedureReturnsRequest{}
	return &s
}

func (s *ProcedureReturnsRequest) WithResultDataType(resultDataType ProcedureReturnsResultDataTypeRequest) *ProcedureReturnsRequest {
	s.ResultDataType = &resultDataType
	return s
}

func (s *ProcedureReturnsRequest) WithTable(table ProcedureReturnsTableRequest) *ProcedureReturnsRequest {
	s.Table = &table
	return s
}

func NewProcedureReturnsResultDataTypeRequest(
	resultDataType datatypes.DataType,
) *ProcedureReturnsResultDataTypeRequest {
	s := ProcedureReturnsResultDataTypeRequest{}
	s.ResultDataType = resultDataType
	return &s
}

func (s *ProcedureReturnsResultDataTypeRequest) WithResultDataTypeOld(resultDataTypeOld DataType) *ProcedureReturnsResultDataTypeRequest {
	s.ResultDataTypeOld = resultDataTypeOld
	return s
}

func (s *ProcedureReturnsResultDataTypeRequest) WithNull(null bool) *ProcedureReturnsResultDataTypeRequest {
	s.Null = &null
	return s
}

func (s *ProcedureReturnsResultDataTypeRequest) WithNotNull(notNull bool) *ProcedureReturnsResultDataTypeRequest {
	s.NotNull = &notNull
	return s
}

func NewProcedureReturnsTableRequest() *ProcedureReturnsTableRequest {
	s := ProcedureReturnsTableRequest{}
	return &s
}

func (s *ProcedureReturnsTableRequest) WithColumns(columns []ProcedureColumnRequest) *ProcedureReturnsTableRequest {
	s.Columns = columns
	return s
}

func NewProcedureColumnRequest(
	columnName string,
	columnDataType datatypes.DataType,
) *ProcedureColumnRequest {
	s := ProcedureColumnRequest{}
	s.ColumnName = columnName
	s.ColumnDataType = columnDataType
	return &s
}

func (s *ProcedureColumnRequest) WithColumnDataTypeOld(columnDataTypeOld DataType) *ProcedureColumnRequest {
	s.ColumnDataTypeOld = columnDataTypeOld
	return s
}

func NewProcedurePackageRequest(
	procedurePackage string,
) *ProcedurePackageRequest {
	s := ProcedurePackageRequest{}
	s.ProcedurePackage = procedurePackage
	return &s
}

func NewProcedureImportRequest(
	procedureImport string,
) *ProcedureImportRequest {
	s := ProcedureImportRequest{}
	s.ProcedureImport = procedureImport
	return &s
}

func NewCreateForJavaScriptProcedureRequest(
	name SchemaObjectIdentifier,
	resultDataType datatypes.DataType,
	procedureDefinition string,
) *CreateForJavaScriptProcedureRequest {
	s := CreateForJavaScriptProcedureRequest{}
	s.name = name
	s.ResultDataType = resultDataType
	s.ProcedureDefinition = procedureDefinition
	return &s
}

func (s *CreateForJavaScriptProcedureRequest) WithOrReplace(orReplace bool) *CreateForJavaScriptProcedureRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateForJavaScriptProcedureRequest) WithSecure(secure bool) *CreateForJavaScriptProcedureRequest {
	s.Secure = &secure
	return s
}

func (s *CreateForJavaScriptProcedureRequest) WithArguments(arguments []ProcedureArgumentRequest) *CreateForJavaScriptProcedureRequest {
	s.Arguments = arguments
	return s
}

func (s *CreateForJavaScriptProcedureRequest) WithCopyGrants(copyGrants bool) *CreateForJavaScriptProcedureRequest {
	s.CopyGrants = &copyGrants
	return s
}

func (s *CreateForJavaScriptProcedureRequest) WithResultDataTypeOld(resultDataTypeOld DataType) *CreateForJavaScriptProcedureRequest {
	s.ResultDataTypeOld = resultDataTypeOld
	return s
}

func (s *CreateForJavaScriptProcedureRequest) WithNotNull(notNull bool) *CreateForJavaScriptProcedureRequest {
	s.NotNull = &notNull
	return s
}

func (s *CreateForJavaScriptProcedureRequest) WithNullInputBehavior(nullInputBehavior NullInputBehavior) *CreateForJavaScriptProcedureRequest {
	s.NullInputBehavior = &nullInputBehavior
	return s
}

func (s *CreateForJavaScriptProcedureRequest) WithReturnResultsBehavior(returnResultsBehavior ReturnResultsBehavior) *CreateForJavaScriptProcedureRequest {
	s.ReturnResultsBehavior = &returnResultsBehavior
	return s
}

func (s *CreateForJavaScriptProcedureRequest) WithComment(comment string) *CreateForJavaScriptProcedureRequest {
	s.Comment = &comment
	return s
}

func (s *CreateForJavaScriptProcedureRequest) WithExecuteAs(executeAs ExecuteAs) *CreateForJavaScriptProcedureRequest {
	s.ExecuteAs = &executeAs
	return s
}

func NewCreateForPythonProcedureRequest(
	name SchemaObjectIdentifier,
	returns ProcedureReturnsRequest,
	runtimeVersion string,
	packages []ProcedurePackageRequest,
	handler string,
) *CreateForPythonProcedureRequest {
	s := CreateForPythonProcedureRequest{}
	s.name = name
	s.Returns = returns
	s.RuntimeVersion = runtimeVersion
	s.Packages = packages
	s.Handler = handler
	return &s
}

func (s *CreateForPythonProcedureRequest) WithOrReplace(orReplace bool) *CreateForPythonProcedureRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateForPythonProcedureRequest) WithSecure(secure bool) *CreateForPythonProcedureRequest {
	s.Secure = &secure
	return s
}

func (s *CreateForPythonProcedureRequest) WithArguments(arguments []ProcedureArgumentRequest) *CreateForPythonProcedureRequest {
	s.Arguments = arguments
	return s
}

func (s *CreateForPythonProcedureRequest) WithCopyGrants(copyGrants bool) *CreateForPythonProcedureRequest {
	s.CopyGrants = &copyGrants
	return s
}

func (s *CreateForPythonProcedureRequest) WithNullInputBehavior(nullInputBehavior NullInputBehavior) *CreateForPythonProcedureRequest {
	s.NullInputBehavior = &nullInputBehavior
	return s
}

func (s *CreateForPythonProcedureRequest) WithReturnResultsBehavior(returnResultsBehavior ReturnResultsBehavior) *CreateForPythonProcedureRequest {
	s.ReturnResultsBehavior = &returnResultsBehavior
	return s
}

func (s *CreateForPythonProcedureRequest) WithImports(imports []ProcedureImportRequest) *CreateForPythonProcedureRequest {
	s.Imports = imports
	return s
}

func (s *CreateForPythonProcedureRequest) WithExternalAccessIntegrations(externalAccessIntegrations []AccountObjectIdentifier) *CreateForPythonProcedureRequest {
	s.ExternalAccessIntegrations = externalAccessIntegrations
	return s
}

func (s *CreateForPythonProcedureRequest) WithSecrets(secrets []SecretReference) *CreateForPythonProcedureRequest {
	s.Secrets = secrets
	return s
}

func (s *CreateForPythonProcedureRequest) WithComment(comment string) *CreateForPythonProcedureRequest {
	s.Comment = &comment
	return s
}

func (s *CreateForPythonProcedureRequest) WithExecuteAs(executeAs ExecuteAs) *CreateForPythonProcedureRequest {
	s.ExecuteAs = &executeAs
	return s
}

func (s *CreateForPythonProcedureRequest) WithProcedureDefinition(procedureDefinition string) *CreateForPythonProcedureRequest {
	s.ProcedureDefinition = &procedureDefinition
	return s
}

func NewCreateForScalaProcedureRequest(
	name SchemaObjectIdentifier,
	returns ProcedureReturnsRequest,
	runtimeVersion string,
	packages []ProcedurePackageRequest,
	handler string,
) *CreateForScalaProcedureRequest {
	s := CreateForScalaProcedureRequest{}
	s.name = name
	s.Returns = returns
	s.RuntimeVersion = runtimeVersion
	s.Packages = packages
	s.Handler = handler
	return &s
}

func (s *CreateForScalaProcedureRequest) WithOrReplace(orReplace bool) *CreateForScalaProcedureRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateForScalaProcedureRequest) WithSecure(secure bool) *CreateForScalaProcedureRequest {
	s.Secure = &secure
	return s
}

func (s *CreateForScalaProcedureRequest) WithArguments(arguments []ProcedureArgumentRequest) *CreateForScalaProcedureRequest {
	s.Arguments = arguments
	return s
}

func (s *CreateForScalaProcedureRequest) WithCopyGrants(copyGrants bool) *CreateForScalaProcedureRequest {
	s.CopyGrants = &copyGrants
	return s
}

func (s *CreateForScalaProcedureRequest) WithNullInputBehavior(nullInputBehavior NullInputBehavior) *CreateForScalaProcedureRequest {
	s.NullInputBehavior = &nullInputBehavior
	return s
}

func (s *CreateForScalaProcedureRequest) WithReturnResultsBehavior(returnResultsBehavior ReturnResultsBehavior) *CreateForScalaProcedureRequest {
	s.ReturnResultsBehavior = &returnResultsBehavior
	return s
}

func (s *CreateForScalaProcedureRequest) WithImports(imports []ProcedureImportRequest) *CreateForScalaProcedureRequest {
	s.Imports = imports
	return s
}

func (s *CreateForScalaProcedureRequest) WithExternalAccessIntegrations(externalAccessIntegrations []AccountObjectIdentifier) *CreateForScalaProcedureRequest {
	s.ExternalAccessIntegrations = externalAccessIntegrations
	return s
}

func (s *CreateForScalaProcedureRequest) WithSecrets(secrets []SecretReference) *CreateForScalaProcedureRequest {
	s.Secrets = secrets
	return s
}

func (s *CreateForScalaProcedureRequest) WithTargetPath(targetPath string) *CreateForScalaProcedureRequest {
	s.TargetPath = &targetPath
	return s
}

func (s *CreateForScalaProcedureRequest) WithComment(comment string) *CreateForScalaProcedureRequest {
	s.Comment = &comment
	return s
}

func (s *CreateForScalaProcedureRequest) WithExecuteAs(executeAs ExecuteAs) *CreateForScalaProcedureRequest {
	s.ExecuteAs = &executeAs
	return s
}

func (s *CreateForScalaProcedureRequest) WithProcedureDefinition(procedureDefinition string) *CreateForScalaProcedureRequest {
	s.ProcedureDefinition = &procedureDefinition
	return s
}

func NewCreateForSQLProcedureRequest(
	name SchemaObjectIdentifier,
	returns ProcedureSQLReturnsRequest,
	procedureDefinition string,
) *CreateForSQLProcedureRequest {
	s := CreateForSQLProcedureRequest{}
	s.name = name
	s.Returns = returns
	s.ProcedureDefinition = procedureDefinition
	return &s
}

func (s *CreateForSQLProcedureRequest) WithOrReplace(orReplace bool) *CreateForSQLProcedureRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateForSQLProcedureRequest) WithSecure(secure bool) *CreateForSQLProcedureRequest {
	s.Secure = &secure
	return s
}

func (s *CreateForSQLProcedureRequest) WithArguments(arguments []ProcedureArgumentRequest) *CreateForSQLProcedureRequest {
	s.Arguments = arguments
	return s
}

func (s *CreateForSQLProcedureRequest) WithCopyGrants(copyGrants bool) *CreateForSQLProcedureRequest {
	s.CopyGrants = &copyGrants
	return s
}

func (s *CreateForSQLProcedureRequest) WithNullInputBehavior(nullInputBehavior NullInputBehavior) *CreateForSQLProcedureRequest {
	s.NullInputBehavior = &nullInputBehavior
	return s
}

func (s *CreateForSQLProcedureRequest) WithReturnResultsBehavior(returnResultsBehavior ReturnResultsBehavior) *CreateForSQLProcedureRequest {
	s.ReturnResultsBehavior = &returnResultsBehavior
	return s
}

func (s *CreateForSQLProcedureRequest) WithComment(comment string) *CreateForSQLProcedureRequest {
	s.Comment = &comment
	return s
}

func (s *CreateForSQLProcedureRequest) WithExecuteAs(executeAs ExecuteAs) *CreateForSQLProcedureRequest {
	s.ExecuteAs = &executeAs
	return s
}

func NewProcedureSQLReturnsRequest() *ProcedureSQLReturnsRequest {
	s := ProcedureSQLReturnsRequest{}
	return &s
}

func (s *ProcedureSQLReturnsRequest) WithResultDataType(resultDataType ProcedureReturnsResultDataTypeRequest) *ProcedureSQLReturnsRequest {
	s.ResultDataType = &resultDataType
	return s
}

func (s *ProcedureSQLReturnsRequest) WithTable(table ProcedureReturnsTableRequest) *ProcedureSQLReturnsRequest {
	s.Table = &table
	return s
}

func (s *ProcedureSQLReturnsRequest) WithNotNull(notNull bool) *ProcedureSQLReturnsRequest {
	s.NotNull = &notNull
	return s
}

func NewAlterProcedureRequest(
	name SchemaObjectIdentifierWithArguments,
) *AlterProcedureRequest {
	s := AlterProcedureRequest{}
	s.name = name
	return &s
}

func (s *AlterProcedureRequest) WithIfExists(ifExists bool) *AlterProcedureRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterProcedureRequest) WithRenameTo(renameTo SchemaObjectIdentifier) *AlterProcedureRequest {
	s.RenameTo = &renameTo
	return s
}

func (s *AlterProcedureRequest) WithSet(set ProcedureSetRequest) *AlterProcedureRequest {
	s.Set = &set
	return s
}

func (s *AlterProcedureRequest) WithUnset(unset ProcedureUnsetRequest) *AlterProcedureRequest {
	s.Unset = &unset
	return s
}

func (s *AlterProcedureRequest) WithSetTags(setTags []TagAssociation) *AlterProcedureRequest {
	s.SetTags = setTags
	return s
}

func (s *AlterProcedureRequest) WithUnsetTags(unsetTags []ObjectIdentifier) *AlterProcedureRequest {
	s.UnsetTags = unsetTags
	return s
}

func (s *AlterProcedureRequest) WithExecuteAs(executeAs ExecuteAs) *AlterProcedureRequest {
	s.ExecuteAs = &executeAs
	return s
}

func NewProcedureSetRequest() *ProcedureSetRequest {
	s := ProcedureSetRequest{}
	return &s
}

func (s *ProcedureSetRequest) WithComment(comment string) *ProcedureSetRequest {
	s.Comment = &comment
	return s
}

func (s *ProcedureSetRequest) WithExternalAccessIntegrations(externalAccessIntegrations []AccountObjectIdentifier) *ProcedureSetRequest {
	s.ExternalAccessIntegrations = externalAccessIntegrations
	return s
}

func (s *ProcedureSetRequest) WithSecretsList(secretsList SecretsListRequest) *ProcedureSetRequest {
	s.SecretsList = &secretsList
	return s
}

func (s *ProcedureSetRequest) WithAutoEventLogging(autoEventLogging AutoEventLogging) *ProcedureSetRequest {
	s.AutoEventLogging = &autoEventLogging
	return s
}

func (s *ProcedureSetRequest) WithEnableConsoleOutput(enableConsoleOutput bool) *ProcedureSetRequest {
	s.EnableConsoleOutput = &enableConsoleOutput
	return s
}

func (s *ProcedureSetRequest) WithLogLevel(logLevel LogLevel) *ProcedureSetRequest {
	s.LogLevel = &logLevel
	return s
}

func (s *ProcedureSetRequest) WithMetricLevel(metricLevel MetricLevel) *ProcedureSetRequest {
	s.MetricLevel = &metricLevel
	return s
}

func (s *ProcedureSetRequest) WithTraceLevel(traceLevel TraceLevel) *ProcedureSetRequest {
	s.TraceLevel = &traceLevel
	return s
}

// NewSecretsListRequest removed manually - redeclared in functions

func NewProcedureUnsetRequest() *ProcedureUnsetRequest {
	s := ProcedureUnsetRequest{}
	return &s
}

func (s *ProcedureUnsetRequest) WithComment(comment bool) *ProcedureUnsetRequest {
	s.Comment = &comment
	return s
}

func (s *ProcedureUnsetRequest) WithExternalAccessIntegrations(externalAccessIntegrations bool) *ProcedureUnsetRequest {
	s.ExternalAccessIntegrations = &externalAccessIntegrations
	return s
}

func (s *ProcedureUnsetRequest) WithAutoEventLogging(autoEventLogging bool) *ProcedureUnsetRequest {
	s.AutoEventLogging = &autoEventLogging
	return s
}

func (s *ProcedureUnsetRequest) WithEnableConsoleOutput(enableConsoleOutput bool) *ProcedureUnsetRequest {
	s.EnableConsoleOutput = &enableConsoleOutput
	return s
}

func (s *ProcedureUnsetRequest) WithLogLevel(logLevel bool) *ProcedureUnsetRequest {
	s.LogLevel = &logLevel
	return s
}

func (s *ProcedureUnsetRequest) WithMetricLevel(metricLevel bool) *ProcedureUnsetRequest {
	s.MetricLevel = &metricLevel
	return s
}

func (s *ProcedureUnsetRequest) WithTraceLevel(traceLevel bool) *ProcedureUnsetRequest {
	s.TraceLevel = &traceLevel
	return s
}

func NewDropProcedureRequest(
	name SchemaObjectIdentifierWithArguments,
) *DropProcedureRequest {
	s := DropProcedureRequest{}
	s.name = name
	return &s
}

func (s *DropProcedureRequest) WithIfExists(ifExists bool) *DropProcedureRequest {
	s.IfExists = &ifExists
	return s
}

func NewShowProcedureRequest() *ShowProcedureRequest {
	s := ShowProcedureRequest{}
	return &s
}

func (s *ShowProcedureRequest) WithLike(like Like) *ShowProcedureRequest {
	s.Like = &like
	return s
}

func (s *ShowProcedureRequest) WithIn(in ExtendedIn) *ShowProcedureRequest {
	s.In = &in
	return s
}

func NewDescribeProcedureRequest(
	name SchemaObjectIdentifierWithArguments,
) *DescribeProcedureRequest {
	s := DescribeProcedureRequest{}
	s.name = name
	return &s
}

func NewCallProcedureRequest(
	name SchemaObjectIdentifier,
) *CallProcedureRequest {
	s := CallProcedureRequest{}
	s.name = name
	return &s
}

func (s *CallProcedureRequest) WithCallArguments(callArguments []string) *CallProcedureRequest {
	s.CallArguments = callArguments
	return s
}

func (s *CallProcedureRequest) WithScriptingVariable(scriptingVariable string) *CallProcedureRequest {
	s.ScriptingVariable = &scriptingVariable
	return s
}

func NewCreateAndCallForJavaProcedureRequest(
	name AccountObjectIdentifier,
	returns ProcedureReturnsRequest,
	runtimeVersion string,
	packages []ProcedurePackageRequest,
	handler string,
	procedureName AccountObjectIdentifier,
) *CreateAndCallForJavaProcedureRequest {
	s := CreateAndCallForJavaProcedureRequest{}
	s.Name = name
	s.Returns = returns
	s.RuntimeVersion = runtimeVersion
	s.Packages = packages
	s.Handler = handler
	s.ProcedureName = procedureName
	return &s
}

func (s *CreateAndCallForJavaProcedureRequest) WithArguments(arguments []ProcedureArgumentRequest) *CreateAndCallForJavaProcedureRequest {
	s.Arguments = arguments
	return s
}

func (s *CreateAndCallForJavaProcedureRequest) WithNullInputBehavior(nullInputBehavior NullInputBehavior) *CreateAndCallForJavaProcedureRequest {
	s.NullInputBehavior = &nullInputBehavior
	return s
}

func (s *CreateAndCallForJavaProcedureRequest) WithImports(imports []ProcedureImportRequest) *CreateAndCallForJavaProcedureRequest {
	s.Imports = imports
	return s
}

func (s *CreateAndCallForJavaProcedureRequest) WithProcedureDefinition(procedureDefinition string) *CreateAndCallForJavaProcedureRequest {
	s.ProcedureDefinition = &procedureDefinition
	return s
}

func (s *CreateAndCallForJavaProcedureRequest) WithWithClause(withClause ProcedureWithClauseRequest) *CreateAndCallForJavaProcedureRequest {
	s.WithClause = &withClause
	return s
}

func (s *CreateAndCallForJavaProcedureRequest) WithCallArguments(callArguments []string) *CreateAndCallForJavaProcedureRequest {
	s.CallArguments = callArguments
	return s
}

func (s *CreateAndCallForJavaProcedureRequest) WithScriptingVariable(scriptingVariable string) *CreateAndCallForJavaProcedureRequest {
	s.ScriptingVariable = &scriptingVariable
	return s
}

func NewProcedureWithClauseRequest(
	cteName AccountObjectIdentifier,
	statement string,
) *ProcedureWithClauseRequest {
	s := ProcedureWithClauseRequest{}
	s.CteName = cteName
	s.Statement = statement
	return &s
}

func (s *ProcedureWithClauseRequest) WithCteColumns(cteColumns []string) *ProcedureWithClauseRequest {
	s.CteColumns = cteColumns
	return s
}

func NewCreateAndCallForScalaProcedureRequest(
	name AccountObjectIdentifier,
	returns ProcedureReturnsRequest,
	runtimeVersion string,
	packages []ProcedurePackageRequest,
	handler string,
	procedureName AccountObjectIdentifier,
) *CreateAndCallForScalaProcedureRequest {
	s := CreateAndCallForScalaProcedureRequest{}
	s.Name = name
	s.Returns = returns
	s.RuntimeVersion = runtimeVersion
	s.Packages = packages
	s.Handler = handler
	s.ProcedureName = procedureName
	return &s
}

func (s *CreateAndCallForScalaProcedureRequest) WithArguments(arguments []ProcedureArgumentRequest) *CreateAndCallForScalaProcedureRequest {
	s.Arguments = arguments
	return s
}

func (s *CreateAndCallForScalaProcedureRequest) WithNullInputBehavior(nullInputBehavior NullInputBehavior) *CreateAndCallForScalaProcedureRequest {
	s.NullInputBehavior = &nullInputBehavior
	return s
}

func (s *CreateAndCallForScalaProcedureRequest) WithImports(imports []ProcedureImportRequest) *CreateAndCallForScalaProcedureRequest {
	s.Imports = imports
	return s
}

func (s *CreateAndCallForScalaProcedureRequest) WithProcedureDefinition(procedureDefinition string) *CreateAndCallForScalaProcedureRequest {
	s.ProcedureDefinition = &procedureDefinition
	return s
}

func (s *CreateAndCallForScalaProcedureRequest) WithWithClauses(withClauses []ProcedureWithClauseRequest) *CreateAndCallForScalaProcedureRequest {
	s.WithClauses = withClauses
	return s
}

func (s *CreateAndCallForScalaProcedureRequest) WithCallArguments(callArguments []string) *CreateAndCallForScalaProcedureRequest {
	s.CallArguments = callArguments
	return s
}

func (s *CreateAndCallForScalaProcedureRequest) WithScriptingVariable(scriptingVariable string) *CreateAndCallForScalaProcedureRequest {
	s.ScriptingVariable = &scriptingVariable
	return s
}

func NewCreateAndCallForJavaScriptProcedureRequest(
	name AccountObjectIdentifier,
	resultDataType datatypes.DataType,
	procedureDefinition string,
	procedureName AccountObjectIdentifier,
) *CreateAndCallForJavaScriptProcedureRequest {
	s := CreateAndCallForJavaScriptProcedureRequest{}
	s.Name = name
	s.ResultDataType = resultDataType
	s.ProcedureDefinition = procedureDefinition
	s.ProcedureName = procedureName
	return &s
}

func (s *CreateAndCallForJavaScriptProcedureRequest) WithArguments(arguments []ProcedureArgumentRequest) *CreateAndCallForJavaScriptProcedureRequest {
	s.Arguments = arguments
	return s
}

func (s *CreateAndCallForJavaScriptProcedureRequest) WithResultDataTypeOld(resultDataTypeOld DataType) *CreateAndCallForJavaScriptProcedureRequest {
	s.ResultDataTypeOld = resultDataTypeOld
	return s
}

func (s *CreateAndCallForJavaScriptProcedureRequest) WithNotNull(notNull bool) *CreateAndCallForJavaScriptProcedureRequest {
	s.NotNull = &notNull
	return s
}

func (s *CreateAndCallForJavaScriptProcedureRequest) WithNullInputBehavior(nullInputBehavior NullInputBehavior) *CreateAndCallForJavaScriptProcedureRequest {
	s.NullInputBehavior = &nullInputBehavior
	return s
}

func (s *CreateAndCallForJavaScriptProcedureRequest) WithWithClauses(withClauses []ProcedureWithClauseRequest) *CreateAndCallForJavaScriptProcedureRequest {
	s.WithClauses = withClauses
	return s
}

func (s *CreateAndCallForJavaScriptProcedureRequest) WithCallArguments(callArguments []string) *CreateAndCallForJavaScriptProcedureRequest {
	s.CallArguments = callArguments
	return s
}

func (s *CreateAndCallForJavaScriptProcedureRequest) WithScriptingVariable(scriptingVariable string) *CreateAndCallForJavaScriptProcedureRequest {
	s.ScriptingVariable = &scriptingVariable
	return s
}

func NewCreateAndCallForPythonProcedureRequest(
	name AccountObjectIdentifier,
	returns ProcedureReturnsRequest,
	runtimeVersion string,
	packages []ProcedurePackageRequest,
	handler string,
	procedureName AccountObjectIdentifier,
) *CreateAndCallForPythonProcedureRequest {
	s := CreateAndCallForPythonProcedureRequest{}
	s.Name = name
	s.Returns = returns
	s.RuntimeVersion = runtimeVersion
	s.Packages = packages
	s.Handler = handler
	s.ProcedureName = procedureName
	return &s
}

func (s *CreateAndCallForPythonProcedureRequest) WithArguments(arguments []ProcedureArgumentRequest) *CreateAndCallForPythonProcedureRequest {
	s.Arguments = arguments
	return s
}

func (s *CreateAndCallForPythonProcedureRequest) WithNullInputBehavior(nullInputBehavior NullInputBehavior) *CreateAndCallForPythonProcedureRequest {
	s.NullInputBehavior = &nullInputBehavior
	return s
}

func (s *CreateAndCallForPythonProcedureRequest) WithImports(imports []ProcedureImportRequest) *CreateAndCallForPythonProcedureRequest {
	s.Imports = imports
	return s
}

func (s *CreateAndCallForPythonProcedureRequest) WithProcedureDefinition(procedureDefinition string) *CreateAndCallForPythonProcedureRequest {
	s.ProcedureDefinition = &procedureDefinition
	return s
}

func (s *CreateAndCallForPythonProcedureRequest) WithWithClauses(withClauses []ProcedureWithClauseRequest) *CreateAndCallForPythonProcedureRequest {
	s.WithClauses = withClauses
	return s
}

func (s *CreateAndCallForPythonProcedureRequest) WithCallArguments(callArguments []string) *CreateAndCallForPythonProcedureRequest {
	s.CallArguments = callArguments
	return s
}

func (s *CreateAndCallForPythonProcedureRequest) WithScriptingVariable(scriptingVariable string) *CreateAndCallForPythonProcedureRequest {
	s.ScriptingVariable = &scriptingVariable
	return s
}

func NewCreateAndCallForSQLProcedureRequest(
	name AccountObjectIdentifier,
	returns ProcedureReturnsRequest,
	procedureDefinition string,
	procedureName AccountObjectIdentifier,
) *CreateAndCallForSQLProcedureRequest {
	s := CreateAndCallForSQLProcedureRequest{}
	s.Name = name
	s.Returns = returns
	s.ProcedureDefinition = procedureDefinition
	s.ProcedureName = procedureName
	return &s
}

func (s *CreateAndCallForSQLProcedureRequest) WithArguments(arguments []ProcedureArgumentRequest) *CreateAndCallForSQLProcedureRequest {
	s.Arguments = arguments
	return s
}

func (s *CreateAndCallForSQLProcedureRequest) WithNullInputBehavior(nullInputBehavior NullInputBehavior) *CreateAndCallForSQLProcedureRequest {
	s.NullInputBehavior = &nullInputBehavior
	return s
}

func (s *CreateAndCallForSQLProcedureRequest) WithWithClauses(withClauses []ProcedureWithClauseRequest) *CreateAndCallForSQLProcedureRequest {
	s.WithClauses = withClauses
	return s
}

func (s *CreateAndCallForSQLProcedureRequest) WithCallArguments(callArguments []string) *CreateAndCallForSQLProcedureRequest {
	s.CallArguments = callArguments
	return s
}

func (s *CreateAndCallForSQLProcedureRequest) WithScriptingVariable(scriptingVariable string) *CreateAndCallForSQLProcedureRequest {
	s.ScriptingVariable = &scriptingVariable
	return s
}
