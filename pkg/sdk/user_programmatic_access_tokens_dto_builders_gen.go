// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewAddUserProgrammaticAccessTokenRequest(
	UserName AccountObjectIdentifier,
	name AccountObjectIdentifier,
) *AddUserProgrammaticAccessTokenRequest {
	s := AddUserProgrammaticAccessTokenRequest{}
	s.UserName = UserName
	s.name = name
	return &s
}

func (s *AddUserProgrammaticAccessTokenRequest) WithIfExists(IfExists bool) *AddUserProgrammaticAccessTokenRequest {
	s.IfExists = &IfExists
	return s
}

func (s *AddUserProgrammaticAccessTokenRequest) WithRoleRestriction(RoleRestriction AccountObjectIdentifier) *AddUserProgrammaticAccessTokenRequest {
	s.RoleRestriction = &RoleRestriction
	return s
}

func (s *AddUserProgrammaticAccessTokenRequest) WithDaysToExpiry(DaysToExpiry int) *AddUserProgrammaticAccessTokenRequest {
	s.DaysToExpiry = &DaysToExpiry
	return s
}

func (s *AddUserProgrammaticAccessTokenRequest) WithMinsToBypassNetworkPolicyRequirement(MinsToBypassNetworkPolicyRequirement int) *AddUserProgrammaticAccessTokenRequest {
	s.MinsToBypassNetworkPolicyRequirement = &MinsToBypassNetworkPolicyRequirement
	return s
}

func (s *AddUserProgrammaticAccessTokenRequest) WithComment(Comment string) *AddUserProgrammaticAccessTokenRequest {
	s.Comment = &Comment
	return s
}

func NewModifyUserProgrammaticAccessTokenRequest(
	UserName AccountObjectIdentifier,
	name AccountObjectIdentifier,
) *ModifyUserProgrammaticAccessTokenRequest {
	s := ModifyUserProgrammaticAccessTokenRequest{}
	s.UserName = UserName
	s.name = name
	return &s
}

func (s *ModifyUserProgrammaticAccessTokenRequest) WithIfExists(IfExists bool) *ModifyUserProgrammaticAccessTokenRequest {
	s.IfExists = &IfExists
	return s
}

func (s *ModifyUserProgrammaticAccessTokenRequest) WithSet(Set ModifyProgrammaticAccessTokenSetRequest) *ModifyUserProgrammaticAccessTokenRequest {
	s.Set = &Set
	return s
}

func (s *ModifyUserProgrammaticAccessTokenRequest) WithUnset(Unset ModifyProgrammaticAccessTokenUnsetRequest) *ModifyUserProgrammaticAccessTokenRequest {
	s.Unset = &Unset
	return s
}

func (s *ModifyUserProgrammaticAccessTokenRequest) WithRenameTo(RenameTo AccountObjectIdentifier) *ModifyUserProgrammaticAccessTokenRequest {
	s.RenameTo = &RenameTo
	return s
}

func NewModifyProgrammaticAccessTokenSetRequest() *ModifyProgrammaticAccessTokenSetRequest {
	return &ModifyProgrammaticAccessTokenSetRequest{}
}

func (s *ModifyProgrammaticAccessTokenSetRequest) WithDisabled(Disabled bool) *ModifyProgrammaticAccessTokenSetRequest {
	s.Disabled = &Disabled
	return s
}

func (s *ModifyProgrammaticAccessTokenSetRequest) WithMinsToBypassNetworkPolicyRequirement(MinsToBypassNetworkPolicyRequirement int) *ModifyProgrammaticAccessTokenSetRequest {
	s.MinsToBypassNetworkPolicyRequirement = &MinsToBypassNetworkPolicyRequirement
	return s
}

func (s *ModifyProgrammaticAccessTokenSetRequest) WithComment(Comment string) *ModifyProgrammaticAccessTokenSetRequest {
	s.Comment = &Comment
	return s
}

func NewModifyProgrammaticAccessTokenUnsetRequest() *ModifyProgrammaticAccessTokenUnsetRequest {
	return &ModifyProgrammaticAccessTokenUnsetRequest{}
}

func (s *ModifyProgrammaticAccessTokenUnsetRequest) WithDisabled(Disabled bool) *ModifyProgrammaticAccessTokenUnsetRequest {
	s.Disabled = &Disabled
	return s
}

func (s *ModifyProgrammaticAccessTokenUnsetRequest) WithMinsToBypassNetworkPolicyRequirement(MinsToBypassNetworkPolicyRequirement bool) *ModifyProgrammaticAccessTokenUnsetRequest {
	s.MinsToBypassNetworkPolicyRequirement = &MinsToBypassNetworkPolicyRequirement
	return s
}

func (s *ModifyProgrammaticAccessTokenUnsetRequest) WithComment(Comment bool) *ModifyProgrammaticAccessTokenUnsetRequest {
	s.Comment = &Comment
	return s
}

func NewRotateUserProgrammaticAccessTokenRequest(
	UserName AccountObjectIdentifier,
	name AccountObjectIdentifier,
) *RotateUserProgrammaticAccessTokenRequest {
	s := RotateUserProgrammaticAccessTokenRequest{}
	s.UserName = UserName
	s.name = name
	return &s
}

func (s *RotateUserProgrammaticAccessTokenRequest) WithIfExists(IfExists bool) *RotateUserProgrammaticAccessTokenRequest {
	s.IfExists = &IfExists
	return s
}

func (s *RotateUserProgrammaticAccessTokenRequest) WithExpireRotatedTokenAfterHours(ExpireRotatedTokenAfterHours int) *RotateUserProgrammaticAccessTokenRequest {
	s.ExpireRotatedTokenAfterHours = &ExpireRotatedTokenAfterHours
	return s
}

func NewRemoveUserProgrammaticAccessTokenRequest(
	UserName AccountObjectIdentifier,
	name AccountObjectIdentifier,
) *RemoveUserProgrammaticAccessTokenRequest {
	s := RemoveUserProgrammaticAccessTokenRequest{}
	s.UserName = UserName
	s.name = name
	return &s
}

func (s *RemoveUserProgrammaticAccessTokenRequest) WithIfExists(IfExists bool) *RemoveUserProgrammaticAccessTokenRequest {
	s.IfExists = &IfExists
	return s
}

func NewShowUserProgrammaticAccessTokenRequest() *ShowUserProgrammaticAccessTokenRequest {
	return &ShowUserProgrammaticAccessTokenRequest{}
}

func (s *ShowUserProgrammaticAccessTokenRequest) WithUserName(UserName AccountObjectIdentifier) *ShowUserProgrammaticAccessTokenRequest {
	s.UserName = &UserName
	return s
}
