// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateGitRepositoryRequest(
	name SchemaObjectIdentifier,
	Origin string,
	ApiIntegration AccountObjectIdentifier,
) *CreateGitRepositoryRequest {
	s := CreateGitRepositoryRequest{}
	s.name = name
	s.Origin = Origin
	s.ApiIntegration = ApiIntegration
	return &s
}

func (s *CreateGitRepositoryRequest) WithOrReplace(OrReplace bool) *CreateGitRepositoryRequest {
	s.OrReplace = &OrReplace
	return s
}

func (s *CreateGitRepositoryRequest) WithIfNotExists(IfNotExists bool) *CreateGitRepositoryRequest {
	s.IfNotExists = &IfNotExists
	return s
}

func (s *CreateGitRepositoryRequest) WithGitCredentials(GitCredentials AccountObjectIdentifier) *CreateGitRepositoryRequest {
	s.GitCredentials = &GitCredentials
	return s
}

func (s *CreateGitRepositoryRequest) WithComment(Comment string) *CreateGitRepositoryRequest {
	s.Comment = &Comment
	return s
}

func (s *CreateGitRepositoryRequest) WithTag(Tag []TagAssociation) *CreateGitRepositoryRequest {
	s.Tag = Tag
	return s
}

func NewAlterGitRepositoryRequest(
	name SchemaObjectIdentifier,
) *AlterGitRepositoryRequest {
	s := AlterGitRepositoryRequest{}
	s.name = name
	return &s
}

func (s *AlterGitRepositoryRequest) WithIfExists(IfExists bool) *AlterGitRepositoryRequest {
	s.IfExists = &IfExists
	return s
}

func (s *AlterGitRepositoryRequest) WithSet(Set GitRepositorySetRequest) *AlterGitRepositoryRequest {
	s.Set = &Set
	return s
}

func (s *AlterGitRepositoryRequest) WithUnset(Unset GitRepositoryUnsetRequest) *AlterGitRepositoryRequest {
	s.Unset = &Unset
	return s
}

func (s *AlterGitRepositoryRequest) WithSetTags(SetTags []TagAssociation) *AlterGitRepositoryRequest {
	s.SetTags = SetTags
	return s
}

func (s *AlterGitRepositoryRequest) WithUnsetTags(UnsetTags []ObjectIdentifier) *AlterGitRepositoryRequest {
	s.UnsetTags = UnsetTags
	return s
}

func NewGitRepositorySetRequest(
	ApiIntegration *AccountObjectIdentifier,
) *GitRepositorySetRequest {
	s := GitRepositorySetRequest{}
	s.ApiIntegration = ApiIntegration
	return &s
}

func (s *GitRepositorySetRequest) WithGitCredentials(GitCredentials AccountObjectIdentifier) *GitRepositorySetRequest {
	s.GitCredentials = &GitCredentials
	return s
}

func (s *GitRepositorySetRequest) WithComment(Comment string) *GitRepositorySetRequest {
	s.Comment = &Comment
	return s
}

func NewGitRepositoryUnsetRequest() *GitRepositoryUnsetRequest {
	return &GitRepositoryUnsetRequest{}
}

func (s *GitRepositoryUnsetRequest) WithGitCredentials(GitCredentials bool) *GitRepositoryUnsetRequest {
	s.GitCredentials = &GitCredentials
	return s
}

func (s *GitRepositoryUnsetRequest) WithComment(Comment bool) *GitRepositoryUnsetRequest {
	s.Comment = &Comment
	return s
}

func NewDropGitRepositoryRequest(
	name SchemaObjectIdentifier,
) *DropGitRepositoryRequest {
	s := DropGitRepositoryRequest{}
	s.name = name
	return &s
}

func (s *DropGitRepositoryRequest) WithIfExists(IfExists bool) *DropGitRepositoryRequest {
	s.IfExists = &IfExists
	return s
}

func NewDescribeGitRepositoryRequest(
	name SchemaObjectIdentifier,
) *DescribeGitRepositoryRequest {
	s := DescribeGitRepositoryRequest{}
	s.name = name
	return &s
}

func NewShowGitRepositoryRequest() *ShowGitRepositoryRequest {
	return &ShowGitRepositoryRequest{}
}

func (s *ShowGitRepositoryRequest) WithLike(Like Like) *ShowGitRepositoryRequest {
	s.Like = &Like
	return s
}

func (s *ShowGitRepositoryRequest) WithIn(In In) *ShowGitRepositoryRequest {
	s.In = &In
	return s
}
