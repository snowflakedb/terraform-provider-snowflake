// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

// imports adjusted manually
import (
	"fmt"
)

func NewCreateInternalStageRequest(
	name SchemaObjectIdentifier,
) *CreateInternalStageRequest {
	s := CreateInternalStageRequest{}
	s.name = name
	return &s
}

func (s *CreateInternalStageRequest) WithOrReplace(orReplace bool) *CreateInternalStageRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateInternalStageRequest) WithTemporary(temporary bool) *CreateInternalStageRequest {
	s.Temporary = &temporary
	return s
}

func (s *CreateInternalStageRequest) WithIfNotExists(ifNotExists bool) *CreateInternalStageRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateInternalStageRequest) WithEncryption(encryption InternalStageEncryptionRequest) *CreateInternalStageRequest {
	s.Encryption = &encryption
	return s
}

func (s *CreateInternalStageRequest) WithDirectoryTableOptions(directoryTableOptions InternalDirectoryTableOptionsRequest) *CreateInternalStageRequest {
	s.DirectoryTableOptions = &directoryTableOptions
	return s
}

func (s *CreateInternalStageRequest) WithFileFormat(fileFormat StageFileFormatRequest) *CreateInternalStageRequest {
	s.FileFormat = &fileFormat
	return s
}

func (s *CreateInternalStageRequest) WithCopyOptions(copyOptions StageCopyOptionsRequest) *CreateInternalStageRequest {
	s.CopyOptions = &copyOptions
	return s
}

func (s *CreateInternalStageRequest) WithComment(comment string) *CreateInternalStageRequest {
	s.Comment = &comment
	return s
}

func (s *CreateInternalStageRequest) WithTag(tag []TagAssociation) *CreateInternalStageRequest {
	s.Tag = tag
	return s
}

func NewInternalStageEncryptionRequest(
	encryptionType *InternalStageEncryptionOption,
) *InternalStageEncryptionRequest {
	s := InternalStageEncryptionRequest{}
	s.EncryptionType = encryptionType
	return &s
}

func NewInternalDirectoryTableOptionsRequest() *InternalDirectoryTableOptionsRequest {
	s := InternalDirectoryTableOptionsRequest{}
	return &s
}

func (s *InternalDirectoryTableOptionsRequest) WithEnable(enable bool) *InternalDirectoryTableOptionsRequest {
	s.Enable = &enable
	return s
}

func (s *InternalDirectoryTableOptionsRequest) WithRefreshOnCreate(refreshOnCreate bool) *InternalDirectoryTableOptionsRequest {
	s.RefreshOnCreate = &refreshOnCreate
	return s
}

func NewStageFileFormatRequest() *StageFileFormatRequest {
	s := StageFileFormatRequest{}
	return &s
}

func (s *StageFileFormatRequest) WithFormatName(formatName string) *StageFileFormatRequest {
	s.FormatName = &formatName
	return s
}

func (s *StageFileFormatRequest) WithFileFormatType(fileFormatType FileFormatType) *StageFileFormatRequest {
	s.FileFormatType = &fileFormatType
	return s
}

// adjusted manually
func (s *StageFileFormatRequest) WithOptions(options FileFormatTypeOptionsRequest) *StageFileFormatRequest {
	s.Options = &options
	return s
}

func NewStageCopyOptionsRequest() *StageCopyOptionsRequest {
	s := StageCopyOptionsRequest{}
	return &s
}

func (s *StageCopyOptionsRequest) WithOnError(onError StageCopyOnErrorOptionsRequest) *StageCopyOptionsRequest {
	s.OnError = &onError
	return s
}

func (s *StageCopyOptionsRequest) WithSizeLimit(sizeLimit int) *StageCopyOptionsRequest {
	s.SizeLimit = &sizeLimit
	return s
}

func (s *StageCopyOptionsRequest) WithPurge(purge bool) *StageCopyOptionsRequest {
	s.Purge = &purge
	return s
}

func (s *StageCopyOptionsRequest) WithReturnFailedOnly(returnFailedOnly bool) *StageCopyOptionsRequest {
	s.ReturnFailedOnly = &returnFailedOnly
	return s
}

func (s *StageCopyOptionsRequest) WithMatchByColumnName(matchByColumnName StageCopyColumnMapOption) *StageCopyOptionsRequest {
	s.MatchByColumnName = &matchByColumnName
	return s
}

func (s *StageCopyOptionsRequest) WithEnforceLength(enforceLength bool) *StageCopyOptionsRequest {
	s.EnforceLength = &enforceLength
	return s
}

func (s *StageCopyOptionsRequest) WithTruncatecolumns(truncatecolumns bool) *StageCopyOptionsRequest {
	s.Truncatecolumns = &truncatecolumns
	return s
}

func (s *StageCopyOptionsRequest) WithForce(force bool) *StageCopyOptionsRequest {
	s.Force = &force
	return s
}

func NewStageCopyOnErrorOptionsRequest() *StageCopyOnErrorOptionsRequest {
	s := StageCopyOnErrorOptionsRequest{}
	return &s
}

func (s *StageCopyOnErrorOptionsRequest) WithContinue_(continue_ bool) *StageCopyOnErrorOptionsRequest {
	s.Continue_ = &continue_
	return s
}

// WithSkipFile removed manually

// added manually
func (s *StageCopyOnErrorOptionsRequest) WithSkipFile() *StageCopyOnErrorOptionsRequest {
	s.SkipFile = String("SKIP_FILE")
	return s
}

// added manually
func (s *StageCopyOnErrorOptionsRequest) WithSkipFileX(x int) *StageCopyOnErrorOptionsRequest {
	s.SkipFile = String(fmt.Sprintf("SKIP_FILE_%d", x))
	return s
}

// added manually
func (s *StageCopyOnErrorOptionsRequest) WithSkipFileXPercent(x int) *StageCopyOnErrorOptionsRequest {
	s.SkipFile = String(fmt.Sprintf("'SKIP_FILE_%d%%'", x))
	return s
}

func (s *StageCopyOnErrorOptionsRequest) WithAbortStatement(abortStatement bool) *StageCopyOnErrorOptionsRequest {
	s.AbortStatement = &abortStatement
	return s
}

func NewCreateOnS3StageRequest(
	name SchemaObjectIdentifier,
) *CreateOnS3StageRequest {
	s := CreateOnS3StageRequest{}
	s.name = name
	return &s
}

func (s *CreateOnS3StageRequest) WithOrReplace(orReplace bool) *CreateOnS3StageRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateOnS3StageRequest) WithTemporary(temporary bool) *CreateOnS3StageRequest {
	s.Temporary = &temporary
	return s
}

func (s *CreateOnS3StageRequest) WithIfNotExists(ifNotExists bool) *CreateOnS3StageRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateOnS3StageRequest) WithExternalStageParams(externalStageParams ExternalS3StageParamsRequest) *CreateOnS3StageRequest {
	s.ExternalStageParams = &externalStageParams
	return s
}

func (s *CreateOnS3StageRequest) WithDirectoryTableOptions(directoryTableOptions ExternalS3DirectoryTableOptionsRequest) *CreateOnS3StageRequest {
	s.DirectoryTableOptions = &directoryTableOptions
	return s
}

func (s *CreateOnS3StageRequest) WithFileFormat(fileFormat StageFileFormatRequest) *CreateOnS3StageRequest {
	s.FileFormat = &fileFormat
	return s
}

func (s *CreateOnS3StageRequest) WithCopyOptions(copyOptions StageCopyOptionsRequest) *CreateOnS3StageRequest {
	s.CopyOptions = &copyOptions
	return s
}

func (s *CreateOnS3StageRequest) WithComment(comment string) *CreateOnS3StageRequest {
	s.Comment = &comment
	return s
}

func (s *CreateOnS3StageRequest) WithTag(tag []TagAssociation) *CreateOnS3StageRequest {
	s.Tag = tag
	return s
}

func NewExternalS3StageParamsRequest(
	url string,
) *ExternalS3StageParamsRequest {
	s := ExternalS3StageParamsRequest{}
	s.Url = url
	return &s
}

func (s *ExternalS3StageParamsRequest) WithStorageIntegration(storageIntegration AccountObjectIdentifier) *ExternalS3StageParamsRequest {
	s.StorageIntegration = &storageIntegration
	return s
}

func (s *ExternalS3StageParamsRequest) WithCredentials(credentials ExternalStageS3CredentialsRequest) *ExternalS3StageParamsRequest {
	s.Credentials = &credentials
	return s
}

func (s *ExternalS3StageParamsRequest) WithEncryption(encryption ExternalStageS3EncryptionRequest) *ExternalS3StageParamsRequest {
	s.Encryption = &encryption
	return s
}

func NewExternalStageS3CredentialsRequest() *ExternalStageS3CredentialsRequest {
	s := ExternalStageS3CredentialsRequest{}
	return &s
}

func (s *ExternalStageS3CredentialsRequest) WithAwsKeyId(awsKeyId string) *ExternalStageS3CredentialsRequest {
	s.AwsKeyId = &awsKeyId
	return s
}

func (s *ExternalStageS3CredentialsRequest) WithAwsSecretKey(awsSecretKey string) *ExternalStageS3CredentialsRequest {
	s.AwsSecretKey = &awsSecretKey
	return s
}

func (s *ExternalStageS3CredentialsRequest) WithAwsToken(awsToken string) *ExternalStageS3CredentialsRequest {
	s.AwsToken = &awsToken
	return s
}

func (s *ExternalStageS3CredentialsRequest) WithAwsRole(awsRole string) *ExternalStageS3CredentialsRequest {
	s.AwsRole = &awsRole
	return s
}

func NewExternalStageS3EncryptionRequest(
	encryptionType *ExternalStageS3EncryptionOption,
) *ExternalStageS3EncryptionRequest {
	s := ExternalStageS3EncryptionRequest{}
	s.EncryptionType = encryptionType
	return &s
}

func (s *ExternalStageS3EncryptionRequest) WithMasterKey(masterKey string) *ExternalStageS3EncryptionRequest {
	s.MasterKey = &masterKey
	return s
}

func (s *ExternalStageS3EncryptionRequest) WithKmsKeyId(kmsKeyId string) *ExternalStageS3EncryptionRequest {
	s.KmsKeyId = &kmsKeyId
	return s
}

func NewExternalS3DirectoryTableOptionsRequest() *ExternalS3DirectoryTableOptionsRequest {
	s := ExternalS3DirectoryTableOptionsRequest{}
	return &s
}

func (s *ExternalS3DirectoryTableOptionsRequest) WithEnable(enable bool) *ExternalS3DirectoryTableOptionsRequest {
	s.Enable = &enable
	return s
}

func (s *ExternalS3DirectoryTableOptionsRequest) WithRefreshOnCreate(refreshOnCreate bool) *ExternalS3DirectoryTableOptionsRequest {
	s.RefreshOnCreate = &refreshOnCreate
	return s
}

func (s *ExternalS3DirectoryTableOptionsRequest) WithAutoRefresh(autoRefresh bool) *ExternalS3DirectoryTableOptionsRequest {
	s.AutoRefresh = &autoRefresh
	return s
}

func NewCreateOnGCSStageRequest(
	name SchemaObjectIdentifier,
) *CreateOnGCSStageRequest {
	s := CreateOnGCSStageRequest{}
	s.name = name
	return &s
}

func (s *CreateOnGCSStageRequest) WithOrReplace(orReplace bool) *CreateOnGCSStageRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateOnGCSStageRequest) WithTemporary(temporary bool) *CreateOnGCSStageRequest {
	s.Temporary = &temporary
	return s
}

func (s *CreateOnGCSStageRequest) WithIfNotExists(ifNotExists bool) *CreateOnGCSStageRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateOnGCSStageRequest) WithExternalStageParams(externalStageParams ExternalGCSStageParamsRequest) *CreateOnGCSStageRequest {
	s.ExternalStageParams = &externalStageParams
	return s
}

func (s *CreateOnGCSStageRequest) WithDirectoryTableOptions(directoryTableOptions ExternalGCSDirectoryTableOptionsRequest) *CreateOnGCSStageRequest {
	s.DirectoryTableOptions = &directoryTableOptions
	return s
}

func (s *CreateOnGCSStageRequest) WithFileFormat(fileFormat StageFileFormatRequest) *CreateOnGCSStageRequest {
	s.FileFormat = &fileFormat
	return s
}

func (s *CreateOnGCSStageRequest) WithCopyOptions(copyOptions StageCopyOptionsRequest) *CreateOnGCSStageRequest {
	s.CopyOptions = &copyOptions
	return s
}

func (s *CreateOnGCSStageRequest) WithComment(comment string) *CreateOnGCSStageRequest {
	s.Comment = &comment
	return s
}

func (s *CreateOnGCSStageRequest) WithTag(tag []TagAssociation) *CreateOnGCSStageRequest {
	s.Tag = tag
	return s
}

func NewExternalGCSStageParamsRequest(
	url string,
) *ExternalGCSStageParamsRequest {
	s := ExternalGCSStageParamsRequest{}
	s.Url = url
	return &s
}

func (s *ExternalGCSStageParamsRequest) WithStorageIntegration(storageIntegration AccountObjectIdentifier) *ExternalGCSStageParamsRequest {
	s.StorageIntegration = &storageIntegration
	return s
}

func (s *ExternalGCSStageParamsRequest) WithEncryption(encryption ExternalStageGCSEncryptionRequest) *ExternalGCSStageParamsRequest {
	s.Encryption = &encryption
	return s
}

func NewExternalStageGCSEncryptionRequest(
	encryptionType *ExternalStageGCSEncryptionOption,
) *ExternalStageGCSEncryptionRequest {
	s := ExternalStageGCSEncryptionRequest{}
	s.EncryptionType = encryptionType
	return &s
}

func (s *ExternalStageGCSEncryptionRequest) WithKmsKeyId(kmsKeyId string) *ExternalStageGCSEncryptionRequest {
	s.KmsKeyId = &kmsKeyId
	return s
}

func NewExternalGCSDirectoryTableOptionsRequest() *ExternalGCSDirectoryTableOptionsRequest {
	s := ExternalGCSDirectoryTableOptionsRequest{}
	return &s
}

func (s *ExternalGCSDirectoryTableOptionsRequest) WithEnable(enable bool) *ExternalGCSDirectoryTableOptionsRequest {
	s.Enable = &enable
	return s
}

func (s *ExternalGCSDirectoryTableOptionsRequest) WithRefreshOnCreate(refreshOnCreate bool) *ExternalGCSDirectoryTableOptionsRequest {
	s.RefreshOnCreate = &refreshOnCreate
	return s
}

func (s *ExternalGCSDirectoryTableOptionsRequest) WithAutoRefresh(autoRefresh bool) *ExternalGCSDirectoryTableOptionsRequest {
	s.AutoRefresh = &autoRefresh
	return s
}

func (s *ExternalGCSDirectoryTableOptionsRequest) WithNotificationIntegration(notificationIntegration string) *ExternalGCSDirectoryTableOptionsRequest {
	s.NotificationIntegration = &notificationIntegration
	return s
}

func NewCreateOnAzureStageRequest(
	name SchemaObjectIdentifier,
) *CreateOnAzureStageRequest {
	s := CreateOnAzureStageRequest{}
	s.name = name
	return &s
}

func (s *CreateOnAzureStageRequest) WithOrReplace(orReplace bool) *CreateOnAzureStageRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateOnAzureStageRequest) WithTemporary(temporary bool) *CreateOnAzureStageRequest {
	s.Temporary = &temporary
	return s
}

func (s *CreateOnAzureStageRequest) WithIfNotExists(ifNotExists bool) *CreateOnAzureStageRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateOnAzureStageRequest) WithExternalStageParams(externalStageParams ExternalAzureStageParamsRequest) *CreateOnAzureStageRequest {
	s.ExternalStageParams = &externalStageParams
	return s
}

func (s *CreateOnAzureStageRequest) WithDirectoryTableOptions(directoryTableOptions ExternalAzureDirectoryTableOptionsRequest) *CreateOnAzureStageRequest {
	s.DirectoryTableOptions = &directoryTableOptions
	return s
}

func (s *CreateOnAzureStageRequest) WithFileFormat(fileFormat StageFileFormatRequest) *CreateOnAzureStageRequest {
	s.FileFormat = &fileFormat
	return s
}

func (s *CreateOnAzureStageRequest) WithCopyOptions(copyOptions StageCopyOptionsRequest) *CreateOnAzureStageRequest {
	s.CopyOptions = &copyOptions
	return s
}

func (s *CreateOnAzureStageRequest) WithComment(comment string) *CreateOnAzureStageRequest {
	s.Comment = &comment
	return s
}

func (s *CreateOnAzureStageRequest) WithTag(tag []TagAssociation) *CreateOnAzureStageRequest {
	s.Tag = tag
	return s
}

func NewExternalAzureStageParamsRequest(
	url string,
) *ExternalAzureStageParamsRequest {
	s := ExternalAzureStageParamsRequest{}
	s.Url = url
	return &s
}

func (s *ExternalAzureStageParamsRequest) WithStorageIntegration(storageIntegration AccountObjectIdentifier) *ExternalAzureStageParamsRequest {
	s.StorageIntegration = &storageIntegration
	return s
}

func (s *ExternalAzureStageParamsRequest) WithCredentials(credentials ExternalStageAzureCredentialsRequest) *ExternalAzureStageParamsRequest {
	s.Credentials = &credentials
	return s
}

func (s *ExternalAzureStageParamsRequest) WithEncryption(encryption ExternalStageAzureEncryptionRequest) *ExternalAzureStageParamsRequest {
	s.Encryption = &encryption
	return s
}

func NewExternalStageAzureCredentialsRequest(
	azureSasToken string,
) *ExternalStageAzureCredentialsRequest {
	s := ExternalStageAzureCredentialsRequest{}
	s.AzureSasToken = azureSasToken
	return &s
}

func NewExternalStageAzureEncryptionRequest(
	encryptionType *ExternalStageAzureEncryptionOption,
) *ExternalStageAzureEncryptionRequest {
	s := ExternalStageAzureEncryptionRequest{}
	s.EncryptionType = encryptionType
	return &s
}

func (s *ExternalStageAzureEncryptionRequest) WithMasterKey(masterKey string) *ExternalStageAzureEncryptionRequest {
	s.MasterKey = &masterKey
	return s
}

func NewExternalAzureDirectoryTableOptionsRequest() *ExternalAzureDirectoryTableOptionsRequest {
	s := ExternalAzureDirectoryTableOptionsRequest{}
	return &s
}

func (s *ExternalAzureDirectoryTableOptionsRequest) WithEnable(enable bool) *ExternalAzureDirectoryTableOptionsRequest {
	s.Enable = &enable
	return s
}

func (s *ExternalAzureDirectoryTableOptionsRequest) WithRefreshOnCreate(refreshOnCreate bool) *ExternalAzureDirectoryTableOptionsRequest {
	s.RefreshOnCreate = &refreshOnCreate
	return s
}

func (s *ExternalAzureDirectoryTableOptionsRequest) WithAutoRefresh(autoRefresh bool) *ExternalAzureDirectoryTableOptionsRequest {
	s.AutoRefresh = &autoRefresh
	return s
}

func (s *ExternalAzureDirectoryTableOptionsRequest) WithNotificationIntegration(notificationIntegration string) *ExternalAzureDirectoryTableOptionsRequest {
	s.NotificationIntegration = &notificationIntegration
	return s
}

func NewCreateOnS3CompatibleStageRequest(
	name SchemaObjectIdentifier,
	url string,
	endpoint string,
) *CreateOnS3CompatibleStageRequest {
	s := CreateOnS3CompatibleStageRequest{}
	s.name = name
	s.Url = url
	s.Endpoint = endpoint
	return &s
}

func (s *CreateOnS3CompatibleStageRequest) WithOrReplace(orReplace bool) *CreateOnS3CompatibleStageRequest {
	s.OrReplace = &orReplace
	return s
}

func (s *CreateOnS3CompatibleStageRequest) WithTemporary(temporary bool) *CreateOnS3CompatibleStageRequest {
	s.Temporary = &temporary
	return s
}

func (s *CreateOnS3CompatibleStageRequest) WithIfNotExists(ifNotExists bool) *CreateOnS3CompatibleStageRequest {
	s.IfNotExists = &ifNotExists
	return s
}

func (s *CreateOnS3CompatibleStageRequest) WithCredentials(credentials ExternalStageS3CompatibleCredentialsRequest) *CreateOnS3CompatibleStageRequest {
	s.Credentials = &credentials
	return s
}

func (s *CreateOnS3CompatibleStageRequest) WithDirectoryTableOptions(directoryTableOptions ExternalS3DirectoryTableOptionsRequest) *CreateOnS3CompatibleStageRequest {
	s.DirectoryTableOptions = &directoryTableOptions
	return s
}

func (s *CreateOnS3CompatibleStageRequest) WithFileFormat(fileFormat StageFileFormatRequest) *CreateOnS3CompatibleStageRequest {
	s.FileFormat = &fileFormat
	return s
}

func (s *CreateOnS3CompatibleStageRequest) WithCopyOptions(copyOptions StageCopyOptionsRequest) *CreateOnS3CompatibleStageRequest {
	s.CopyOptions = &copyOptions
	return s
}

func (s *CreateOnS3CompatibleStageRequest) WithComment(comment string) *CreateOnS3CompatibleStageRequest {
	s.Comment = &comment
	return s
}

func (s *CreateOnS3CompatibleStageRequest) WithTag(tag []TagAssociation) *CreateOnS3CompatibleStageRequest {
	s.Tag = tag
	return s
}

func NewExternalStageS3CompatibleCredentialsRequest(
	awsKeyId *string,
	awsSecretKey *string,
) *ExternalStageS3CompatibleCredentialsRequest {
	s := ExternalStageS3CompatibleCredentialsRequest{}
	s.AwsKeyId = awsKeyId
	s.AwsSecretKey = awsSecretKey
	return &s
}

func NewAlterStageRequest(
	name SchemaObjectIdentifier,
) *AlterStageRequest {
	s := AlterStageRequest{}
	s.name = name
	return &s
}

func (s *AlterStageRequest) WithIfExists(ifExists bool) *AlterStageRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterStageRequest) WithRenameTo(renameTo SchemaObjectIdentifier) *AlterStageRequest {
	s.RenameTo = &renameTo
	return s
}

func (s *AlterStageRequest) WithSetTags(setTags []TagAssociation) *AlterStageRequest {
	s.SetTags = setTags
	return s
}

func (s *AlterStageRequest) WithUnsetTags(unsetTags []ObjectIdentifier) *AlterStageRequest {
	s.UnsetTags = unsetTags
	return s
}

func NewAlterInternalStageStageRequest(
	name SchemaObjectIdentifier,
) *AlterInternalStageStageRequest {
	s := AlterInternalStageStageRequest{}
	s.name = name
	return &s
}

func (s *AlterInternalStageStageRequest) WithIfExists(ifExists bool) *AlterInternalStageStageRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterInternalStageStageRequest) WithFileFormat(fileFormat StageFileFormatRequest) *AlterInternalStageStageRequest {
	s.FileFormat = &fileFormat
	return s
}

func (s *AlterInternalStageStageRequest) WithCopyOptions(copyOptions StageCopyOptionsRequest) *AlterInternalStageStageRequest {
	s.CopyOptions = &copyOptions
	return s
}

func (s *AlterInternalStageStageRequest) WithComment(comment string) *AlterInternalStageStageRequest {
	s.Comment = &comment
	return s
}

func NewAlterExternalS3StageStageRequest(
	name SchemaObjectIdentifier,
) *AlterExternalS3StageStageRequest {
	s := AlterExternalS3StageStageRequest{}
	s.name = name
	return &s
}

func (s *AlterExternalS3StageStageRequest) WithIfExists(ifExists bool) *AlterExternalS3StageStageRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterExternalS3StageStageRequest) WithExternalStageParams(externalStageParams ExternalS3StageParamsRequest) *AlterExternalS3StageStageRequest {
	s.ExternalStageParams = &externalStageParams
	return s
}

func (s *AlterExternalS3StageStageRequest) WithFileFormat(fileFormat StageFileFormatRequest) *AlterExternalS3StageStageRequest {
	s.FileFormat = &fileFormat
	return s
}

func (s *AlterExternalS3StageStageRequest) WithCopyOptions(copyOptions StageCopyOptionsRequest) *AlterExternalS3StageStageRequest {
	s.CopyOptions = &copyOptions
	return s
}

func (s *AlterExternalS3StageStageRequest) WithComment(comment string) *AlterExternalS3StageStageRequest {
	s.Comment = &comment
	return s
}

func NewAlterExternalGCSStageStageRequest(
	name SchemaObjectIdentifier,
) *AlterExternalGCSStageStageRequest {
	s := AlterExternalGCSStageStageRequest{}
	s.name = name
	return &s
}

func (s *AlterExternalGCSStageStageRequest) WithIfExists(ifExists bool) *AlterExternalGCSStageStageRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterExternalGCSStageStageRequest) WithExternalStageParams(externalStageParams ExternalGCSStageParamsRequest) *AlterExternalGCSStageStageRequest {
	s.ExternalStageParams = &externalStageParams
	return s
}

func (s *AlterExternalGCSStageStageRequest) WithFileFormat(fileFormat StageFileFormatRequest) *AlterExternalGCSStageStageRequest {
	s.FileFormat = &fileFormat
	return s
}

func (s *AlterExternalGCSStageStageRequest) WithCopyOptions(copyOptions StageCopyOptionsRequest) *AlterExternalGCSStageStageRequest {
	s.CopyOptions = &copyOptions
	return s
}

func (s *AlterExternalGCSStageStageRequest) WithComment(comment string) *AlterExternalGCSStageStageRequest {
	s.Comment = &comment
	return s
}

func NewAlterExternalAzureStageStageRequest(
	name SchemaObjectIdentifier,
) *AlterExternalAzureStageStageRequest {
	s := AlterExternalAzureStageStageRequest{}
	s.name = name
	return &s
}

func (s *AlterExternalAzureStageStageRequest) WithIfExists(ifExists bool) *AlterExternalAzureStageStageRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterExternalAzureStageStageRequest) WithExternalStageParams(externalStageParams ExternalAzureStageParamsRequest) *AlterExternalAzureStageStageRequest {
	s.ExternalStageParams = &externalStageParams
	return s
}

func (s *AlterExternalAzureStageStageRequest) WithFileFormat(fileFormat StageFileFormatRequest) *AlterExternalAzureStageStageRequest {
	s.FileFormat = &fileFormat
	return s
}

func (s *AlterExternalAzureStageStageRequest) WithCopyOptions(copyOptions StageCopyOptionsRequest) *AlterExternalAzureStageStageRequest {
	s.CopyOptions = &copyOptions
	return s
}

func (s *AlterExternalAzureStageStageRequest) WithComment(comment string) *AlterExternalAzureStageStageRequest {
	s.Comment = &comment
	return s
}

func NewAlterDirectoryTableStageRequest(
	name SchemaObjectIdentifier,
) *AlterDirectoryTableStageRequest {
	s := AlterDirectoryTableStageRequest{}
	s.name = name
	return &s
}

func (s *AlterDirectoryTableStageRequest) WithIfExists(ifExists bool) *AlterDirectoryTableStageRequest {
	s.IfExists = &ifExists
	return s
}

func (s *AlterDirectoryTableStageRequest) WithSetDirectory(setDirectory DirectoryTableSetRequest) *AlterDirectoryTableStageRequest {
	s.SetDirectory = &setDirectory
	return s
}

func (s *AlterDirectoryTableStageRequest) WithRefresh(refresh DirectoryTableRefreshRequest) *AlterDirectoryTableStageRequest {
	s.Refresh = &refresh
	return s
}

func NewDirectoryTableSetRequest(
	enable bool,
) *DirectoryTableSetRequest {
	s := DirectoryTableSetRequest{}
	s.Enable = enable
	return &s
}

func NewDirectoryTableRefreshRequest() *DirectoryTableRefreshRequest {
	s := DirectoryTableRefreshRequest{}
	return &s
}

func (s *DirectoryTableRefreshRequest) WithSubpath(subpath string) *DirectoryTableRefreshRequest {
	s.Subpath = &subpath
	return s
}

func NewDropStageRequest(
	name SchemaObjectIdentifier,
) *DropStageRequest {
	s := DropStageRequest{}
	s.name = name
	return &s
}

func (s *DropStageRequest) WithIfExists(ifExists bool) *DropStageRequest {
	s.IfExists = &ifExists
	return s
}

func NewDescribeStageRequest(
	name SchemaObjectIdentifier,
) *DescribeStageRequest {
	s := DescribeStageRequest{}
	s.name = name
	return &s
}

func NewShowStageRequest() *ShowStageRequest {
	s := ShowStageRequest{}
	return &s
}

func (s *ShowStageRequest) WithLike(like Like) *ShowStageRequest {
	s.Like = &like
	return s
}

func (s *ShowStageRequest) WithIn(in In) *ShowStageRequest {
	s.In = &in
	return s
}
