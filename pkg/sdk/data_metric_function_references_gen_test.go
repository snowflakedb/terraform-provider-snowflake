// Code generated by SDK builder generator (v0.1.0); DO NOT EDIT.

package sdk

import (
	"testing"
)

func TestDataMetricFunctionReferences_GetForEntity(t *testing.T) {
	// id and defaultOpts removed manually

	t.Run("validation: nil options", func(t *testing.T) {
		opts := (*GetForEntityDataMetricFunctionReferenceOptions)(nil)
		assertOptsInvalidJoinedErrors(t, opts, ErrNilOptions)
	})

	t.Run("validation: [opts.parameters] should be set", func(t *testing.T) {
		opts := &GetForEntityDataMetricFunctionReferenceOptions{}
		assertOptsInvalidJoinedErrors(t, opts, errNotSet("GetForEntityDataMetricFunctionReferenceOptions", "parameters"))
	})

	t.Run("validation: [opts.parameters.arguments] should be set", func(t *testing.T) {
		opts := &GetForEntityDataMetricFunctionReferenceOptions{
			parameters: &dataMetricFunctionReferenceParameters{},
		}
		assertOptsInvalidJoinedErrors(t, opts, errNotSet("GetForEntityDataMetricFunctionReferenceOptions.parameters", "arguments"))
	})

	t.Run("validation: [opts.parameters.arguments.RefEntityDomain] should be set", func(t *testing.T) {
		opts := &GetForEntityDataMetricFunctionReferenceOptions{
			parameters: &dataMetricFunctionReferenceParameters{
				arguments: &dataMetricFunctionReferenceFunctionArguments{
					refEntityName: []ObjectIdentifier{NewSchemaObjectIdentifier("a", "b", "c")},
				},
			},
		}
		assertOptsInvalidJoinedErrors(t, opts, errNotSet("GetForEntityDataMetricFunctionReferenceOptions.parameters.arguments", "RefEntityDomain"))
	})

	t.Run("validation: [opts.parameters.arguments.refEntityName] should be set", func(t *testing.T) {
		opts := &GetForEntityDataMetricFunctionReferenceOptions{
			parameters: &dataMetricFunctionReferenceParameters{
				arguments: &dataMetricFunctionReferenceFunctionArguments{
					RefEntityDomain: Pointer(DataMetricFunctionRefEntityDomainView),
				},
			},
		}
		assertOptsInvalidJoinedErrors(t, opts, errNotSet("GetForEntityDataMetricFunctionReferenceOptions.parameters.arguments", "refEntityName"))
	})

	t.Run("basic", func(t *testing.T) {
		opts := &GetForEntityDataMetricFunctionReferenceOptions{
			parameters: &dataMetricFunctionReferenceParameters{
				arguments: &dataMetricFunctionReferenceFunctionArguments{
					refEntityName:   []ObjectIdentifier{NewSchemaObjectIdentifier("a", "b", "c")},
					RefEntityDomain: Pointer(DataMetricFunctionRefEntityDomainView),
				},
			},
		}
		assertOptsValidAndSQLEquals(t, opts, `SELECT * FROM TABLE (SNOWFLAKE.INFORMATION_SCHEMA.DATA_METRIC_FUNCTION_REFERENCES (REF_ENTITY_NAME => '\"a\".\"b\".\"c\"', REF_ENTITY_DOMAIN => 'VIEW'))`)
	})
}
