// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_warehouse

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func WarehouseResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auto_resume": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether to automatically resume a warehouse when a SQL statement is submitted to it",
				MarkdownDescription: "Specifies whether to automatically resume a warehouse when a SQL statement is submitted to it",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"true",
						"false",
					),
				},
			},
			"auto_suspend": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "time in seconds before auto suspend",
				MarkdownDescription: "time in seconds before auto suspend",
			},
			"available": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Percentage of the warehouse compute resources that are provisioned and available.",
				MarkdownDescription: "Percentage of the warehouse compute resources that are provisioned and available.",
			},
			"budget": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Comment representing budget for warehouse.",
				MarkdownDescription: "Comment representing budget for warehouse.",
			},
			"comment": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies a comment for the warehouse",
				MarkdownDescription: "Specifies a comment for the warehouse",
			},
			"created_on": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Date and time when the warehouse was created.",
				MarkdownDescription: "Date and time when the warehouse was created.",
			},
			"enable_query_acceleration": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources",
				MarkdownDescription: "Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"true",
						"false",
					),
				},
			},
			"id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Identifier (i.e. name) for the resource.",
				MarkdownDescription: "Identifier (i.e. name) for the resource.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^\"([^\"]|\"\")+\"|[a-zA-Z_][a-zA-Z0-9_$]*$"), ""),
				},
			},
			"initially_suspended": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies whether the warehouse is created initially in the Suspended state",
				MarkdownDescription: "Specifies whether the warehouse is created initially in the Suspended state",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"true",
						"false",
					),
				},
			},
			"is_current": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the warehouse is in use for the session. Only one warehouse can be in use at a time for a session.  To specify or change the warehouse for a session, use the USE WAREHOUSE command.",
				MarkdownDescription: "Whether the warehouse is in use for the session. Only one warehouse can be in use at a time for a session.  To specify or change the warehouse for a session, use the USE WAREHOUSE command.",
			},
			"is_default": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the warehouse is the default for the current user.",
				MarkdownDescription: "Whether the warehouse is the default for the current user.",
			},
			"kind": schema.StringAttribute{
				Optional:           true,
				Computed:           true,
				DeprecationMessage: "This attribute is deprecated.",
			},
			"max_cluster_count": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the maximum number of clusters for a multi-cluster warehouse",
				MarkdownDescription: "Specifies the maximum number of clusters for a multi-cluster warehouse",
			},
			"max_concurrency_level": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Object parameter that specifies the concurrency level for SQL statements executed by a warehouse cluster",
				MarkdownDescription: "Object parameter that specifies the concurrency level for SQL statements executed by a warehouse cluster",
			},
			"min_cluster_count": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the minimum number of clusters for a multi-cluster warehouse",
				MarkdownDescription: "Specifies the minimum number of clusters for a multi-cluster warehouse",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "A Snowflake object identifier. If the identifier contains spaces or special characters, the entire string must be enclosed in double quotes. Identifiers enclosed in double quotes are also case-sensitive.",
				MarkdownDescription: "A Snowflake object identifier. If the identifier contains spaces or special characters, the entire string must be enclosed in double quotes. Identifiers enclosed in double quotes are also case-sensitive.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^\"([^\"]|\"\")+\"|[a-zA-Z_][a-zA-Z0-9_$]*$"), ""),
				},
			},
			"other": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Percentage of the warehouse compute resources that are in a state other than available,  provisioning, or quiescing.",
				MarkdownDescription: "Percentage of the warehouse compute resources that are in a state other than available,  provisioning, or quiescing.",
			},
			"owner": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Role that owns the warehouse.",
				MarkdownDescription: "Role that owns the warehouse.",
			},
			"owner_role_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The type of role that owns the object.",
				MarkdownDescription: "The type of role that owns the object.",
			},
			"provisioning": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Percentage of the warehouse compute resources that are in the process of provisioning.",
				MarkdownDescription: "Percentage of the warehouse compute resources that are in the process of provisioning.",
			},
			"query_acceleration_max_scale_factor": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size",
				MarkdownDescription: "Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size",
			},
			"queued": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Number of SQL statements that are queued for the warehouse.",
				MarkdownDescription: "Number of SQL statements that are queued for the warehouse.",
			},
			"quiescing": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Percentage of the warehouse compute resources that are executing SQL statements,  but will be shut down once the queries complete.",
				MarkdownDescription: "Percentage of the warehouse compute resources that are executing SQL statements,  but will be shut down once the queries complete.",
			},
			"resource_monitor": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A Snowflake object identifier. If the identifier contains spaces or special characters, the entire string must be enclosed in double quotes. Identifiers enclosed in double quotes are also case-sensitive.",
				MarkdownDescription: "A Snowflake object identifier. If the identifier contains spaces or special characters, the entire string must be enclosed in double quotes. Identifiers enclosed in double quotes are also case-sensitive.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^\"([^\"]|\"\")+\"|[a-zA-Z_][a-zA-Z0-9_$]*$"), ""),
				},
			},
			"resumed_on": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Date and time when the warehouse was last started or restarted.",
				MarkdownDescription: "Date and time when the warehouse was last started or restarted.",
			},
			"running": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Number of SQL statements that are being executed by the warehouse.",
				MarkdownDescription: "Number of SQL statements that are being executed by the warehouse.",
			},
			"scaling_policy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Scaling policy of warehouse, possible scaling policies: STANDARD, ECONOMY",
				MarkdownDescription: "Scaling policy of warehouse, possible scaling policies: STANDARD, ECONOMY",
			},
			"size": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "[Deprecated] names of size: X-Small, Small, Medium, Large, X-Large, 2X-Large, 3X-Large, 4X-Large, 5X-Large, 6X-Large",
				MarkdownDescription: "[Deprecated] names of size: X-Small, Small, Medium, Large, X-Large, 2X-Large, 3X-Large, 4X-Large, 5X-Large, 6X-Large",
				DeprecationMessage:  "This attribute is deprecated.",
			},
			"started_clusters": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Number of clusters currently started.",
				MarkdownDescription: "Number of clusters currently started.",
			},
			"state": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The state of warehouse, possible states: STARTED, STARTING, DYNAMIC, SUSPENDED, RESIZING, RESUMING, SUSPENDING",
				MarkdownDescription: "The state of warehouse, possible states: STARTED, STARTING, DYNAMIC, SUSPENDED, RESIZING, RESUMING, SUSPENDING",
			},
			"statement_queued_timeout_in_seconds": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Object parameter that specifies the time, in seconds, a SQL statement can be queued on a warehouse before it is canceled by the system",
				MarkdownDescription: "Object parameter that specifies the time, in seconds, a SQL statement can be queued on a warehouse before it is canceled by the system",
			},
			"statement_timeout_in_seconds": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Object parameter that specifies the time, in seconds, after which a running SQL statement  is canceled by the system",
				MarkdownDescription: "Object parameter that specifies the time, in seconds, after which a running SQL statement  is canceled by the system",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "Message returned by the server.",
				MarkdownDescription: "Message returned by the server.",
			},
			"target_statement_size": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Names of size: X-Small, Small, Medium, Large, X-Large, 2X-Large, 3X-Large, 4X-Large, 5X-Large, 6X-Large",
				MarkdownDescription: "Names of size: X-Small, Small, Medium, Large, X-Large, 2X-Large, 3X-Large, 4X-Large, 5X-Large, 6X-Large",
			},
			"type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "[Deprecated] Type of warehouse, possible types: STANDARD, SNOWPARK-OPTIMIZED",
				MarkdownDescription: "[Deprecated] Type of warehouse, possible types: STANDARD, SNOWPARK-OPTIMIZED",
				DeprecationMessage:  "This attribute is deprecated.",
			},
			"updated_on": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Date and time when the warehouse was last updated,  which includes changing any of the properties of the warehouse or changing the state (STARTED, SUSPENDED, RESIZING) of the warehouse.",
				MarkdownDescription: "Date and time when the warehouse was last updated,  which includes changing any of the properties of the warehouse or changing the state (STARTED, SUSPENDED, RESIZING) of the warehouse.",
			},
			"wait_for_completion": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "When resizing a warehouse, you can use this parameter to block the return of the ALTER WAREHOUSE command until the resize has finished provisioning all its compute resources",
				MarkdownDescription: "When resizing a warehouse, you can use this parameter to block the return of the ALTER WAREHOUSE command until the resize has finished provisioning all its compute resources",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"true",
						"false",
					),
				},
			},
			"warehouse_credit_limit": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Credit limit that are can be executed by the warehouse.",
				MarkdownDescription: "Credit limit that are can be executed by the warehouse.",
			},
			"warehouse_size": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Size of warehouse, possible sizes: XSMALL, SMALL, MEDIUM, LARGE, XLARGE, XXLARGE, XXXLARGE, X4LARGE, X5LARGE, X6LARGE",
				MarkdownDescription: "Size of warehouse, possible sizes: XSMALL, SMALL, MEDIUM, LARGE, XLARGE, XXLARGE, XXXLARGE, X4LARGE, X5LARGE, X6LARGE",
			},
			"warehouse_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Type of warehouse, possible types: STANDARD, SNOWPARK-OPTIMIZED",
				MarkdownDescription: "Type of warehouse, possible types: STANDARD, SNOWPARK-OPTIMIZED",
			},
		},
	}
}

type WarehouseModel struct {
	AutoResume                      types.String `tfsdk:"auto_resume"`
	AutoSuspend                     types.Int64  `tfsdk:"auto_suspend"`
	Available                       types.String `tfsdk:"available"`
	Budget                          types.String `tfsdk:"budget"`
	Comment                         types.String `tfsdk:"comment"`
	CreatedOn                       types.String `tfsdk:"created_on"`
	EnableQueryAcceleration         types.String `tfsdk:"enable_query_acceleration"`
	Id                              types.String `tfsdk:"id"`
	InitiallySuspended              types.String `tfsdk:"initially_suspended"`
	IsCurrent                       types.Bool   `tfsdk:"is_current"`
	IsDefault                       types.Bool   `tfsdk:"is_default"`
	Kind                            types.String `tfsdk:"kind"`
	MaxClusterCount                 types.Int64  `tfsdk:"max_cluster_count"`
	MaxConcurrencyLevel             types.Int64  `tfsdk:"max_concurrency_level"`
	MinClusterCount                 types.Int64  `tfsdk:"min_cluster_count"`
	Name                            types.String `tfsdk:"name"`
	Other                           types.String `tfsdk:"other"`
	Owner                           types.String `tfsdk:"owner"`
	OwnerRoleType                   types.String `tfsdk:"owner_role_type"`
	Provisioning                    types.String `tfsdk:"provisioning"`
	QueryAccelerationMaxScaleFactor types.Int64  `tfsdk:"query_acceleration_max_scale_factor"`
	Queued                          types.Int64  `tfsdk:"queued"`
	Quiescing                       types.String `tfsdk:"quiescing"`
	ResourceMonitor                 types.String `tfsdk:"resource_monitor"`
	ResumedOn                       types.String `tfsdk:"resumed_on"`
	Running                         types.Int64  `tfsdk:"running"`
	ScalingPolicy                   types.String `tfsdk:"scaling_policy"`
	Size                            types.String `tfsdk:"size"`
	StartedClusters                 types.Int64  `tfsdk:"started_clusters"`
	State                           types.String `tfsdk:"state"`
	StatementQueuedTimeoutInSeconds types.Int64  `tfsdk:"statement_queued_timeout_in_seconds"`
	StatementTimeoutInSeconds       types.Int64  `tfsdk:"statement_timeout_in_seconds"`
	Status                          types.String `tfsdk:"status"`
	TargetStatementSize             types.String `tfsdk:"target_statement_size"`
	Type                            types.String `tfsdk:"type"`
	UpdatedOn                       types.String `tfsdk:"updated_on"`
	WaitForCompletion               types.String `tfsdk:"wait_for_completion"`
	WarehouseCreditLimit            types.Int64  `tfsdk:"warehouse_credit_limit"`
	WarehouseSize                   types.String `tfsdk:"warehouse_size"`
	WarehouseType                   types.String `tfsdk:"warehouse_type"`
}
