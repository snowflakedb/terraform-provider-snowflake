// Code generated by sdk-to-schema generator; DO NOT EDIT.

package schemas

import (
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

// ShowGitRepositorySchema represents output of SHOW query for the single GitRepository.
var ShowGitRepositorySchema = map[string]*schema.Schema{
	"created_on": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"database_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"schema_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"origin": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"api_integration": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"git_credentials": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"owner": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"owner_role_type": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"comment": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"last_fetched_at": {
		Type:     schema.TypeString,
		Computed: true,
	},
}

var _ = ShowGitRepositorySchema

func GitRepositoryToSchema(gitRepository *sdk.GitRepository) map[string]any {
	gitRepositorySchema := make(map[string]any)
	gitRepositorySchema["created_on"] = gitRepository.CreatedOn.String()
	gitRepositorySchema["name"] = gitRepository.Name
	gitRepositorySchema["database_name"] = gitRepository.DatabaseName
	gitRepositorySchema["schema_name"] = gitRepository.SchemaName
	gitRepositorySchema["origin"] = gitRepository.Origin
	if gitRepository.ApiIntegration != nil {
		gitRepositorySchema["api_integration"] = gitRepository.ApiIntegration.Name()
	}
	if gitRepository.GitCredentials != nil {
		gitRepositorySchema["git_credentials"] = gitRepository.GitCredentials.FullyQualifiedName()
	}
	gitRepositorySchema["owner"] = gitRepository.Owner
	gitRepositorySchema["owner_role_type"] = gitRepository.OwnerRoleType
	if gitRepository.Comment != nil {
		gitRepositorySchema["comment"] = gitRepository.Comment
	}
	if gitRepository.LastFetchedAt != nil {
		gitRepositorySchema["last_fetched_at"] = gitRepository.LastFetchedAt.String()
	}
	return gitRepositorySchema
}

var _ = GitRepositoryToSchema
