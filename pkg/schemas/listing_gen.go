// Code generated by sdk-to-schema generator; DO NOT EDIT.

package schemas

import (
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

// ShowListingSchema represents output of SHOW query for the single Listing.
var ShowListingSchema = map[string]*schema.Schema{
	"global_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"title": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"subtitle": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"profile": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"created_on": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"updated_on": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"published_on": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"state": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"review_state": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"comment": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"owner": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"owner_role_type": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"regions": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"target_accounts": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"is_monetized": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"is_application": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"is_targeted": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"is_limited_trial": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"is_by_request": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"distribution": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"is_mountless_queryable": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"rejected_on": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"organization_profile_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"uniform_listing_locator": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"detailed_target_accounts": {
		Type:     schema.TypeString,
		Computed: true,
	},
}

var _ = ShowListingSchema

func ListingToSchema(listing *sdk.Listing) map[string]any {
	listingSchema := make(map[string]any)
	listingSchema["global_name"] = listing.GlobalName
	listingSchema["name"] = listing.Name
	listingSchema["title"] = listing.Title
	if listing.Subtitle != nil {
		listingSchema["subtitle"] = listing.Subtitle
	}
	listingSchema["profile"] = listing.Profile
	listingSchema["created_on"] = listing.CreatedOn
	listingSchema["updated_on"] = listing.UpdatedOn
	if listing.PublishedOn != nil {
		listingSchema["published_on"] = listing.PublishedOn
	}
	listingSchema["state"] = string(listing.State)
	if listing.ReviewState != nil {
		listingSchema["review_state"] = listing.ReviewState
	}
	if listing.Comment != nil {
		listingSchema["comment"] = listing.Comment
	}
	listingSchema["owner"] = listing.Owner
	listingSchema["owner_role_type"] = listing.OwnerRoleType
	if listing.Regions != nil {
		listingSchema["regions"] = listing.Regions
	}
	listingSchema["target_accounts"] = listing.TargetAccounts
	listingSchema["is_monetized"] = listing.IsMonetized
	listingSchema["is_application"] = listing.IsApplication
	listingSchema["is_targeted"] = listing.IsTargeted
	if listing.IsLimitedTrial != nil {
		listingSchema["is_limited_trial"] = listing.IsLimitedTrial
	}
	if listing.IsByRequest != nil {
		listingSchema["is_by_request"] = listing.IsByRequest
	}
	if listing.Distribution != nil {
		listingSchema["distribution"] = listing.Distribution
	}
	if listing.IsMountlessQueryable != nil {
		listingSchema["is_mountless_queryable"] = listing.IsMountlessQueryable
	}
	if listing.RejectedOn != nil {
		listingSchema["rejected_on"] = listing.RejectedOn
	}
	if listing.OrganizationProfileName != nil {
		listingSchema["organization_profile_name"] = listing.OrganizationProfileName
	}
	if listing.UniformListingLocator != nil {
		listingSchema["uniform_listing_locator"] = listing.UniformListingLocator
	}
	if listing.DetailedTargetAccounts != nil {
		listingSchema["detailed_target_accounts"] = listing.DetailedTargetAccounts
	}
	return listingSchema
}

var _ = ListingToSchema
