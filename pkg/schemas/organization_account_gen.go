// Code generated by sdk-to-schema generator; DO NOT EDIT.

package schemas

import (
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

// ShowOrganizationAccountSchema represents output of SHOW query for the single OrganizationAccount.
var ShowOrganizationAccountSchema = map[string]*schema.Schema{
	"organization_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"account_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"snowflake_region": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"edition": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"account_url": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"created_on": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"comment": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"account_locator": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"account_locator_url": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"managed_accounts": {
		Type:     schema.TypeInt,
		Computed: true,
	},
	"consumption_billing_entity_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"marketplace_consumer_billing_entity_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"marketplace_provider_billing_entity_name": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"old_account_url": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"is_org_admin": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"account_old_url_saved_on": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"account_old_url_last_used": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"organization_old_url": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"organization_old_url_saved_on": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"organization_old_url_last_used": {
		Type:     schema.TypeString,
		Computed: true,
	},
	"is_events_account": {
		Type:     schema.TypeBool,
		Computed: true,
	},
	"is_organization_account": {
		Type:     schema.TypeBool,
		Computed: true,
	},
}

var _ = ShowOrganizationAccountSchema

func OrganizationAccountToSchema(organizationAccount *sdk.OrganizationAccount) map[string]any {
	organizationAccountSchema := make(map[string]any)
	organizationAccountSchema["organization_name"] = organizationAccount.OrganizationName
	organizationAccountSchema["account_name"] = organizationAccount.AccountName
	organizationAccountSchema["snowflake_region"] = organizationAccount.SnowflakeRegion
	organizationAccountSchema["edition"] = string(organizationAccount.Edition)
	organizationAccountSchema["account_url"] = organizationAccount.AccountUrl
	organizationAccountSchema["created_on"] = organizationAccount.CreatedOn
	organizationAccountSchema["account_locator"] = organizationAccount.AccountLocator
	organizationAccountSchema["account_locator_url"] = organizationAccount.AccountLocatorUrl
	organizationAccountSchema["managed_accounts"] = organizationAccount.ManagedAccounts
	organizationAccountSchema["consumption_billing_entity_name"] = organizationAccount.ConsumptionBillingEntityName
	if organizationAccount.Comment != nil {
		organizationAccountSchema["comment"] = organizationAccount.Comment
	}
	if organizationAccount.MarketplaceConsumerBillingEntityName != nil {
		organizationAccountSchema["marketplace_consumer_billing_entity_name"] = *organizationAccount.MarketplaceConsumerBillingEntityName
	}
	organizationAccountSchema["marketplace_provider_billing_entity_name"] = organizationAccount.MarketplaceProviderBillingEntityName
	if organizationAccount.OldAccountUrl != nil {
		organizationAccountSchema["old_account_url"] = *organizationAccount.OldAccountUrl
	}
	organizationAccountSchema["is_org_admin"] = organizationAccount.IsOrgAdmin
	if organizationAccount.AccountOldUrlSavedOn != nil {
		organizationAccountSchema["account_old_url_saved_on"] = *organizationAccount.AccountOldUrlSavedOn
	}
	if organizationAccount.AccountOldUrlLastUsed != nil {
		organizationAccountSchema["account_old_url_last_used"] = *organizationAccount.AccountOldUrlLastUsed
	}
	if organizationAccount.OrganizationOldUrl != nil {
		organizationAccountSchema["organization_old_url"] = *organizationAccount.OrganizationOldUrl
	}
	if organizationAccount.OrganizationOldUrlSavedOn != nil {
		organizationAccountSchema["organization_old_url_saved_on"] = *organizationAccount.OrganizationOldUrlSavedOn
	}
	if organizationAccount.OrganizationOldUrlLastUsed != nil {
		organizationAccountSchema["organization_old_url_last_used"] = *organizationAccount.OrganizationOldUrlLastUsed
	}
	organizationAccountSchema["is_events_account"] = organizationAccount.IsEventsAccount
	organizationAccountSchema["is_organization_account"] = organizationAccount.IsOrganizationAccount
	return organizationAccountSchema
}

var _ = OrganizationAccountToSchema
