// Code generated by config model builder generator; DO NOT EDIT.

package datasourcemodel

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/datasources"
)

type ImageRepositoriesModel struct {
	ImageRepositories tfconfig.Variable `json:"image_repositories,omitempty"`
	In                tfconfig.Variable `json:"in,omitempty"`
	Like              tfconfig.Variable `json:"like,omitempty"`

	*config.DatasourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func ImageRepositories(
	datasourceName string,
) *ImageRepositoriesModel {
	i := &ImageRepositoriesModel{DatasourceModelMeta: config.DatasourceMeta(datasourceName, datasources.ImageRepositories)}
	return i
}

func ImageRepositoriesWithDefaultMeta() *ImageRepositoriesModel {
	i := &ImageRepositoriesModel{DatasourceModelMeta: config.DatasourceDefaultMeta(datasources.ImageRepositories)}
	return i
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (i *ImageRepositoriesModel) MarshalJSON() ([]byte, error) {
	type Alias ImageRepositoriesModel
	return json.Marshal(&struct {
		*Alias
		DependsOn                 []string                      `json:"depends_on,omitempty"`
		SingleAttributeWorkaround config.ReplacementPlaceholder `json:"single_attribute_workaround,omitempty"`
	}{
		Alias:                     (*Alias)(i),
		DependsOn:                 i.DependsOn(),
		SingleAttributeWorkaround: config.SnowflakeProviderConfigSingleAttributeWorkaround,
	})
}

func (i *ImageRepositoriesModel) WithDependsOn(values ...string) *ImageRepositoriesModel {
	i.SetDependsOn(values...)
	return i
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// image_repositories attribute type is not yet supported, so WithImageRepositories can't be generated

// in attribute type is not yet supported, so WithIn can't be generated

func (i *ImageRepositoriesModel) WithLike(like string) *ImageRepositoriesModel {
	i.Like = tfconfig.StringVariable(like)
	return i
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (i *ImageRepositoriesModel) WithImageRepositoriesValue(value tfconfig.Variable) *ImageRepositoriesModel {
	i.ImageRepositories = value
	return i
}

func (i *ImageRepositoriesModel) WithInValue(value tfconfig.Variable) *ImageRepositoriesModel {
	i.In = value
	return i
}

func (i *ImageRepositoriesModel) WithLikeValue(value tfconfig.Variable) *ImageRepositoriesModel {
	i.Like = value
	return i
}
