// Code generated by config model builder generator; DO NOT EDIT.

package datasourcemodel

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/datasources"
)

type UserProgrammaticAccessTokensModel struct {
	ForUser                      tfconfig.Variable `json:"for_user,omitempty"`
	UserProgrammaticAccessTokens tfconfig.Variable `json:"user_programmatic_access_tokens,omitempty"`

	*config.DatasourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func UserProgrammaticAccessTokens(
	datasourceName string,
	forUser string,
) *UserProgrammaticAccessTokensModel {
	u := &UserProgrammaticAccessTokensModel{DatasourceModelMeta: config.DatasourceMeta(datasourceName, datasources.UserProgrammaticAccessTokens)}
	u.WithForUser(forUser)
	return u
}

func UserProgrammaticAccessTokensWithDefaultMeta(
	forUser string,
) *UserProgrammaticAccessTokensModel {
	u := &UserProgrammaticAccessTokensModel{DatasourceModelMeta: config.DatasourceDefaultMeta(datasources.UserProgrammaticAccessTokens)}
	u.WithForUser(forUser)
	return u
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (u *UserProgrammaticAccessTokensModel) MarshalJSON() ([]byte, error) {
	type Alias UserProgrammaticAccessTokensModel
	return json.Marshal(&struct {
		*Alias
		DependsOn                 []string                      `json:"depends_on,omitempty"`
		SingleAttributeWorkaround config.ReplacementPlaceholder `json:"single_attribute_workaround,omitempty"`
	}{
		Alias:                     (*Alias)(u),
		DependsOn:                 u.DependsOn(),
		SingleAttributeWorkaround: config.SnowflakeProviderConfigSingleAttributeWorkaround,
	})
}

func (u *UserProgrammaticAccessTokensModel) WithDependsOn(values ...string) *UserProgrammaticAccessTokensModel {
	u.SetDependsOn(values...)
	return u
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (u *UserProgrammaticAccessTokensModel) WithForUser(forUser string) *UserProgrammaticAccessTokensModel {
	u.ForUser = tfconfig.StringVariable(forUser)
	return u
}

// user_programmatic_access_tokens attribute type is not yet supported, so WithUserProgrammaticAccessTokens can't be generated

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (u *UserProgrammaticAccessTokensModel) WithForUserValue(value tfconfig.Variable) *UserProgrammaticAccessTokensModel {
	u.ForUser = value
	return u
}

func (u *UserProgrammaticAccessTokensModel) WithUserProgrammaticAccessTokensValue(value tfconfig.Variable) *UserProgrammaticAccessTokensModel {
	u.UserProgrammaticAccessTokens = value
	return u
}
