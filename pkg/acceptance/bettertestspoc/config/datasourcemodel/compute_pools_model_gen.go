// Code generated by config model builder generator; DO NOT EDIT.

package datasourcemodel

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/datasources"
)

type ComputePoolsModel struct {
	ComputePools tfconfig.Variable `json:"compute_pools,omitempty"`
	Like         tfconfig.Variable `json:"like,omitempty"`
	Limit        tfconfig.Variable `json:"limit,omitempty"`
	StartsWith   tfconfig.Variable `json:"starts_with,omitempty"`
	WithDescribe tfconfig.Variable `json:"with_describe,omitempty"`

	*config.DatasourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func ComputePools(
	datasourceName string,
) *ComputePoolsModel {
	c := &ComputePoolsModel{DatasourceModelMeta: config.DatasourceMeta(datasourceName, datasources.ComputePools)}
	return c
}

func ComputePoolsWithDefaultMeta() *ComputePoolsModel {
	c := &ComputePoolsModel{DatasourceModelMeta: config.DatasourceDefaultMeta(datasources.ComputePools)}
	return c
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (c *ComputePoolsModel) MarshalJSON() ([]byte, error) {
	type Alias ComputePoolsModel
	return json.Marshal(&struct {
		*Alias
		DependsOn                 []string                      `json:"depends_on,omitempty"`
		SingleAttributeWorkaround config.ReplacementPlaceholder `json:"single_attribute_workaround,omitempty"`
	}{
		Alias:                     (*Alias)(c),
		DependsOn:                 c.DependsOn(),
		SingleAttributeWorkaround: config.SnowflakeProviderConfigSingleAttributeWorkaround,
	})
}

func (c *ComputePoolsModel) WithDependsOn(values ...string) *ComputePoolsModel {
	c.SetDependsOn(values...)
	return c
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// compute_pools attribute type is not yet supported, so WithComputePools can't be generated

func (c *ComputePoolsModel) WithLike(like string) *ComputePoolsModel {
	c.Like = tfconfig.StringVariable(like)
	return c
}

// limit attribute type is not yet supported, so WithLimit can't be generated

func (c *ComputePoolsModel) WithStartsWith(startsWith string) *ComputePoolsModel {
	c.StartsWith = tfconfig.StringVariable(startsWith)
	return c
}

func (c *ComputePoolsModel) WithWithDescribe(withDescribe bool) *ComputePoolsModel {
	c.WithDescribe = tfconfig.BoolVariable(withDescribe)
	return c
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (c *ComputePoolsModel) WithComputePoolsValue(value tfconfig.Variable) *ComputePoolsModel {
	c.ComputePools = value
	return c
}

func (c *ComputePoolsModel) WithLikeValue(value tfconfig.Variable) *ComputePoolsModel {
	c.Like = value
	return c
}

func (c *ComputePoolsModel) WithLimitValue(value tfconfig.Variable) *ComputePoolsModel {
	c.Limit = value
	return c
}

func (c *ComputePoolsModel) WithStartsWithValue(value tfconfig.Variable) *ComputePoolsModel {
	c.StartsWith = value
	return c
}

func (c *ComputePoolsModel) WithWithDescribeValue(value tfconfig.Variable) *ComputePoolsModel {
	c.WithDescribe = value
	return c
}
