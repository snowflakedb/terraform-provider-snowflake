// Code generated by config model builder generator; DO NOT EDIT.

package datasourcemodel

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/datasources"
)

type ProceduresModel struct {
	Database   tfconfig.Variable `json:"database,omitempty"`
	Schema     tfconfig.Variable `json:"schema,omitempty"`
	Procedures tfconfig.Variable `json:"procedures,omitempty"`

	*config.DatasourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func Procedures(
	datasourceName string,
	database string,
	schema string,
) *ProceduresModel {
	p := &ProceduresModel{DatasourceModelMeta: config.DatasourceMeta(datasourceName, datasources.Procedures)}
	p.WithDatabase(database)
	p.WithSchema(schema)
	return p
}

func ProceduresWithDefaultMeta(
	database string,
	schema string,
) *ProceduresModel {
	p := &ProceduresModel{DatasourceModelMeta: config.DatasourceDefaultMeta(datasources.Procedures)}
	p.WithDatabase(database)
	p.WithSchema(schema)
	return p
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (p *ProceduresModel) MarshalJSON() ([]byte, error) {
	type Alias ProceduresModel
	return json.Marshal(&struct {
		*Alias
		DependsOn                 []string                      `json:"depends_on,omitempty"`
		SingleAttributeWorkaround config.ReplacementPlaceholder `json:"single_attribute_workaround,omitempty"`
	}{
		Alias:                     (*Alias)(p),
		DependsOn:                 p.DependsOn(),
		SingleAttributeWorkaround: config.SnowflakeProviderConfigSingleAttributeWorkaround,
	})
}

func (p *ProceduresModel) WithDependsOn(values ...string) *ProceduresModel {
	p.SetDependsOn(values...)
	return p
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (p *ProceduresModel) WithDatabase(database string) *ProceduresModel {
	p.Database = tfconfig.StringVariable(database)
	return p
}

func (p *ProceduresModel) WithSchema(schema string) *ProceduresModel {
	p.Schema = tfconfig.StringVariable(schema)
	return p
}

// procedures attribute type is not yet supported, so WithProcedures can't be generated

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (p *ProceduresModel) WithDatabaseValue(value tfconfig.Variable) *ProceduresModel {
	p.Database = value
	return p
}

func (p *ProceduresModel) WithSchemaValue(value tfconfig.Variable) *ProceduresModel {
	p.Schema = value
	return p
}

func (p *ProceduresModel) WithProceduresValue(value tfconfig.Variable) *ProceduresModel {
	p.Procedures = value
	return p
}
