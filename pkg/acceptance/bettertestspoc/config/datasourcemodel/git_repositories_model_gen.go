// Code generated by config model builder generator; DO NOT EDIT.

package datasourcemodel

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/datasources"
)

type GitRepositoriesModel struct {
	GitRepositories tfconfig.Variable `json:"git_repositories,omitempty"`
	In              tfconfig.Variable `json:"in,omitempty"`
	Like            tfconfig.Variable `json:"like,omitempty"`
	Limit           tfconfig.Variable `json:"limit,omitempty"`
	WithDescribe    tfconfig.Variable `json:"with_describe,omitempty"`

	*config.DatasourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func GitRepositories(
	datasourceName string,
) *GitRepositoriesModel {
	g := &GitRepositoriesModel{DatasourceModelMeta: config.DatasourceMeta(datasourceName, datasources.GitRepositories)}
	return g
}

func GitRepositoriesWithDefaultMeta() *GitRepositoriesModel {
	g := &GitRepositoriesModel{DatasourceModelMeta: config.DatasourceDefaultMeta(datasources.GitRepositories)}
	return g
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (g *GitRepositoriesModel) MarshalJSON() ([]byte, error) {
	type Alias GitRepositoriesModel
	return json.Marshal(&struct {
		*Alias
		DependsOn                 []string                      `json:"depends_on,omitempty"`
		SingleAttributeWorkaround config.ReplacementPlaceholder `json:"single_attribute_workaround,omitempty"`
	}{
		Alias:                     (*Alias)(g),
		DependsOn:                 g.DependsOn(),
		SingleAttributeWorkaround: config.SnowflakeProviderConfigSingleAttributeWorkaround,
	})
}

func (g *GitRepositoriesModel) WithDependsOn(values ...string) *GitRepositoriesModel {
	g.SetDependsOn(values...)
	return g
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// git_repositories attribute type is not yet supported, so WithGitRepositories can't be generated

// in attribute type is not yet supported, so WithIn can't be generated

func (g *GitRepositoriesModel) WithLike(like string) *GitRepositoriesModel {
	g.Like = tfconfig.StringVariable(like)
	return g
}

// limit attribute type is not yet supported, so WithLimit can't be generated

func (g *GitRepositoriesModel) WithWithDescribe(withDescribe bool) *GitRepositoriesModel {
	g.WithDescribe = tfconfig.BoolVariable(withDescribe)
	return g
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (g *GitRepositoriesModel) WithGitRepositoriesValue(value tfconfig.Variable) *GitRepositoriesModel {
	g.GitRepositories = value
	return g
}

func (g *GitRepositoriesModel) WithInValue(value tfconfig.Variable) *GitRepositoriesModel {
	g.In = value
	return g
}

func (g *GitRepositoriesModel) WithLikeValue(value tfconfig.Variable) *GitRepositoriesModel {
	g.Like = value
	return g
}

func (g *GitRepositoriesModel) WithLimitValue(value tfconfig.Variable) *GitRepositoriesModel {
	g.Limit = value
	return g
}

func (g *GitRepositoriesModel) WithWithDescribeValue(value tfconfig.Variable) *GitRepositoriesModel {
	g.WithDescribe = value
	return g
}
