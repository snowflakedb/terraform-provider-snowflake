// Code generated by data source model builder generator (v0.1.0); DO NOT EDIT.

package datasourcemodel

import (
	"encoding/json"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/datasources"
	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"
)

type SemanticViewsModel struct {
	In            tfconfig.Variable `json:"in,omitempty"`
	Like          tfconfig.Variable `json:"like,omitempty"`
	Limit         tfconfig.Variable `json:"limit,omitempty"`
	SemanticViews tfconfig.Variable `json:"semantic_views,omitempty"`
	StartsWith    tfconfig.Variable `json:"starts_with,omitempty"`
	WithDescribe  tfconfig.Variable `json:"with_describe,omitempty"`

	*config.DatasourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func SemanticViews(
	datasourceName string,
) *SemanticViewsModel {
	s := &SemanticViewsModel{DatasourceModelMeta: config.DatasourceMeta(datasourceName, datasources.SemanticViews)}
	return s
}

func SemanticViewsWithDefaultMeta() *SemanticViewsModel {
	s := &SemanticViewsModel{DatasourceModelMeta: config.DatasourceDefaultMeta(datasources.SemanticViews)}
	return s
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (s *SemanticViewsModel) MarshalJSON() ([]byte, error) {
	type Alias SemanticViewsModel
	return json.Marshal(&struct {
		*Alias
		DependsOn                 []string                      `json:"depends_on,omitempty"`
		SingleAttributeWorkaround config.ReplacementPlaceholder `json:"single_attribute_workaround,omitempty"`
	}{
		Alias:                     (*Alias)(s),
		DependsOn:                 s.DependsOn(),
		SingleAttributeWorkaround: config.SnowflakeProviderConfigSingleAttributeWorkaround,
	})
}

func (s *SemanticViewsModel) WithDependsOn(values ...string) *SemanticViewsModel {
	s.SetDependsOn(values...)
	return s
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

// in attribute type is not yet supported, so WithIn can't be generated

func (s *SemanticViewsModel) WithLike(like string) *SemanticViewsModel {
	s.Like = tfconfig.StringVariable(like)
	return s
}

// limit attribute type is not yet supported, so WithLimit can't be generated

// semantic_views attribute type is not yet supported, so WithSemanticViews can't be generated

func (s *SemanticViewsModel) WithStartsWith(startsWith string) *SemanticViewsModel {
	s.StartsWith = tfconfig.StringVariable(startsWith)
	return s
}

func (s *SemanticViewsModel) WithWithDescribe(withDescribe bool) *SemanticViewsModel {
	s.WithDescribe = tfconfig.BoolVariable(withDescribe)
	return s
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (s *SemanticViewsModel) WithInValue(value tfconfig.Variable) *SemanticViewsModel {
	s.In = value
	return s
}

func (s *SemanticViewsModel) WithLikeValue(value tfconfig.Variable) *SemanticViewsModel {
	s.Like = value
	return s
}

func (s *SemanticViewsModel) WithLimitValue(value tfconfig.Variable) *SemanticViewsModel {
	s.Limit = value
	return s
}

func (s *SemanticViewsModel) WithSemanticViewsValue(value tfconfig.Variable) *SemanticViewsModel {
	s.SemanticViews = value
	return s
}

func (s *SemanticViewsModel) WithStartsWithValue(value tfconfig.Variable) *SemanticViewsModel {
	s.StartsWith = value
	return s
}

func (s *SemanticViewsModel) WithWithDescribeValue(value tfconfig.Variable) *SemanticViewsModel {
	s.WithDescribe = value
	return s
}
