// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type RowAccessPolicyModel struct {
	Database           tfconfig.Variable `json:"database,omitempty"`
	Schema             tfconfig.Variable `json:"schema,omitempty"`
	Name               tfconfig.Variable `json:"name,omitempty"`
	Argument           tfconfig.Variable `json:"argument,omitempty"`
	Body               tfconfig.Variable `json:"body,omitempty"`
	Comment            tfconfig.Variable `json:"comment,omitempty"`
	FullyQualifiedName tfconfig.Variable `json:"fully_qualified_name,omitempty"`

	// added manually
	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func RowAccessPolicy(
	resourceName string,
	database string,
	schema string,
	name string,
	argument []sdk.TableColumnSignature,
	body string,
) *RowAccessPolicyModel {
	r := &RowAccessPolicyModel{ResourceModelMeta: config.Meta(resourceName, resources.RowAccessPolicy)}
	r.WithDatabase(database)
	r.WithSchema(schema)
	r.WithName(name)
	r.WithArgument(argument)
	r.WithBody(body)
	return r
}

func RowAccessPolicyWithDefaultMeta(
	database string,
	schema string,
	name string,
	argument []sdk.TableColumnSignature,
	body string,
) *RowAccessPolicyModel {
	r := &RowAccessPolicyModel{ResourceModelMeta: config.DefaultMeta(resources.RowAccessPolicy)}
	r.WithDatabase(database)
	r.WithSchema(schema)
	r.WithName(name)
	r.WithArgument(argument)
	r.WithBody(body)
	return r
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (r *RowAccessPolicyModel) MarshalJSON() ([]byte, error) {
	type Alias RowAccessPolicyModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(r),
		DependsOn: r.DependsOn(),
	})
}

func (r *RowAccessPolicyModel) WithDependsOn(values ...string) *RowAccessPolicyModel {
	r.SetDependsOn(values...)
	return r
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (r *RowAccessPolicyModel) WithDatabase(database string) *RowAccessPolicyModel {
	r.Database = tfconfig.StringVariable(database)
	return r
}

func (r *RowAccessPolicyModel) WithSchema(schema string) *RowAccessPolicyModel {
	r.Schema = tfconfig.StringVariable(schema)
	return r
}

func (r *RowAccessPolicyModel) WithName(name string) *RowAccessPolicyModel {
	r.Name = tfconfig.StringVariable(name)
	return r
}

// argument attribute type is not yet supported, so WithArgument can't be generated

func (r *RowAccessPolicyModel) WithBody(body string) *RowAccessPolicyModel {
	r.Body = tfconfig.StringVariable(body)
	return r
}

func (r *RowAccessPolicyModel) WithComment(comment string) *RowAccessPolicyModel {
	r.Comment = tfconfig.StringVariable(comment)
	return r
}

func (r *RowAccessPolicyModel) WithFullyQualifiedName(fullyQualifiedName string) *RowAccessPolicyModel {
	r.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return r
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (r *RowAccessPolicyModel) WithDatabaseValue(value tfconfig.Variable) *RowAccessPolicyModel {
	r.Database = value
	return r
}

func (r *RowAccessPolicyModel) WithSchemaValue(value tfconfig.Variable) *RowAccessPolicyModel {
	r.Schema = value
	return r
}

func (r *RowAccessPolicyModel) WithNameValue(value tfconfig.Variable) *RowAccessPolicyModel {
	r.Name = value
	return r
}

func (r *RowAccessPolicyModel) WithArgumentValue(value tfconfig.Variable) *RowAccessPolicyModel {
	r.Argument = value
	return r
}

func (r *RowAccessPolicyModel) WithBodyValue(value tfconfig.Variable) *RowAccessPolicyModel {
	r.Body = value
	return r
}

func (r *RowAccessPolicyModel) WithCommentValue(value tfconfig.Variable) *RowAccessPolicyModel {
	r.Comment = value
	return r
}

func (r *RowAccessPolicyModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *RowAccessPolicyModel {
	r.FullyQualifiedName = value
	return r
}
