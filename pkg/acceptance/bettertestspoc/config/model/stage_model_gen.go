// Code generated by resource model builder generator (v0.1.0); DO NOT EDIT.

package model

import (
	"encoding/json"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"
)

type StageModel struct {
	Database           tfconfig.Variable `json:"database,omitempty"`
	Schema             tfconfig.Variable `json:"schema,omitempty"`
	Name               tfconfig.Variable `json:"name,omitempty"`
	AwsExternalId      tfconfig.Variable `json:"aws_external_id,omitempty"`
	Comment            tfconfig.Variable `json:"comment,omitempty"`
	CopyOptions        tfconfig.Variable `json:"copy_options,omitempty"`
	Credentials        tfconfig.Variable `json:"credentials,omitempty"`
	Directory          tfconfig.Variable `json:"directory,omitempty"`
	Encryption         tfconfig.Variable `json:"encryption,omitempty"`
	FileFormat         tfconfig.Variable `json:"file_format,omitempty"`
	FullyQualifiedName tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	SnowflakeIamUser   tfconfig.Variable `json:"snowflake_iam_user,omitempty"`
	StorageIntegration tfconfig.Variable `json:"storage_integration,omitempty"`
	Tag                tfconfig.Variable `json:"tag,omitempty"`
	Url                tfconfig.Variable `json:"url,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func Stage(
	resourceName string,
	database string,
	schema string,
	name string,
) *StageModel {
	s := &StageModel{ResourceModelMeta: config.Meta(resourceName, resources.Stage)}
	s.WithDatabase(database)
	s.WithSchema(schema)
	s.WithName(name)
	return s
}

func StageWithDefaultMeta(
	database string,
	schema string,
	name string,
) *StageModel {
	s := &StageModel{ResourceModelMeta: config.DefaultMeta(resources.Stage)}
	s.WithDatabase(database)
	s.WithSchema(schema)
	s.WithName(name)
	return s
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (s *StageModel) MarshalJSON() ([]byte, error) {
	type Alias StageModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(s),
		DependsOn: s.DependsOn(),
	})
}

func (s *StageModel) WithDependsOn(values ...string) *StageModel {
	s.SetDependsOn(values...)
	return s
}

func (s *StageModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *StageModel {
	s.DynamicBlock = dynamicBlock
	return s
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (s *StageModel) WithDatabase(database string) *StageModel {
	s.Database = tfconfig.StringVariable(database)
	return s
}

func (s *StageModel) WithSchema(schema string) *StageModel {
	s.Schema = tfconfig.StringVariable(schema)
	return s
}

func (s *StageModel) WithName(name string) *StageModel {
	s.Name = tfconfig.StringVariable(name)
	return s
}

func (s *StageModel) WithAwsExternalId(awsExternalId string) *StageModel {
	s.AwsExternalId = tfconfig.StringVariable(awsExternalId)
	return s
}

func (s *StageModel) WithComment(comment string) *StageModel {
	s.Comment = tfconfig.StringVariable(comment)
	return s
}

func (s *StageModel) WithCopyOptions(copyOptions string) *StageModel {
	s.CopyOptions = tfconfig.StringVariable(copyOptions)
	return s
}

func (s *StageModel) WithCredentials(credentials string) *StageModel {
	s.Credentials = tfconfig.StringVariable(credentials)
	return s
}

func (s *StageModel) WithDirectory(directory string) *StageModel {
	s.Directory = tfconfig.StringVariable(directory)
	return s
}

func (s *StageModel) WithEncryption(encryption string) *StageModel {
	s.Encryption = tfconfig.StringVariable(encryption)
	return s
}

func (s *StageModel) WithFileFormat(fileFormat string) *StageModel {
	s.FileFormat = tfconfig.StringVariable(fileFormat)
	return s
}

func (s *StageModel) WithFullyQualifiedName(fullyQualifiedName string) *StageModel {
	s.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return s
}

func (s *StageModel) WithSnowflakeIamUser(snowflakeIamUser string) *StageModel {
	s.SnowflakeIamUser = tfconfig.StringVariable(snowflakeIamUser)
	return s
}

func (s *StageModel) WithStorageIntegration(storageIntegration string) *StageModel {
	s.StorageIntegration = tfconfig.StringVariable(storageIntegration)
	return s
}

// tag attribute type is not yet supported, so WithTag can't be generated

func (s *StageModel) WithUrl(url string) *StageModel {
	s.Url = tfconfig.StringVariable(url)
	return s
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (s *StageModel) WithDatabaseValue(value tfconfig.Variable) *StageModel {
	s.Database = value
	return s
}

func (s *StageModel) WithSchemaValue(value tfconfig.Variable) *StageModel {
	s.Schema = value
	return s
}

func (s *StageModel) WithNameValue(value tfconfig.Variable) *StageModel {
	s.Name = value
	return s
}

func (s *StageModel) WithAwsExternalIdValue(value tfconfig.Variable) *StageModel {
	s.AwsExternalId = value
	return s
}

func (s *StageModel) WithCommentValue(value tfconfig.Variable) *StageModel {
	s.Comment = value
	return s
}

func (s *StageModel) WithCopyOptionsValue(value tfconfig.Variable) *StageModel {
	s.CopyOptions = value
	return s
}

func (s *StageModel) WithCredentialsValue(value tfconfig.Variable) *StageModel {
	s.Credentials = value
	return s
}

func (s *StageModel) WithDirectoryValue(value tfconfig.Variable) *StageModel {
	s.Directory = value
	return s
}

func (s *StageModel) WithEncryptionValue(value tfconfig.Variable) *StageModel {
	s.Encryption = value
	return s
}

func (s *StageModel) WithFileFormatValue(value tfconfig.Variable) *StageModel {
	s.FileFormat = value
	return s
}

func (s *StageModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *StageModel {
	s.FullyQualifiedName = value
	return s
}

func (s *StageModel) WithSnowflakeIamUserValue(value tfconfig.Variable) *StageModel {
	s.SnowflakeIamUser = value
	return s
}

func (s *StageModel) WithStorageIntegrationValue(value tfconfig.Variable) *StageModel {
	s.StorageIntegration = value
	return s
}

func (s *StageModel) WithTagValue(value tfconfig.Variable) *StageModel {
	s.Tag = value
	return s
}

func (s *StageModel) WithUrlValue(value tfconfig.Variable) *StageModel {
	s.Url = value
	return s
}
