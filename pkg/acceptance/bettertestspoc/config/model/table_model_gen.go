// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type TableModel struct {
	Database                tfconfig.Variable `json:"database,omitempty"`
	Schema                  tfconfig.Variable `json:"schema,omitempty"`
	Name                    tfconfig.Variable `json:"name,omitempty"`
	ChangeTracking          tfconfig.Variable `json:"change_tracking,omitempty"`
	ClusterBy               tfconfig.Variable `json:"cluster_by,omitempty"`
	Column                  tfconfig.Variable `json:"column,omitempty"`
	Comment                 tfconfig.Variable `json:"comment,omitempty"`
	DataRetentionTimeInDays tfconfig.Variable `json:"data_retention_time_in_days,omitempty"`
	FullyQualifiedName      tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	Owner                   tfconfig.Variable `json:"owner,omitempty"`
	PrimaryKey              tfconfig.Variable `json:"primary_key,omitempty"`
	Tag                     tfconfig.Variable `json:"tag,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func Table(
	resourceName string,
	database string,
	schema string,
	name string,
	column []sdk.TableColumnSignature,
) *TableModel {
	t := &TableModel{ResourceModelMeta: config.Meta(resourceName, resources.Table)}
	t.WithDatabase(database)
	t.WithSchema(schema)
	t.WithName(name)
	t.WithColumn(column)
	return t
}

func TableWithDefaultMeta(
	database string,
	schema string,
	name string,
	column []sdk.TableColumnSignature,
) *TableModel {
	t := &TableModel{ResourceModelMeta: config.DefaultMeta(resources.Table)}
	t.WithDatabase(database)
	t.WithSchema(schema)
	t.WithName(name)
	t.WithColumn(column)
	return t
}

///////////////////////////////////////////////////////
// set proper json marshalling and handle depends on //
///////////////////////////////////////////////////////

func (t *TableModel) MarshalJSON() ([]byte, error) {
	type Alias TableModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(t),
		DependsOn: t.DependsOn(),
	})
}

func (t *TableModel) WithDependsOn(values ...string) *TableModel {
	t.SetDependsOn(values...)
	return t
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (t *TableModel) WithDatabase(database string) *TableModel {
	t.Database = tfconfig.StringVariable(database)
	return t
}

func (t *TableModel) WithSchema(schema string) *TableModel {
	t.Schema = tfconfig.StringVariable(schema)
	return t
}

func (t *TableModel) WithName(name string) *TableModel {
	t.Name = tfconfig.StringVariable(name)
	return t
}

func (t *TableModel) WithChangeTracking(changeTracking bool) *TableModel {
	t.ChangeTracking = tfconfig.BoolVariable(changeTracking)
	return t
}

// cluster_by attribute type is not yet supported, so WithClusterBy can't be generated

// column attribute type is not yet supported, so WithColumn can't be generated

func (t *TableModel) WithComment(comment string) *TableModel {
	t.Comment = tfconfig.StringVariable(comment)
	return t
}

func (t *TableModel) WithDataRetentionTimeInDays(dataRetentionTimeInDays int) *TableModel {
	t.DataRetentionTimeInDays = tfconfig.IntegerVariable(dataRetentionTimeInDays)
	return t
}

func (t *TableModel) WithFullyQualifiedName(fullyQualifiedName string) *TableModel {
	t.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return t
}

func (t *TableModel) WithOwner(owner string) *TableModel {
	t.Owner = tfconfig.StringVariable(owner)
	return t
}

// primary_key attribute type is not yet supported, so WithPrimaryKey can't be generated

// tag attribute type is not yet supported, so WithTag can't be generated

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (t *TableModel) WithDatabaseValue(value tfconfig.Variable) *TableModel {
	t.Database = value
	return t
}

func (t *TableModel) WithSchemaValue(value tfconfig.Variable) *TableModel {
	t.Schema = value
	return t
}

func (t *TableModel) WithNameValue(value tfconfig.Variable) *TableModel {
	t.Name = value
	return t
}

func (t *TableModel) WithChangeTrackingValue(value tfconfig.Variable) *TableModel {
	t.ChangeTracking = value
	return t
}

func (t *TableModel) WithClusterByValue(value tfconfig.Variable) *TableModel {
	t.ClusterBy = value
	return t
}

func (t *TableModel) WithColumnValue(value tfconfig.Variable) *TableModel {
	t.Column = value
	return t
}

func (t *TableModel) WithCommentValue(value tfconfig.Variable) *TableModel {
	t.Comment = value
	return t
}

func (t *TableModel) WithDataRetentionTimeInDaysValue(value tfconfig.Variable) *TableModel {
	t.DataRetentionTimeInDays = value
	return t
}

func (t *TableModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *TableModel {
	t.FullyQualifiedName = value
	return t
}

func (t *TableModel) WithOwnerValue(value tfconfig.Variable) *TableModel {
	t.Owner = value
	return t
}

func (t *TableModel) WithPrimaryKeyValue(value tfconfig.Variable) *TableModel {
	t.PrimaryKey = value
	return t
}

func (t *TableModel) WithTagValue(value tfconfig.Variable) *TableModel {
	t.Tag = value
	return t
}
