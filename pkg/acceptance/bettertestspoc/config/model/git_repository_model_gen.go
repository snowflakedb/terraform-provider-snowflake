// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type GitRepositoryModel struct {
	Database           tfconfig.Variable `json:"database,omitempty"`
	Schema             tfconfig.Variable `json:"schema,omitempty"`
	Name               tfconfig.Variable `json:"name,omitempty"`
	ApiIntegration     tfconfig.Variable `json:"api_integration,omitempty"`
	Comment            tfconfig.Variable `json:"comment,omitempty"`
	FullyQualifiedName tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	GitCredentials     tfconfig.Variable `json:"git_credentials,omitempty"`
	Origin             tfconfig.Variable `json:"origin,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func GitRepository(
	resourceName string,
	database string,
	schema string,
	name string,
	apiIntegration string,
	origin string,
) *GitRepositoryModel {
	g := &GitRepositoryModel{ResourceModelMeta: config.Meta(resourceName, resources.GitRepository)}
	g.WithDatabase(database)
	g.WithSchema(schema)
	g.WithName(name)
	g.WithApiIntegration(apiIntegration)
	g.WithOrigin(origin)
	return g
}

func GitRepositoryWithDefaultMeta(
	database string,
	schema string,
	name string,
	apiIntegration string,
	origin string,
) *GitRepositoryModel {
	g := &GitRepositoryModel{ResourceModelMeta: config.DefaultMeta(resources.GitRepository)}
	g.WithDatabase(database)
	g.WithSchema(schema)
	g.WithName(name)
	g.WithApiIntegration(apiIntegration)
	g.WithOrigin(origin)
	return g
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (g *GitRepositoryModel) MarshalJSON() ([]byte, error) {
	type Alias GitRepositoryModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(g),
		DependsOn: g.DependsOn(),
	})
}

func (g *GitRepositoryModel) WithDependsOn(values ...string) *GitRepositoryModel {
	g.SetDependsOn(values...)
	return g
}

func (g *GitRepositoryModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *GitRepositoryModel {
	g.DynamicBlock = dynamicBlock
	return g
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (g *GitRepositoryModel) WithDatabase(database string) *GitRepositoryModel {
	g.Database = tfconfig.StringVariable(database)
	return g
}

func (g *GitRepositoryModel) WithSchema(schema string) *GitRepositoryModel {
	g.Schema = tfconfig.StringVariable(schema)
	return g
}

func (g *GitRepositoryModel) WithName(name string) *GitRepositoryModel {
	g.Name = tfconfig.StringVariable(name)
	return g
}

func (g *GitRepositoryModel) WithApiIntegration(apiIntegration string) *GitRepositoryModel {
	g.ApiIntegration = tfconfig.StringVariable(apiIntegration)
	return g
}

func (g *GitRepositoryModel) WithComment(comment string) *GitRepositoryModel {
	g.Comment = tfconfig.StringVariable(comment)
	return g
}

func (g *GitRepositoryModel) WithFullyQualifiedName(fullyQualifiedName string) *GitRepositoryModel {
	g.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return g
}

func (g *GitRepositoryModel) WithGitCredentials(gitCredentials string) *GitRepositoryModel {
	g.GitCredentials = tfconfig.StringVariable(gitCredentials)
	return g
}

func (g *GitRepositoryModel) WithOrigin(origin string) *GitRepositoryModel {
	g.Origin = tfconfig.StringVariable(origin)
	return g
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (g *GitRepositoryModel) WithDatabaseValue(value tfconfig.Variable) *GitRepositoryModel {
	g.Database = value
	return g
}

func (g *GitRepositoryModel) WithSchemaValue(value tfconfig.Variable) *GitRepositoryModel {
	g.Schema = value
	return g
}

func (g *GitRepositoryModel) WithNameValue(value tfconfig.Variable) *GitRepositoryModel {
	g.Name = value
	return g
}

func (g *GitRepositoryModel) WithApiIntegrationValue(value tfconfig.Variable) *GitRepositoryModel {
	g.ApiIntegration = value
	return g
}

func (g *GitRepositoryModel) WithCommentValue(value tfconfig.Variable) *GitRepositoryModel {
	g.Comment = value
	return g
}

func (g *GitRepositoryModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *GitRepositoryModel {
	g.FullyQualifiedName = value
	return g
}

func (g *GitRepositoryModel) WithGitCredentialsValue(value tfconfig.Variable) *GitRepositoryModel {
	g.GitCredentials = value
	return g
}

func (g *GitRepositoryModel) WithOriginValue(value tfconfig.Variable) *GitRepositoryModel {
	g.Origin = value
	return g
}
