// Code generated by resource model builder generator (v0.1.0); DO NOT EDIT.

package model

import (
	"encoding/json"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"
)

type DynamicTableModel struct {
	Database            tfconfig.Variable `json:"database,omitempty"`
	Schema              tfconfig.Variable `json:"schema,omitempty"`
	Name                tfconfig.Variable `json:"name,omitempty"`
	AutomaticClustering tfconfig.Variable `json:"automatic_clustering,omitempty"`
	Bytes               tfconfig.Variable `json:"bytes,omitempty"`
	ClusterBy           tfconfig.Variable `json:"cluster_by,omitempty"`
	Comment             tfconfig.Variable `json:"comment,omitempty"`
	CreatedOn           tfconfig.Variable `json:"created_on,omitempty"`
	DataTimestamp       tfconfig.Variable `json:"data_timestamp,omitempty"`
	FullyQualifiedName  tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	Initialize          tfconfig.Variable `json:"initialize,omitempty"`
	IsClone             tfconfig.Variable `json:"is_clone,omitempty"`
	IsReplica           tfconfig.Variable `json:"is_replica,omitempty"`
	LastSuspendedOn     tfconfig.Variable `json:"last_suspended_on,omitempty"`
	OrReplace           tfconfig.Variable `json:"or_replace,omitempty"`
	Owner               tfconfig.Variable `json:"owner,omitempty"`
	Query               tfconfig.Variable `json:"query,omitempty"`
	RefreshMode         tfconfig.Variable `json:"refresh_mode,omitempty"`
	RefreshModeReason   tfconfig.Variable `json:"refresh_mode_reason,omitempty"`
	Rows                tfconfig.Variable `json:"rows,omitempty"`
	SchedulingState     tfconfig.Variable `json:"scheduling_state,omitempty"`
	TargetLag           tfconfig.Variable `json:"target_lag,omitempty"`
	Warehouse           tfconfig.Variable `json:"warehouse,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func DynamicTable(
	resourceName string,
	database string,
	schema string,
	name string,
	query string,
	targetLag []string,
	warehouse string,
) *DynamicTableModel {
	d := &DynamicTableModel{ResourceModelMeta: config.Meta(resourceName, resources.DynamicTable)}
	d.WithDatabase(database)
	d.WithSchema(schema)
	d.WithName(name)
	d.WithQuery(query)
	d.WithTargetLag(targetLag)
	d.WithWarehouse(warehouse)
	return d
}

func DynamicTableWithDefaultMeta(
	database string,
	schema string,
	name string,
	query string,
	targetLag []string,
	warehouse string,
) *DynamicTableModel {
	d := &DynamicTableModel{ResourceModelMeta: config.DefaultMeta(resources.DynamicTable)}
	d.WithDatabase(database)
	d.WithSchema(schema)
	d.WithName(name)
	d.WithQuery(query)
	d.WithTargetLag(targetLag)
	d.WithWarehouse(warehouse)
	return d
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (d *DynamicTableModel) MarshalJSON() ([]byte, error) {
	type Alias DynamicTableModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(d),
		DependsOn: d.DependsOn(),
	})
}

func (d *DynamicTableModel) WithDependsOn(values ...string) *DynamicTableModel {
	d.SetDependsOn(values...)
	return d
}

func (d *DynamicTableModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *DynamicTableModel {
	d.DynamicBlock = dynamicBlock
	return d
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (d *DynamicTableModel) WithDatabase(database string) *DynamicTableModel {
	d.Database = tfconfig.StringVariable(database)
	return d
}

func (d *DynamicTableModel) WithSchema(schema string) *DynamicTableModel {
	d.Schema = tfconfig.StringVariable(schema)
	return d
}

func (d *DynamicTableModel) WithName(name string) *DynamicTableModel {
	d.Name = tfconfig.StringVariable(name)
	return d
}

func (d *DynamicTableModel) WithAutomaticClustering(automaticClustering bool) *DynamicTableModel {
	d.AutomaticClustering = tfconfig.BoolVariable(automaticClustering)
	return d
}

func (d *DynamicTableModel) WithBytes(bytes int) *DynamicTableModel {
	d.Bytes = tfconfig.IntegerVariable(bytes)
	return d
}

func (d *DynamicTableModel) WithClusterBy(clusterBy string) *DynamicTableModel {
	d.ClusterBy = tfconfig.StringVariable(clusterBy)
	return d
}

func (d *DynamicTableModel) WithComment(comment string) *DynamicTableModel {
	d.Comment = tfconfig.StringVariable(comment)
	return d
}

func (d *DynamicTableModel) WithCreatedOn(createdOn string) *DynamicTableModel {
	d.CreatedOn = tfconfig.StringVariable(createdOn)
	return d
}

func (d *DynamicTableModel) WithDataTimestamp(dataTimestamp string) *DynamicTableModel {
	d.DataTimestamp = tfconfig.StringVariable(dataTimestamp)
	return d
}

func (d *DynamicTableModel) WithFullyQualifiedName(fullyQualifiedName string) *DynamicTableModel {
	d.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return d
}

func (d *DynamicTableModel) WithInitialize(initialize string) *DynamicTableModel {
	d.Initialize = tfconfig.StringVariable(initialize)
	return d
}

func (d *DynamicTableModel) WithIsClone(isClone bool) *DynamicTableModel {
	d.IsClone = tfconfig.BoolVariable(isClone)
	return d
}

func (d *DynamicTableModel) WithIsReplica(isReplica bool) *DynamicTableModel {
	d.IsReplica = tfconfig.BoolVariable(isReplica)
	return d
}

func (d *DynamicTableModel) WithLastSuspendedOn(lastSuspendedOn string) *DynamicTableModel {
	d.LastSuspendedOn = tfconfig.StringVariable(lastSuspendedOn)
	return d
}

func (d *DynamicTableModel) WithOrReplace(orReplace bool) *DynamicTableModel {
	d.OrReplace = tfconfig.BoolVariable(orReplace)
	return d
}

func (d *DynamicTableModel) WithOwner(owner string) *DynamicTableModel {
	d.Owner = tfconfig.StringVariable(owner)
	return d
}

func (d *DynamicTableModel) WithQuery(query string) *DynamicTableModel {
	d.Query = tfconfig.StringVariable(query)
	return d
}

func (d *DynamicTableModel) WithRefreshMode(refreshMode string) *DynamicTableModel {
	d.RefreshMode = tfconfig.StringVariable(refreshMode)
	return d
}

func (d *DynamicTableModel) WithRefreshModeReason(refreshModeReason string) *DynamicTableModel {
	d.RefreshModeReason = tfconfig.StringVariable(refreshModeReason)
	return d
}

func (d *DynamicTableModel) WithRows(rows int) *DynamicTableModel {
	d.Rows = tfconfig.IntegerVariable(rows)
	return d
}

func (d *DynamicTableModel) WithSchedulingState(schedulingState string) *DynamicTableModel {
	d.SchedulingState = tfconfig.StringVariable(schedulingState)
	return d
}

// target_lag attribute type is not yet supported, so WithTargetLag can't be generated

func (d *DynamicTableModel) WithWarehouse(warehouse string) *DynamicTableModel {
	d.Warehouse = tfconfig.StringVariable(warehouse)
	return d
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (d *DynamicTableModel) WithDatabaseValue(value tfconfig.Variable) *DynamicTableModel {
	d.Database = value
	return d
}

func (d *DynamicTableModel) WithSchemaValue(value tfconfig.Variable) *DynamicTableModel {
	d.Schema = value
	return d
}

func (d *DynamicTableModel) WithNameValue(value tfconfig.Variable) *DynamicTableModel {
	d.Name = value
	return d
}

func (d *DynamicTableModel) WithAutomaticClusteringValue(value tfconfig.Variable) *DynamicTableModel {
	d.AutomaticClustering = value
	return d
}

func (d *DynamicTableModel) WithBytesValue(value tfconfig.Variable) *DynamicTableModel {
	d.Bytes = value
	return d
}

func (d *DynamicTableModel) WithClusterByValue(value tfconfig.Variable) *DynamicTableModel {
	d.ClusterBy = value
	return d
}

func (d *DynamicTableModel) WithCommentValue(value tfconfig.Variable) *DynamicTableModel {
	d.Comment = value
	return d
}

func (d *DynamicTableModel) WithCreatedOnValue(value tfconfig.Variable) *DynamicTableModel {
	d.CreatedOn = value
	return d
}

func (d *DynamicTableModel) WithDataTimestampValue(value tfconfig.Variable) *DynamicTableModel {
	d.DataTimestamp = value
	return d
}

func (d *DynamicTableModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *DynamicTableModel {
	d.FullyQualifiedName = value
	return d
}

func (d *DynamicTableModel) WithInitializeValue(value tfconfig.Variable) *DynamicTableModel {
	d.Initialize = value
	return d
}

func (d *DynamicTableModel) WithIsCloneValue(value tfconfig.Variable) *DynamicTableModel {
	d.IsClone = value
	return d
}

func (d *DynamicTableModel) WithIsReplicaValue(value tfconfig.Variable) *DynamicTableModel {
	d.IsReplica = value
	return d
}

func (d *DynamicTableModel) WithLastSuspendedOnValue(value tfconfig.Variable) *DynamicTableModel {
	d.LastSuspendedOn = value
	return d
}

func (d *DynamicTableModel) WithOrReplaceValue(value tfconfig.Variable) *DynamicTableModel {
	d.OrReplace = value
	return d
}

func (d *DynamicTableModel) WithOwnerValue(value tfconfig.Variable) *DynamicTableModel {
	d.Owner = value
	return d
}

func (d *DynamicTableModel) WithQueryValue(value tfconfig.Variable) *DynamicTableModel {
	d.Query = value
	return d
}

func (d *DynamicTableModel) WithRefreshModeValue(value tfconfig.Variable) *DynamicTableModel {
	d.RefreshMode = value
	return d
}

func (d *DynamicTableModel) WithRefreshModeReasonValue(value tfconfig.Variable) *DynamicTableModel {
	d.RefreshModeReason = value
	return d
}

func (d *DynamicTableModel) WithRowsValue(value tfconfig.Variable) *DynamicTableModel {
	d.Rows = value
	return d
}

func (d *DynamicTableModel) WithSchedulingStateValue(value tfconfig.Variable) *DynamicTableModel {
	d.SchedulingState = value
	return d
}

func (d *DynamicTableModel) WithTargetLagValue(value tfconfig.Variable) *DynamicTableModel {
	d.TargetLag = value
	return d
}

func (d *DynamicTableModel) WithWarehouseValue(value tfconfig.Variable) *DynamicTableModel {
	d.Warehouse = value
	return d
}
