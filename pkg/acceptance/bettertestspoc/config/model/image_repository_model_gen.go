// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type ImageRepositoryModel struct {
	Database           tfconfig.Variable `json:"database,omitempty"`
	Schema             tfconfig.Variable `json:"schema,omitempty"`
	Name               tfconfig.Variable `json:"name,omitempty"`
	Comment            tfconfig.Variable `json:"comment,omitempty"`
	FullyQualifiedName tfconfig.Variable `json:"fully_qualified_name,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func ImageRepository(
	resourceName string,
	database string,
	schema string,
	name string,
) *ImageRepositoryModel {
	i := &ImageRepositoryModel{ResourceModelMeta: config.Meta(resourceName, resources.ImageRepository)}
	i.WithDatabase(database)
	i.WithSchema(schema)
	i.WithName(name)
	return i
}

func ImageRepositoryWithDefaultMeta(
	database string,
	schema string,
	name string,
) *ImageRepositoryModel {
	i := &ImageRepositoryModel{ResourceModelMeta: config.DefaultMeta(resources.ImageRepository)}
	i.WithDatabase(database)
	i.WithSchema(schema)
	i.WithName(name)
	return i
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (i *ImageRepositoryModel) MarshalJSON() ([]byte, error) {
	type Alias ImageRepositoryModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(i),
		DependsOn: i.DependsOn(),
	})
}

func (i *ImageRepositoryModel) WithDependsOn(values ...string) *ImageRepositoryModel {
	i.SetDependsOn(values...)
	return i
}

func (i *ImageRepositoryModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *ImageRepositoryModel {
	i.DynamicBlock = dynamicBlock
	return i
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (i *ImageRepositoryModel) WithDatabase(database string) *ImageRepositoryModel {
	i.Database = tfconfig.StringVariable(database)
	return i
}

func (i *ImageRepositoryModel) WithSchema(schema string) *ImageRepositoryModel {
	i.Schema = tfconfig.StringVariable(schema)
	return i
}

func (i *ImageRepositoryModel) WithName(name string) *ImageRepositoryModel {
	i.Name = tfconfig.StringVariable(name)
	return i
}

func (i *ImageRepositoryModel) WithComment(comment string) *ImageRepositoryModel {
	i.Comment = tfconfig.StringVariable(comment)
	return i
}

func (i *ImageRepositoryModel) WithFullyQualifiedName(fullyQualifiedName string) *ImageRepositoryModel {
	i.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return i
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (i *ImageRepositoryModel) WithDatabaseValue(value tfconfig.Variable) *ImageRepositoryModel {
	i.Database = value
	return i
}

func (i *ImageRepositoryModel) WithSchemaValue(value tfconfig.Variable) *ImageRepositoryModel {
	i.Schema = value
	return i
}

func (i *ImageRepositoryModel) WithNameValue(value tfconfig.Variable) *ImageRepositoryModel {
	i.Name = value
	return i
}

func (i *ImageRepositoryModel) WithCommentValue(value tfconfig.Variable) *ImageRepositoryModel {
	i.Comment = value
	return i
}

func (i *ImageRepositoryModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *ImageRepositoryModel {
	i.FullyQualifiedName = value
	return i
}
