// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type ComputePoolModel struct {
	Name               tfconfig.Variable `json:"name,omitempty"`
	AutoResume         tfconfig.Variable `json:"auto_resume,omitempty"`
	AutoSuspendSecs    tfconfig.Variable `json:"auto_suspend_secs,omitempty"`
	Comment            tfconfig.Variable `json:"comment,omitempty"`
	ForApplication     tfconfig.Variable `json:"for_application,omitempty"`
	FullyQualifiedName tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	InitiallySuspended tfconfig.Variable `json:"initially_suspended,omitempty"`
	InstanceFamily     tfconfig.Variable `json:"instance_family,omitempty"`
	MaxNodes           tfconfig.Variable `json:"max_nodes,omitempty"`
	MinNodes           tfconfig.Variable `json:"min_nodes,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func ComputePool(
	resourceName string,
	name string,
	instanceFamily string,
	maxNodes int,
	minNodes int,
) *ComputePoolModel {
	c := &ComputePoolModel{ResourceModelMeta: config.Meta(resourceName, resources.ComputePool)}
	c.WithName(name)
	c.WithInstanceFamily(instanceFamily)
	c.WithMaxNodes(maxNodes)
	c.WithMinNodes(minNodes)
	return c
}

func ComputePoolWithDefaultMeta(
	name string,
	instanceFamily string,
	maxNodes int,
	minNodes int,
) *ComputePoolModel {
	c := &ComputePoolModel{ResourceModelMeta: config.DefaultMeta(resources.ComputePool)}
	c.WithName(name)
	c.WithInstanceFamily(instanceFamily)
	c.WithMaxNodes(maxNodes)
	c.WithMinNodes(minNodes)
	return c
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (c *ComputePoolModel) MarshalJSON() ([]byte, error) {
	type Alias ComputePoolModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(c),
		DependsOn: c.DependsOn(),
	})
}

func (c *ComputePoolModel) WithDependsOn(values ...string) *ComputePoolModel {
	c.SetDependsOn(values...)
	return c
}

func (c *ComputePoolModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *ComputePoolModel {
	c.DynamicBlock = dynamicBlock
	return c
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (c *ComputePoolModel) WithName(name string) *ComputePoolModel {
	c.Name = tfconfig.StringVariable(name)
	return c
}

func (c *ComputePoolModel) WithAutoResume(autoResume string) *ComputePoolModel {
	c.AutoResume = tfconfig.StringVariable(autoResume)
	return c
}

func (c *ComputePoolModel) WithAutoSuspendSecs(autoSuspendSecs int) *ComputePoolModel {
	c.AutoSuspendSecs = tfconfig.IntegerVariable(autoSuspendSecs)
	return c
}

func (c *ComputePoolModel) WithComment(comment string) *ComputePoolModel {
	c.Comment = tfconfig.StringVariable(comment)
	return c
}

func (c *ComputePoolModel) WithForApplication(forApplication string) *ComputePoolModel {
	c.ForApplication = tfconfig.StringVariable(forApplication)
	return c
}

func (c *ComputePoolModel) WithFullyQualifiedName(fullyQualifiedName string) *ComputePoolModel {
	c.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return c
}

func (c *ComputePoolModel) WithInitiallySuspended(initiallySuspended string) *ComputePoolModel {
	c.InitiallySuspended = tfconfig.StringVariable(initiallySuspended)
	return c
}

func (c *ComputePoolModel) WithInstanceFamily(instanceFamily string) *ComputePoolModel {
	c.InstanceFamily = tfconfig.StringVariable(instanceFamily)
	return c
}

func (c *ComputePoolModel) WithMaxNodes(maxNodes int) *ComputePoolModel {
	c.MaxNodes = tfconfig.IntegerVariable(maxNodes)
	return c
}

func (c *ComputePoolModel) WithMinNodes(minNodes int) *ComputePoolModel {
	c.MinNodes = tfconfig.IntegerVariable(minNodes)
	return c
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (c *ComputePoolModel) WithNameValue(value tfconfig.Variable) *ComputePoolModel {
	c.Name = value
	return c
}

func (c *ComputePoolModel) WithAutoResumeValue(value tfconfig.Variable) *ComputePoolModel {
	c.AutoResume = value
	return c
}

func (c *ComputePoolModel) WithAutoSuspendSecsValue(value tfconfig.Variable) *ComputePoolModel {
	c.AutoSuspendSecs = value
	return c
}

func (c *ComputePoolModel) WithCommentValue(value tfconfig.Variable) *ComputePoolModel {
	c.Comment = value
	return c
}

func (c *ComputePoolModel) WithForApplicationValue(value tfconfig.Variable) *ComputePoolModel {
	c.ForApplication = value
	return c
}

func (c *ComputePoolModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *ComputePoolModel {
	c.FullyQualifiedName = value
	return c
}

func (c *ComputePoolModel) WithInitiallySuspendedValue(value tfconfig.Variable) *ComputePoolModel {
	c.InitiallySuspended = value
	return c
}

func (c *ComputePoolModel) WithInstanceFamilyValue(value tfconfig.Variable) *ComputePoolModel {
	c.InstanceFamily = value
	return c
}

func (c *ComputePoolModel) WithMaxNodesValue(value tfconfig.Variable) *ComputePoolModel {
	c.MaxNodes = value
	return c
}

func (c *ComputePoolModel) WithMinNodesValue(value tfconfig.Variable) *ComputePoolModel {
	c.MinNodes = value
	return c
}
