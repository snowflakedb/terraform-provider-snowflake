// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type UserProgrammaticAccessTokenModel struct {
	Name                                 tfconfig.Variable `json:"name,omitempty"`
	Comment                              tfconfig.Variable `json:"comment,omitempty"`
	DaysToExpiry                         tfconfig.Variable `json:"days_to_expiry,omitempty"`
	Disabled                             tfconfig.Variable `json:"disabled,omitempty"`
	MinsToBypassNetworkPolicyRequirement tfconfig.Variable `json:"mins_to_bypass_network_policy_requirement,omitempty"`
	RoleRestriction                      tfconfig.Variable `json:"role_restriction,omitempty"`
	Token                                tfconfig.Variable `json:"token,omitempty"`
	User                                 tfconfig.Variable `json:"user,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func UserProgrammaticAccessToken(
	resourceName string,
	name string,
	user string,
) *UserProgrammaticAccessTokenModel {
	u := &UserProgrammaticAccessTokenModel{ResourceModelMeta: config.Meta(resourceName, resources.UserProgrammaticAccessToken)}
	u.WithName(name)
	u.WithUser(user)
	return u
}

func UserProgrammaticAccessTokenWithDefaultMeta(
	name string,
	user string,
) *UserProgrammaticAccessTokenModel {
	u := &UserProgrammaticAccessTokenModel{ResourceModelMeta: config.DefaultMeta(resources.UserProgrammaticAccessToken)}
	u.WithName(name)
	u.WithUser(user)
	return u
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (u *UserProgrammaticAccessTokenModel) MarshalJSON() ([]byte, error) {
	type Alias UserProgrammaticAccessTokenModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(u),
		DependsOn: u.DependsOn(),
	})
}

func (u *UserProgrammaticAccessTokenModel) WithDependsOn(values ...string) *UserProgrammaticAccessTokenModel {
	u.SetDependsOn(values...)
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *UserProgrammaticAccessTokenModel {
	u.DynamicBlock = dynamicBlock
	return u
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (u *UserProgrammaticAccessTokenModel) WithName(name string) *UserProgrammaticAccessTokenModel {
	u.Name = tfconfig.StringVariable(name)
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithComment(comment string) *UserProgrammaticAccessTokenModel {
	u.Comment = tfconfig.StringVariable(comment)
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithDaysToExpiry(daysToExpiry int) *UserProgrammaticAccessTokenModel {
	u.DaysToExpiry = tfconfig.IntegerVariable(daysToExpiry)
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithDisabled(disabled string) *UserProgrammaticAccessTokenModel {
	u.Disabled = tfconfig.StringVariable(disabled)
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithMinsToBypassNetworkPolicyRequirement(minsToBypassNetworkPolicyRequirement int) *UserProgrammaticAccessTokenModel {
	u.MinsToBypassNetworkPolicyRequirement = tfconfig.IntegerVariable(minsToBypassNetworkPolicyRequirement)
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithRoleRestriction(roleRestriction string) *UserProgrammaticAccessTokenModel {
	u.RoleRestriction = tfconfig.StringVariable(roleRestriction)
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithToken(token string) *UserProgrammaticAccessTokenModel {
	u.Token = tfconfig.StringVariable(token)
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithUser(user string) *UserProgrammaticAccessTokenModel {
	u.User = tfconfig.StringVariable(user)
	return u
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (u *UserProgrammaticAccessTokenModel) WithNameValue(value tfconfig.Variable) *UserProgrammaticAccessTokenModel {
	u.Name = value
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithCommentValue(value tfconfig.Variable) *UserProgrammaticAccessTokenModel {
	u.Comment = value
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithDaysToExpiryValue(value tfconfig.Variable) *UserProgrammaticAccessTokenModel {
	u.DaysToExpiry = value
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithDisabledValue(value tfconfig.Variable) *UserProgrammaticAccessTokenModel {
	u.Disabled = value
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithMinsToBypassNetworkPolicyRequirementValue(value tfconfig.Variable) *UserProgrammaticAccessTokenModel {
	u.MinsToBypassNetworkPolicyRequirement = value
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithRoleRestrictionValue(value tfconfig.Variable) *UserProgrammaticAccessTokenModel {
	u.RoleRestriction = value
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithTokenValue(value tfconfig.Variable) *UserProgrammaticAccessTokenModel {
	u.Token = value
	return u
}

func (u *UserProgrammaticAccessTokenModel) WithUserValue(value tfconfig.Variable) *UserProgrammaticAccessTokenModel {
	u.User = value
	return u
}
