// Code generated by resource model builder generator (v0.1.0); DO NOT EDIT.

package model

import (
	"encoding/json"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"
)

type GrantPrivilegesToAccountRoleModel struct {
	AccountRoleName    tfconfig.Variable `json:"account_role_name,omitempty"`
	AllPrivileges      tfconfig.Variable `json:"all_privileges,omitempty"`
	AlwaysApply        tfconfig.Variable `json:"always_apply,omitempty"`
	AlwaysApplyTrigger tfconfig.Variable `json:"always_apply_trigger,omitempty"`
	OnAccount          tfconfig.Variable `json:"on_account,omitempty"`
	OnAccountObject    tfconfig.Variable `json:"on_account_object,omitempty"`
	OnSchema           tfconfig.Variable `json:"on_schema,omitempty"`
	OnSchemaObject     tfconfig.Variable `json:"on_schema_object,omitempty"`
	Privileges         tfconfig.Variable `json:"privileges,omitempty"`
	WithGrantOption    tfconfig.Variable `json:"with_grant_option,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func GrantPrivilegesToAccountRole(
	resourceName string,
	accountRoleName string,
) *GrantPrivilegesToAccountRoleModel {
	g := &GrantPrivilegesToAccountRoleModel{ResourceModelMeta: config.Meta(resourceName, resources.GrantPrivilegesToAccountRole)}
	g.WithAccountRoleName(accountRoleName)
	return g
}

func GrantPrivilegesToAccountRoleWithDefaultMeta(
	accountRoleName string,
) *GrantPrivilegesToAccountRoleModel {
	g := &GrantPrivilegesToAccountRoleModel{ResourceModelMeta: config.DefaultMeta(resources.GrantPrivilegesToAccountRole)}
	g.WithAccountRoleName(accountRoleName)
	return g
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (g *GrantPrivilegesToAccountRoleModel) MarshalJSON() ([]byte, error) {
	type Alias GrantPrivilegesToAccountRoleModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(g),
		DependsOn: g.DependsOn(),
	})
}

func (g *GrantPrivilegesToAccountRoleModel) WithDependsOn(values ...string) *GrantPrivilegesToAccountRoleModel {
	g.SetDependsOn(values...)
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *GrantPrivilegesToAccountRoleModel {
	g.DynamicBlock = dynamicBlock
	return g
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (g *GrantPrivilegesToAccountRoleModel) WithAccountRoleName(accountRoleName string) *GrantPrivilegesToAccountRoleModel {
	g.AccountRoleName = tfconfig.StringVariable(accountRoleName)
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithAllPrivileges(allPrivileges bool) *GrantPrivilegesToAccountRoleModel {
	g.AllPrivileges = tfconfig.BoolVariable(allPrivileges)
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithAlwaysApply(alwaysApply bool) *GrantPrivilegesToAccountRoleModel {
	g.AlwaysApply = tfconfig.BoolVariable(alwaysApply)
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithAlwaysApplyTrigger(alwaysApplyTrigger string) *GrantPrivilegesToAccountRoleModel {
	g.AlwaysApplyTrigger = tfconfig.StringVariable(alwaysApplyTrigger)
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithOnAccount(onAccount bool) *GrantPrivilegesToAccountRoleModel {
	g.OnAccount = tfconfig.BoolVariable(onAccount)
	return g
}

// on_account_object attribute type is not yet supported, so WithOnAccountObject can't be generated

// on_schema attribute type is not yet supported, so WithOnSchema can't be generated

// on_schema_object attribute type is not yet supported, so WithOnSchemaObject can't be generated

// privileges attribute type is not yet supported, so WithPrivileges can't be generated

func (g *GrantPrivilegesToAccountRoleModel) WithWithGrantOption(withGrantOption bool) *GrantPrivilegesToAccountRoleModel {
	g.WithGrantOption = tfconfig.BoolVariable(withGrantOption)
	return g
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (g *GrantPrivilegesToAccountRoleModel) WithAccountRoleNameValue(value tfconfig.Variable) *GrantPrivilegesToAccountRoleModel {
	g.AccountRoleName = value
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithAllPrivilegesValue(value tfconfig.Variable) *GrantPrivilegesToAccountRoleModel {
	g.AllPrivileges = value
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithAlwaysApplyValue(value tfconfig.Variable) *GrantPrivilegesToAccountRoleModel {
	g.AlwaysApply = value
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithAlwaysApplyTriggerValue(value tfconfig.Variable) *GrantPrivilegesToAccountRoleModel {
	g.AlwaysApplyTrigger = value
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithOnAccountValue(value tfconfig.Variable) *GrantPrivilegesToAccountRoleModel {
	g.OnAccount = value
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithOnAccountObjectValue(value tfconfig.Variable) *GrantPrivilegesToAccountRoleModel {
	g.OnAccountObject = value
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithOnSchemaValue(value tfconfig.Variable) *GrantPrivilegesToAccountRoleModel {
	g.OnSchema = value
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithOnSchemaObjectValue(value tfconfig.Variable) *GrantPrivilegesToAccountRoleModel {
	g.OnSchemaObject = value
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithPrivilegesValue(value tfconfig.Variable) *GrantPrivilegesToAccountRoleModel {
	g.Privileges = value
	return g
}

func (g *GrantPrivilegesToAccountRoleModel) WithWithGrantOptionValue(value tfconfig.Variable) *GrantPrivilegesToAccountRoleModel {
	g.WithGrantOption = value
	return g
}
