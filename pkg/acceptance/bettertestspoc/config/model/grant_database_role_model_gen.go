// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type GrantDatabaseRoleModel struct {
	DatabaseRoleName       tfconfig.Variable `json:"database_role_name,omitempty"`
	ParentDatabaseRoleName tfconfig.Variable `json:"parent_database_role_name,omitempty"`
	ParentRoleName         tfconfig.Variable `json:"parent_role_name,omitempty"`
	ShareName              tfconfig.Variable `json:"share_name,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func GrantDatabaseRole(
	resourceName string,
	databaseRoleName string,
) *GrantDatabaseRoleModel {
	g := &GrantDatabaseRoleModel{ResourceModelMeta: config.Meta(resourceName, resources.GrantDatabaseRole)}
	g.WithDatabaseRoleName(databaseRoleName)
	return g
}

func GrantDatabaseRoleWithDefaultMeta(
	databaseRoleName string,
) *GrantDatabaseRoleModel {
	g := &GrantDatabaseRoleModel{ResourceModelMeta: config.DefaultMeta(resources.GrantDatabaseRole)}
	g.WithDatabaseRoleName(databaseRoleName)
	return g
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (g *GrantDatabaseRoleModel) MarshalJSON() ([]byte, error) {
	type Alias GrantDatabaseRoleModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(g),
		DependsOn: g.DependsOn(),
	})
}

func (g *GrantDatabaseRoleModel) WithDependsOn(values ...string) *GrantDatabaseRoleModel {
	g.SetDependsOn(values...)
	return g
}

func (g *GrantDatabaseRoleModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *GrantDatabaseRoleModel {
	g.DynamicBlock = dynamicBlock
	return g
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (g *GrantDatabaseRoleModel) WithDatabaseRoleName(databaseRoleName string) *GrantDatabaseRoleModel {
	g.DatabaseRoleName = tfconfig.StringVariable(databaseRoleName)
	return g
}

func (g *GrantDatabaseRoleModel) WithParentDatabaseRoleName(parentDatabaseRoleName string) *GrantDatabaseRoleModel {
	g.ParentDatabaseRoleName = tfconfig.StringVariable(parentDatabaseRoleName)
	return g
}

func (g *GrantDatabaseRoleModel) WithParentRoleName(parentRoleName string) *GrantDatabaseRoleModel {
	g.ParentRoleName = tfconfig.StringVariable(parentRoleName)
	return g
}

func (g *GrantDatabaseRoleModel) WithShareName(shareName string) *GrantDatabaseRoleModel {
	g.ShareName = tfconfig.StringVariable(shareName)
	return g
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (g *GrantDatabaseRoleModel) WithDatabaseRoleNameValue(value tfconfig.Variable) *GrantDatabaseRoleModel {
	g.DatabaseRoleName = value
	return g
}

func (g *GrantDatabaseRoleModel) WithParentDatabaseRoleNameValue(value tfconfig.Variable) *GrantDatabaseRoleModel {
	g.ParentDatabaseRoleName = value
	return g
}

func (g *GrantDatabaseRoleModel) WithParentRoleNameValue(value tfconfig.Variable) *GrantDatabaseRoleModel {
	g.ParentRoleName = value
	return g
}

func (g *GrantDatabaseRoleModel) WithShareNameValue(value tfconfig.Variable) *GrantDatabaseRoleModel {
	g.ShareName = value
	return g
}
