// Code generated by resource model builder generator (v0.1.0); DO NOT EDIT.

package model

import (
	"encoding/json"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"
)

type SemanticViewModel struct {
	Database           tfconfig.Variable `json:"database,omitempty"`
	Schema             tfconfig.Variable `json:"schema,omitempty"`
	Name               tfconfig.Variable `json:"name,omitempty"`
	Comment            tfconfig.Variable `json:"comment,omitempty"`
	FullyQualifiedName tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	Tables             tfconfig.Variable `json:"tables,omitempty"`
	Relationships      tfconfig.Variable `json:"relationships,omitempty"`
	Facts              tfconfig.Variable `json:"facts,omitempty"`
	Dimensions         tfconfig.Variable `json:"dimensions,omitempty"`
	Metrics            tfconfig.Variable `json:"metrics,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func SemanticView(
	resourceName string,
	database string,
	schema string,
	name string,
	tables []sdk.LogicalTable, // manually adjusted
	metrics []sdk.MetricDefinition, // manually adjusted
) *SemanticViewModel {
	s := &SemanticViewModel{ResourceModelMeta: config.Meta(resourceName, resources.SemanticView)}
	s.WithDatabase(database)
	s.WithSchema(schema)
	s.WithName(name)
	s.WithTables(tables)   // manually adjusted
	s.WithMetrics(metrics) //manually adjusted
	return s
}

func SemanticViewWithDefaultMeta(
	database string,
	schema string,
	name string,
	tables []sdk.LogicalTable, // manually adjusted
	metrics []sdk.MetricDefinition, // manually adjusted
) *SemanticViewModel {
	s := &SemanticViewModel{ResourceModelMeta: config.DefaultMeta(resources.SemanticView)}
	s.WithDatabase(database)
	s.WithSchema(schema)
	s.WithName(name)
	s.WithTables(tables)   // manually adjusted
	s.WithMetrics(metrics) //manually adjusted
	return s
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (s *SemanticViewModel) MarshalJSON() ([]byte, error) {
	type Alias SemanticViewModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(s),
		DependsOn: s.DependsOn(),
	})
}

func (s *SemanticViewModel) WithDependsOn(values ...string) *SemanticViewModel {
	s.SetDependsOn(values...)
	return s
}

func (s *SemanticViewModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *SemanticViewModel {
	s.DynamicBlock = dynamicBlock
	return s
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (s *SemanticViewModel) WithDatabase(database string) *SemanticViewModel {
	s.Database = tfconfig.StringVariable(database)
	return s
}

func (s *SemanticViewModel) WithSchema(schema string) *SemanticViewModel {
	s.Schema = tfconfig.StringVariable(schema)
	return s
}

func (s *SemanticViewModel) WithName(name string) *SemanticViewModel {
	s.Name = tfconfig.StringVariable(name)
	return s
}

func (s *SemanticViewModel) WithComment(comment string) *SemanticViewModel {
	s.Comment = tfconfig.StringVariable(comment)
	return s
}

func (s *SemanticViewModel) WithFullyQualifiedName(fullyQualifiedName string) *SemanticViewModel {
	s.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return s
}

// tables attribute type is not yet supported, so WithTables can't be generated

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (s *SemanticViewModel) WithDatabaseValue(value tfconfig.Variable) *SemanticViewModel {
	s.Database = value
	return s
}

func (s *SemanticViewModel) WithSchemaValue(value tfconfig.Variable) *SemanticViewModel {
	s.Schema = value
	return s
}

func (s *SemanticViewModel) WithNameValue(value tfconfig.Variable) *SemanticViewModel {
	s.Name = value
	return s
}

func (s *SemanticViewModel) WithCommentValue(value tfconfig.Variable) *SemanticViewModel {
	s.Comment = value
	return s
}

func (s *SemanticViewModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *SemanticViewModel {
	s.FullyQualifiedName = value
	return s
}

func (s *SemanticViewModel) WithTablesValue(value tfconfig.Variable) *SemanticViewModel {
	s.Tables = value
	return s
}

func (s *SemanticViewModel) WithRelationshipsValue(value tfconfig.Variable) *SemanticViewModel {
	s.Relationships = value
	return s
}

func (s *SemanticViewModel) WithMetricsValue(value tfconfig.Variable) *SemanticViewModel {
	s.Metrics = value
	return s
}

func (s *SemanticViewModel) WithFactsValue(value tfconfig.Variable) *SemanticViewModel {
	s.Facts = value
	return s
}

func (s *SemanticViewModel) WithDimensionsValue(value tfconfig.Variable) *SemanticViewModel {
	s.Dimensions = value
	return s
}
