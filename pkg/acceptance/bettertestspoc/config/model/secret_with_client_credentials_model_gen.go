// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type SecretWithClientCredentialsModel struct {
	Database           tfconfig.Variable `json:"database,omitempty"`
	Schema             tfconfig.Variable `json:"schema,omitempty"`
	Name               tfconfig.Variable `json:"name,omitempty"`
	ApiAuthentication  tfconfig.Variable `json:"api_authentication,omitempty"`
	Comment            tfconfig.Variable `json:"comment,omitempty"`
	FullyQualifiedName tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	OauthScopes        tfconfig.Variable `json:"oauth_scopes,omitempty"`
	SecretType         tfconfig.Variable `json:"secret_type,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func SecretWithClientCredentials(
	resourceName string,
	database string,
	schema string,
	name string,
	apiAuthentication string,
	oauthScopes []string,
) *SecretWithClientCredentialsModel {
	s := &SecretWithClientCredentialsModel{ResourceModelMeta: config.Meta(resourceName, resources.SecretWithClientCredentials)}
	s.WithDatabase(database)
	s.WithSchema(schema)
	s.WithName(name)
	s.WithApiAuthentication(apiAuthentication)
	s.WithOauthScopes(oauthScopes)
	return s
}

func SecretWithClientCredentialsWithDefaultMeta(
	database string,
	schema string,
	name string,
	apiAuthentication string,
	oauthScopes []string,
) *SecretWithClientCredentialsModel {
	s := &SecretWithClientCredentialsModel{ResourceModelMeta: config.DefaultMeta(resources.SecretWithClientCredentials)}
	s.WithDatabase(database)
	s.WithSchema(schema)
	s.WithName(name)
	s.WithApiAuthentication(apiAuthentication)
	s.WithOauthScopes(oauthScopes)
	return s
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (s *SecretWithClientCredentialsModel) MarshalJSON() ([]byte, error) {
	type Alias SecretWithClientCredentialsModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(s),
		DependsOn: s.DependsOn(),
	})
}

func (s *SecretWithClientCredentialsModel) WithDependsOn(values ...string) *SecretWithClientCredentialsModel {
	s.SetDependsOn(values...)
	return s
}

func (s *SecretWithClientCredentialsModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *SecretWithClientCredentialsModel {
	s.DynamicBlock = dynamicBlock
	return s
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (s *SecretWithClientCredentialsModel) WithDatabase(database string) *SecretWithClientCredentialsModel {
	s.Database = tfconfig.StringVariable(database)
	return s
}

func (s *SecretWithClientCredentialsModel) WithSchema(schema string) *SecretWithClientCredentialsModel {
	s.Schema = tfconfig.StringVariable(schema)
	return s
}

func (s *SecretWithClientCredentialsModel) WithName(name string) *SecretWithClientCredentialsModel {
	s.Name = tfconfig.StringVariable(name)
	return s
}

func (s *SecretWithClientCredentialsModel) WithApiAuthentication(apiAuthentication string) *SecretWithClientCredentialsModel {
	s.ApiAuthentication = tfconfig.StringVariable(apiAuthentication)
	return s
}

func (s *SecretWithClientCredentialsModel) WithComment(comment string) *SecretWithClientCredentialsModel {
	s.Comment = tfconfig.StringVariable(comment)
	return s
}

func (s *SecretWithClientCredentialsModel) WithFullyQualifiedName(fullyQualifiedName string) *SecretWithClientCredentialsModel {
	s.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return s
}

// oauth_scopes attribute type is not yet supported, so WithOauthScopes can't be generated

func (s *SecretWithClientCredentialsModel) WithSecretType(secretType string) *SecretWithClientCredentialsModel {
	s.SecretType = tfconfig.StringVariable(secretType)
	return s
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (s *SecretWithClientCredentialsModel) WithDatabaseValue(value tfconfig.Variable) *SecretWithClientCredentialsModel {
	s.Database = value
	return s
}

func (s *SecretWithClientCredentialsModel) WithSchemaValue(value tfconfig.Variable) *SecretWithClientCredentialsModel {
	s.Schema = value
	return s
}

func (s *SecretWithClientCredentialsModel) WithNameValue(value tfconfig.Variable) *SecretWithClientCredentialsModel {
	s.Name = value
	return s
}

func (s *SecretWithClientCredentialsModel) WithApiAuthenticationValue(value tfconfig.Variable) *SecretWithClientCredentialsModel {
	s.ApiAuthentication = value
	return s
}

func (s *SecretWithClientCredentialsModel) WithCommentValue(value tfconfig.Variable) *SecretWithClientCredentialsModel {
	s.Comment = value
	return s
}

func (s *SecretWithClientCredentialsModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *SecretWithClientCredentialsModel {
	s.FullyQualifiedName = value
	return s
}

func (s *SecretWithClientCredentialsModel) WithOauthScopesValue(value tfconfig.Variable) *SecretWithClientCredentialsModel {
	s.OauthScopes = value
	return s
}

func (s *SecretWithClientCredentialsModel) WithSecretTypeValue(value tfconfig.Variable) *SecretWithClientCredentialsModel {
	s.SecretType = value
	return s
}
