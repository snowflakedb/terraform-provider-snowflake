// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type GrantPrivilegesToDatabaseRoleModel struct {
	AllPrivileges      tfconfig.Variable `json:"all_privileges,omitempty"`
	AlwaysApply        tfconfig.Variable `json:"always_apply,omitempty"`
	AlwaysApplyTrigger tfconfig.Variable `json:"always_apply_trigger,omitempty"`
	DatabaseRoleName   tfconfig.Variable `json:"database_role_name,omitempty"`
	OnDatabase         tfconfig.Variable `json:"on_database,omitempty"`
	OnSchema           tfconfig.Variable `json:"on_schema,omitempty"`
	OnSchemaObject     tfconfig.Variable `json:"on_schema_object,omitempty"`
	Privileges         tfconfig.Variable `json:"privileges,omitempty"`
	WithGrantOption    tfconfig.Variable `json:"with_grant_option,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func GrantPrivilegesToDatabaseRole(
	resourceName string,
	databaseRoleName string,
) *GrantPrivilegesToDatabaseRoleModel {
	g := &GrantPrivilegesToDatabaseRoleModel{ResourceModelMeta: config.Meta(resourceName, resources.GrantPrivilegesToDatabaseRole)}
	g.WithDatabaseRoleName(databaseRoleName)
	return g
}

func GrantPrivilegesToDatabaseRoleWithDefaultMeta(
	databaseRoleName string,
) *GrantPrivilegesToDatabaseRoleModel {
	g := &GrantPrivilegesToDatabaseRoleModel{ResourceModelMeta: config.DefaultMeta(resources.GrantPrivilegesToDatabaseRole)}
	g.WithDatabaseRoleName(databaseRoleName)
	return g
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (g *GrantPrivilegesToDatabaseRoleModel) MarshalJSON() ([]byte, error) {
	type Alias GrantPrivilegesToDatabaseRoleModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(g),
		DependsOn: g.DependsOn(),
	})
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithDependsOn(values ...string) *GrantPrivilegesToDatabaseRoleModel {
	g.SetDependsOn(values...)
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *GrantPrivilegesToDatabaseRoleModel {
	g.DynamicBlock = dynamicBlock
	return g
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (g *GrantPrivilegesToDatabaseRoleModel) WithAllPrivileges(allPrivileges bool) *GrantPrivilegesToDatabaseRoleModel {
	g.AllPrivileges = tfconfig.BoolVariable(allPrivileges)
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithAlwaysApply(alwaysApply bool) *GrantPrivilegesToDatabaseRoleModel {
	g.AlwaysApply = tfconfig.BoolVariable(alwaysApply)
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithAlwaysApplyTrigger(alwaysApplyTrigger string) *GrantPrivilegesToDatabaseRoleModel {
	g.AlwaysApplyTrigger = tfconfig.StringVariable(alwaysApplyTrigger)
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithDatabaseRoleName(databaseRoleName string) *GrantPrivilegesToDatabaseRoleModel {
	g.DatabaseRoleName = tfconfig.StringVariable(databaseRoleName)
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithOnDatabase(onDatabase string) *GrantPrivilegesToDatabaseRoleModel {
	g.OnDatabase = tfconfig.StringVariable(onDatabase)
	return g
}

// on_schema attribute type is not yet supported, so WithOnSchema can't be generated

// on_schema_object attribute type is not yet supported, so WithOnSchemaObject can't be generated

// privileges attribute type is not yet supported, so WithPrivileges can't be generated

func (g *GrantPrivilegesToDatabaseRoleModel) WithWithGrantOption(withGrantOption bool) *GrantPrivilegesToDatabaseRoleModel {
	g.WithGrantOption = tfconfig.BoolVariable(withGrantOption)
	return g
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (g *GrantPrivilegesToDatabaseRoleModel) WithAllPrivilegesValue(value tfconfig.Variable) *GrantPrivilegesToDatabaseRoleModel {
	g.AllPrivileges = value
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithAlwaysApplyValue(value tfconfig.Variable) *GrantPrivilegesToDatabaseRoleModel {
	g.AlwaysApply = value
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithAlwaysApplyTriggerValue(value tfconfig.Variable) *GrantPrivilegesToDatabaseRoleModel {
	g.AlwaysApplyTrigger = value
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithDatabaseRoleNameValue(value tfconfig.Variable) *GrantPrivilegesToDatabaseRoleModel {
	g.DatabaseRoleName = value
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithOnDatabaseValue(value tfconfig.Variable) *GrantPrivilegesToDatabaseRoleModel {
	g.OnDatabase = value
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithOnSchemaValue(value tfconfig.Variable) *GrantPrivilegesToDatabaseRoleModel {
	g.OnSchema = value
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithOnSchemaObjectValue(value tfconfig.Variable) *GrantPrivilegesToDatabaseRoleModel {
	g.OnSchemaObject = value
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithPrivilegesValue(value tfconfig.Variable) *GrantPrivilegesToDatabaseRoleModel {
	g.Privileges = value
	return g
}

func (g *GrantPrivilegesToDatabaseRoleModel) WithWithGrantOptionValue(value tfconfig.Variable) *GrantPrivilegesToDatabaseRoleModel {
	g.WithGrantOption = value
	return g
}
