// Code generated by resource model builder generator (v0.1.0); DO NOT EDIT.

package model

import (
	"encoding/json"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"
)

type DbtProjectModel struct {
	Database           tfconfig.Variable `json:"database,omitempty"`
	Schema             tfconfig.Variable `json:"schema,omitempty"`
	Name               tfconfig.Variable `json:"name,omitempty"`
	Comment            tfconfig.Variable `json:"comment,omitempty"`
	DefaultArgs        tfconfig.Variable `json:"default_args,omitempty"`
	DefaultVersion     tfconfig.Variable `json:"default_version,omitempty"`
	From               tfconfig.Variable `json:"from,omitempty"`
	FullyQualifiedName tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	GitRepositoryFqn   tfconfig.Variable `json:"git_repository_fqn,omitempty"`
	GitSource          tfconfig.Variable `json:"git_source,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func DbtProject(
	resourceName string,
	database string,
	schema string,
	name string,
) *DbtProjectModel {
	d := &DbtProjectModel{ResourceModelMeta: config.Meta(resourceName, resources.DbtProject)}
	d.WithDatabase(database)
	d.WithSchema(schema)
	d.WithName(name)
	return d
}

func DbtProjectWithDefaultMeta(
	database string,
	schema string,
	name string,
) *DbtProjectModel {
	d := &DbtProjectModel{ResourceModelMeta: config.DefaultMeta(resources.DbtProject)}
	d.WithDatabase(database)
	d.WithSchema(schema)
	d.WithName(name)
	return d
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (d *DbtProjectModel) MarshalJSON() ([]byte, error) {
	type Alias DbtProjectModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(d),
		DependsOn: d.DependsOn(),
	})
}

func (d *DbtProjectModel) WithDependsOn(values ...string) *DbtProjectModel {
	d.SetDependsOn(values...)
	return d
}

func (d *DbtProjectModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *DbtProjectModel {
	d.DynamicBlock = dynamicBlock
	return d
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (d *DbtProjectModel) WithDatabase(database string) *DbtProjectModel {
	d.Database = tfconfig.StringVariable(database)
	return d
}

func (d *DbtProjectModel) WithSchema(schema string) *DbtProjectModel {
	d.Schema = tfconfig.StringVariable(schema)
	return d
}

func (d *DbtProjectModel) WithName(name string) *DbtProjectModel {
	d.Name = tfconfig.StringVariable(name)
	return d
}

func (d *DbtProjectModel) WithComment(comment string) *DbtProjectModel {
	d.Comment = tfconfig.StringVariable(comment)
	return d
}

func (d *DbtProjectModel) WithDefaultArgs(defaultArgs string) *DbtProjectModel {
	d.DefaultArgs = tfconfig.StringVariable(defaultArgs)
	return d
}

func (d *DbtProjectModel) WithDefaultVersion(defaultVersion string) *DbtProjectModel {
	d.DefaultVersion = tfconfig.StringVariable(defaultVersion)
	return d
}

func (d *DbtProjectModel) WithFrom(from string) *DbtProjectModel {
	d.From = tfconfig.StringVariable(from)
	return d
}

func (d *DbtProjectModel) WithFullyQualifiedName(fullyQualifiedName string) *DbtProjectModel {
	d.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return d
}

func (d *DbtProjectModel) WithGitRepositoryFqn(gitRepositoryFqn string) *DbtProjectModel {
	d.GitRepositoryFqn = tfconfig.StringVariable(gitRepositoryFqn)
	return d
}

// git_source attribute type is not yet supported, so WithGitSource can't be generated

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (d *DbtProjectModel) WithDatabaseValue(value tfconfig.Variable) *DbtProjectModel {
	d.Database = value
	return d
}

func (d *DbtProjectModel) WithSchemaValue(value tfconfig.Variable) *DbtProjectModel {
	d.Schema = value
	return d
}

func (d *DbtProjectModel) WithNameValue(value tfconfig.Variable) *DbtProjectModel {
	d.Name = value
	return d
}

func (d *DbtProjectModel) WithCommentValue(value tfconfig.Variable) *DbtProjectModel {
	d.Comment = value
	return d
}

func (d *DbtProjectModel) WithDefaultArgsValue(value tfconfig.Variable) *DbtProjectModel {
	d.DefaultArgs = value
	return d
}

func (d *DbtProjectModel) WithDefaultVersionValue(value tfconfig.Variable) *DbtProjectModel {
	d.DefaultVersion = value
	return d
}

func (d *DbtProjectModel) WithFromValue(value tfconfig.Variable) *DbtProjectModel {
	d.From = value
	return d
}

func (d *DbtProjectModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *DbtProjectModel {
	d.FullyQualifiedName = value
	return d
}

func (d *DbtProjectModel) WithGitRepositoryFqnValue(value tfconfig.Variable) *DbtProjectModel {
	d.GitRepositoryFqn = value
	return d
}

func (d *DbtProjectModel) WithGitSourceValue(value tfconfig.Variable) *DbtProjectModel {
	d.GitSource = value
	return d
}
