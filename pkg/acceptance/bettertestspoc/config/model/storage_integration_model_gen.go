// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type StorageIntegrationModel struct {
	Name                     tfconfig.Variable `json:"name,omitempty"`
	AzureConsentUrl          tfconfig.Variable `json:"azure_consent_url,omitempty"`
	AzureMultiTenantAppName  tfconfig.Variable `json:"azure_multi_tenant_app_name,omitempty"`
	AzureTenantId            tfconfig.Variable `json:"azure_tenant_id,omitempty"`
	Comment                  tfconfig.Variable `json:"comment,omitempty"`
	CreatedOn                tfconfig.Variable `json:"created_on,omitempty"`
	Enabled                  tfconfig.Variable `json:"enabled,omitempty"`
	FullyQualifiedName       tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	StorageAllowedLocations  tfconfig.Variable `json:"storage_allowed_locations,omitempty"`
	StorageAwsExternalId     tfconfig.Variable `json:"storage_aws_external_id,omitempty"`
	StorageAwsIamUserArn     tfconfig.Variable `json:"storage_aws_iam_user_arn,omitempty"`
	StorageAwsObjectAcl      tfconfig.Variable `json:"storage_aws_object_acl,omitempty"`
	StorageAwsRoleArn        tfconfig.Variable `json:"storage_aws_role_arn,omitempty"`
	StorageBlockedLocations  tfconfig.Variable `json:"storage_blocked_locations,omitempty"`
	StorageGcpServiceAccount tfconfig.Variable `json:"storage_gcp_service_account,omitempty"`
	StorageProvider          tfconfig.Variable `json:"storage_provider,omitempty"`
	Type_                    tfconfig.Variable `json:"type,omitempty"`
	UsePrivatelinkEndpoint   tfconfig.Variable `json:"use_privatelink_endpoint,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func StorageIntegration(
	resourceName string,
	name string,
	storageAllowedLocations []string,
	storageProvider string,
) *StorageIntegrationModel {
	s := &StorageIntegrationModel{ResourceModelMeta: config.Meta(resourceName, resources.StorageIntegration)}
	s.WithName(name)
	s.WithStorageAllowedLocations(storageAllowedLocations)
	s.WithStorageProvider(storageProvider)
	return s
}

func StorageIntegrationWithDefaultMeta(
	name string,
	storageAllowedLocations []string,
	storageProvider string,
) *StorageIntegrationModel {
	s := &StorageIntegrationModel{ResourceModelMeta: config.DefaultMeta(resources.StorageIntegration)}
	s.WithName(name)
	s.WithStorageAllowedLocations(storageAllowedLocations)
	s.WithStorageProvider(storageProvider)
	return s
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (s *StorageIntegrationModel) MarshalJSON() ([]byte, error) {
	type Alias StorageIntegrationModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(s),
		DependsOn: s.DependsOn(),
	})
}

func (s *StorageIntegrationModel) WithDependsOn(values ...string) *StorageIntegrationModel {
	s.SetDependsOn(values...)
	return s
}

func (s *StorageIntegrationModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *StorageIntegrationModel {
	s.DynamicBlock = dynamicBlock
	return s
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (s *StorageIntegrationModel) WithName(name string) *StorageIntegrationModel {
	s.Name = tfconfig.StringVariable(name)
	return s
}

func (s *StorageIntegrationModel) WithAzureConsentUrl(azureConsentUrl string) *StorageIntegrationModel {
	s.AzureConsentUrl = tfconfig.StringVariable(azureConsentUrl)
	return s
}

func (s *StorageIntegrationModel) WithAzureMultiTenantAppName(azureMultiTenantAppName string) *StorageIntegrationModel {
	s.AzureMultiTenantAppName = tfconfig.StringVariable(azureMultiTenantAppName)
	return s
}

func (s *StorageIntegrationModel) WithAzureTenantId(azureTenantId string) *StorageIntegrationModel {
	s.AzureTenantId = tfconfig.StringVariable(azureTenantId)
	return s
}

func (s *StorageIntegrationModel) WithComment(comment string) *StorageIntegrationModel {
	s.Comment = tfconfig.StringVariable(comment)
	return s
}

func (s *StorageIntegrationModel) WithCreatedOn(createdOn string) *StorageIntegrationModel {
	s.CreatedOn = tfconfig.StringVariable(createdOn)
	return s
}

func (s *StorageIntegrationModel) WithEnabled(enabled bool) *StorageIntegrationModel {
	s.Enabled = tfconfig.BoolVariable(enabled)
	return s
}

func (s *StorageIntegrationModel) WithFullyQualifiedName(fullyQualifiedName string) *StorageIntegrationModel {
	s.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return s
}

// storage_allowed_locations attribute type is not yet supported, so WithStorageAllowedLocations can't be generated

func (s *StorageIntegrationModel) WithStorageAwsExternalId(storageAwsExternalId string) *StorageIntegrationModel {
	s.StorageAwsExternalId = tfconfig.StringVariable(storageAwsExternalId)
	return s
}

func (s *StorageIntegrationModel) WithStorageAwsIamUserArn(storageAwsIamUserArn string) *StorageIntegrationModel {
	s.StorageAwsIamUserArn = tfconfig.StringVariable(storageAwsIamUserArn)
	return s
}

func (s *StorageIntegrationModel) WithStorageAwsObjectAcl(storageAwsObjectAcl string) *StorageIntegrationModel {
	s.StorageAwsObjectAcl = tfconfig.StringVariable(storageAwsObjectAcl)
	return s
}

func (s *StorageIntegrationModel) WithStorageAwsRoleArn(storageAwsRoleArn string) *StorageIntegrationModel {
	s.StorageAwsRoleArn = tfconfig.StringVariable(storageAwsRoleArn)
	return s
}

// storage_blocked_locations attribute type is not yet supported, so WithStorageBlockedLocations can't be generated

func (s *StorageIntegrationModel) WithStorageGcpServiceAccount(storageGcpServiceAccount string) *StorageIntegrationModel {
	s.StorageGcpServiceAccount = tfconfig.StringVariable(storageGcpServiceAccount)
	return s
}

func (s *StorageIntegrationModel) WithStorageProvider(storageProvider string) *StorageIntegrationModel {
	s.StorageProvider = tfconfig.StringVariable(storageProvider)
	return s
}

func (s *StorageIntegrationModel) WithType(type_ string) *StorageIntegrationModel {
	s.Type_ = tfconfig.StringVariable(type_)
	return s
}

func (s *StorageIntegrationModel) WithUsePrivatelinkEndpoint(usePrivatelinkEndpoint string) *StorageIntegrationModel {
	s.UsePrivatelinkEndpoint = tfconfig.StringVariable(usePrivatelinkEndpoint)
	return s
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (s *StorageIntegrationModel) WithNameValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.Name = value
	return s
}

func (s *StorageIntegrationModel) WithAzureConsentUrlValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.AzureConsentUrl = value
	return s
}

func (s *StorageIntegrationModel) WithAzureMultiTenantAppNameValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.AzureMultiTenantAppName = value
	return s
}

func (s *StorageIntegrationModel) WithAzureTenantIdValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.AzureTenantId = value
	return s
}

func (s *StorageIntegrationModel) WithCommentValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.Comment = value
	return s
}

func (s *StorageIntegrationModel) WithCreatedOnValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.CreatedOn = value
	return s
}

func (s *StorageIntegrationModel) WithEnabledValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.Enabled = value
	return s
}

func (s *StorageIntegrationModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.FullyQualifiedName = value
	return s
}

func (s *StorageIntegrationModel) WithStorageAllowedLocationsValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.StorageAllowedLocations = value
	return s
}

func (s *StorageIntegrationModel) WithStorageAwsExternalIdValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.StorageAwsExternalId = value
	return s
}

func (s *StorageIntegrationModel) WithStorageAwsIamUserArnValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.StorageAwsIamUserArn = value
	return s
}

func (s *StorageIntegrationModel) WithStorageAwsObjectAclValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.StorageAwsObjectAcl = value
	return s
}

func (s *StorageIntegrationModel) WithStorageAwsRoleArnValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.StorageAwsRoleArn = value
	return s
}

func (s *StorageIntegrationModel) WithStorageBlockedLocationsValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.StorageBlockedLocations = value
	return s
}

func (s *StorageIntegrationModel) WithStorageGcpServiceAccountValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.StorageGcpServiceAccount = value
	return s
}

func (s *StorageIntegrationModel) WithStorageProviderValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.StorageProvider = value
	return s
}

func (s *StorageIntegrationModel) WithTypeValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.Type_ = value
	return s
}

func (s *StorageIntegrationModel) WithUsePrivatelinkEndpointValue(value tfconfig.Variable) *StorageIntegrationModel {
	s.UsePrivatelinkEndpoint = value
	return s
}
