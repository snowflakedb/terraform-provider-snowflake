// Code generated by config model builder generator; DO NOT EDIT.

package model

import (
	"encoding/json"

	tfconfig "github.com/hashicorp/terraform-plugin-testing/config"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/config"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/provider/resources"
)

type JobServiceModel struct {
	Database                   tfconfig.Variable `json:"database,omitempty"`
	Schema                     tfconfig.Variable `json:"schema,omitempty"`
	Name                       tfconfig.Variable `json:"name,omitempty"`
	Comment                    tfconfig.Variable `json:"comment,omitempty"`
	ComputePool                tfconfig.Variable `json:"compute_pool,omitempty"`
	ExternalAccessIntegrations tfconfig.Variable `json:"external_access_integrations,omitempty"`
	FromSpecification          tfconfig.Variable `json:"from_specification,omitempty"`
	FullyQualifiedName         tfconfig.Variable `json:"fully_qualified_name,omitempty"`
	QueryWarehouse             tfconfig.Variable `json:"query_warehouse,omitempty"`
	ServiceType                tfconfig.Variable `json:"service_type,omitempty"`

	DynamicBlock *config.DynamicBlock `json:"dynamic,omitempty"`

	*config.ResourceModelMeta
}

/////////////////////////////////////////////////
// Basic builders (resource name and required) //
/////////////////////////////////////////////////

func JobService(
	resourceName string,
	database string,
	schema string,
	name string,
	computePool string,
) *JobServiceModel {
	j := &JobServiceModel{ResourceModelMeta: config.Meta(resourceName, resources.JobService)}
	j.WithDatabase(database)
	j.WithSchema(schema)
	j.WithName(name)
	j.WithComputePool(computePool)
	return j
}

func JobServiceWithDefaultMeta(
	database string,
	schema string,
	name string,
	computePool string,
) *JobServiceModel {
	j := &JobServiceModel{ResourceModelMeta: config.DefaultMeta(resources.JobService)}
	j.WithDatabase(database)
	j.WithSchema(schema)
	j.WithName(name)
	j.WithComputePool(computePool)
	return j
}

///////////////////////////////////////////////////////////////////////
// set proper json marshalling, handle depends on and dynamic blocks //
///////////////////////////////////////////////////////////////////////

func (j *JobServiceModel) MarshalJSON() ([]byte, error) {
	type Alias JobServiceModel
	return json.Marshal(&struct {
		*Alias
		DependsOn []string `json:"depends_on,omitempty"`
	}{
		Alias:     (*Alias)(j),
		DependsOn: j.DependsOn(),
	})
}

func (j *JobServiceModel) WithDependsOn(values ...string) *JobServiceModel {
	j.SetDependsOn(values...)
	return j
}

func (j *JobServiceModel) WithDynamicBlock(dynamicBlock *config.DynamicBlock) *JobServiceModel {
	j.DynamicBlock = dynamicBlock
	return j
}

/////////////////////////////////
// below all the proper values //
/////////////////////////////////

func (j *JobServiceModel) WithDatabase(database string) *JobServiceModel {
	j.Database = tfconfig.StringVariable(database)
	return j
}

func (j *JobServiceModel) WithSchema(schema string) *JobServiceModel {
	j.Schema = tfconfig.StringVariable(schema)
	return j
}

func (j *JobServiceModel) WithName(name string) *JobServiceModel {
	j.Name = tfconfig.StringVariable(name)
	return j
}

func (j *JobServiceModel) WithComment(comment string) *JobServiceModel {
	j.Comment = tfconfig.StringVariable(comment)
	return j
}

func (j *JobServiceModel) WithComputePool(computePool string) *JobServiceModel {
	j.ComputePool = tfconfig.StringVariable(computePool)
	return j
}

// external_access_integrations attribute type is not yet supported, so WithExternalAccessIntegrations can't be generated

// from_specification attribute type is not yet supported, so WithFromSpecification can't be generated

func (j *JobServiceModel) WithFullyQualifiedName(fullyQualifiedName string) *JobServiceModel {
	j.FullyQualifiedName = tfconfig.StringVariable(fullyQualifiedName)
	return j
}

func (j *JobServiceModel) WithQueryWarehouse(queryWarehouse string) *JobServiceModel {
	j.QueryWarehouse = tfconfig.StringVariable(queryWarehouse)
	return j
}

func (j *JobServiceModel) WithServiceType(serviceType string) *JobServiceModel {
	j.ServiceType = tfconfig.StringVariable(serviceType)
	return j
}

//////////////////////////////////////////
// below it's possible to set any value //
//////////////////////////////////////////

func (j *JobServiceModel) WithDatabaseValue(value tfconfig.Variable) *JobServiceModel {
	j.Database = value
	return j
}

func (j *JobServiceModel) WithSchemaValue(value tfconfig.Variable) *JobServiceModel {
	j.Schema = value
	return j
}

func (j *JobServiceModel) WithNameValue(value tfconfig.Variable) *JobServiceModel {
	j.Name = value
	return j
}

func (j *JobServiceModel) WithCommentValue(value tfconfig.Variable) *JobServiceModel {
	j.Comment = value
	return j
}

func (j *JobServiceModel) WithComputePoolValue(value tfconfig.Variable) *JobServiceModel {
	j.ComputePool = value
	return j
}

func (j *JobServiceModel) WithExternalAccessIntegrationsValue(value tfconfig.Variable) *JobServiceModel {
	j.ExternalAccessIntegrations = value
	return j
}

func (j *JobServiceModel) WithFromSpecificationValue(value tfconfig.Variable) *JobServiceModel {
	j.FromSpecification = value
	return j
}

func (j *JobServiceModel) WithFullyQualifiedNameValue(value tfconfig.Variable) *JobServiceModel {
	j.FullyQualifiedName = value
	return j
}

func (j *JobServiceModel) WithQueryWarehouseValue(value tfconfig.Variable) *JobServiceModel {
	j.QueryWarehouse = value
	return j
}

func (j *JobServiceModel) WithServiceTypeValue(value tfconfig.Variable) *JobServiceModel {
	j.ServiceType = value
	return j
}
