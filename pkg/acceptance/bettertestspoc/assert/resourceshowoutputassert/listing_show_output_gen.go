// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type ListingShowOutputAssert struct {
	*assert.ResourceAssert
}

func ListingShowOutput(t *testing.T, name string) *ListingShowOutputAssert {
	t.Helper()

	listingAssert := ListingShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	listingAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &listingAssert
}

func ImportedListingShowOutput(t *testing.T, id string) *ListingShowOutputAssert {
	t.Helper()

	listingAssert := ListingShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	listingAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &listingAssert
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (l *ListingShowOutputAssert) HasGlobalName(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("global_name", expected))
	return l
}

func (l *ListingShowOutputAssert) HasName(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return l
}

func (l *ListingShowOutputAssert) HasTitle(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("title", expected))
	return l
}

func (l *ListingShowOutputAssert) HasSubtitle(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("subtitle", expected))
	return l
}

func (l *ListingShowOutputAssert) HasProfile(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("profile", expected))
	return l
}

func (l *ListingShowOutputAssert) HasCreatedOn(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected))
	return l
}

func (l *ListingShowOutputAssert) HasUpdatedOn(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("updated_on", expected))
	return l
}

func (l *ListingShowOutputAssert) HasPublishedOn(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("published_on", expected))
	return l
}

func (l *ListingShowOutputAssert) HasState(expected sdk.ListingState) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("state", expected))
	return l
}

func (l *ListingShowOutputAssert) HasReviewState(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("review_state", expected))
	return l
}

func (l *ListingShowOutputAssert) HasComment(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return l
}

func (l *ListingShowOutputAssert) HasOwner(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return l
}

func (l *ListingShowOutputAssert) HasOwnerRoleType(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", expected))
	return l
}

func (l *ListingShowOutputAssert) HasRegions(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("regions", expected))
	return l
}

func (l *ListingShowOutputAssert) HasTargetAccounts(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("target_accounts", expected))
	return l
}

func (l *ListingShowOutputAssert) HasIsMonetized(expected bool) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_monetized", expected))
	return l
}

func (l *ListingShowOutputAssert) HasIsApplication(expected bool) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_application", expected))
	return l
}

func (l *ListingShowOutputAssert) HasIsTargeted(expected bool) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_targeted", expected))
	return l
}

func (l *ListingShowOutputAssert) HasIsLimitedTrial(expected bool) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_limited_trial", expected))
	return l
}

func (l *ListingShowOutputAssert) HasIsByRequest(expected bool) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_by_request", expected))
	return l
}

func (l *ListingShowOutputAssert) HasDistribution(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("distribution", expected))
	return l
}

func (l *ListingShowOutputAssert) HasIsMountlessQueryable(expected bool) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_mountless_queryable", expected))
	return l
}

func (l *ListingShowOutputAssert) HasRejectedOn(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("rejected_on", expected))
	return l
}

func (l *ListingShowOutputAssert) HasOrganizationProfileName(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("organization_profile_name", expected))
	return l
}

func (l *ListingShowOutputAssert) HasUniformListingLocator(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("uniform_listing_locator", expected))
	return l
}

func (l *ListingShowOutputAssert) HasDetailedTargetAccounts(expected string) *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueSet("detailed_target_accounts", expected))
	return l
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (l *ListingShowOutputAssert) HasNoGlobalName() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("global_name"))
	return l
}

func (l *ListingShowOutputAssert) HasNoName() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("name"))
	return l
}

func (l *ListingShowOutputAssert) HasNoTitle() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("title"))
	return l
}

func (l *ListingShowOutputAssert) HasNoSubtitle() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("subtitle"))
	return l
}

func (l *ListingShowOutputAssert) HasNoProfile() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("profile"))
	return l
}

func (l *ListingShowOutputAssert) HasNoCreatedOn() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("created_on"))
	return l
}

func (l *ListingShowOutputAssert) HasNoUpdatedOn() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("updated_on"))
	return l
}

func (l *ListingShowOutputAssert) HasNoPublishedOn() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("published_on"))
	return l
}

func (l *ListingShowOutputAssert) HasNoState() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("state"))
	return l
}

func (l *ListingShowOutputAssert) HasNoReviewState() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("review_state"))
	return l
}

func (l *ListingShowOutputAssert) HasNoComment() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("comment"))
	return l
}

func (l *ListingShowOutputAssert) HasNoOwner() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("owner"))
	return l
}

func (l *ListingShowOutputAssert) HasNoOwnerRoleType() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("owner_role_type"))
	return l
}

func (l *ListingShowOutputAssert) HasNoRegions() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("regions"))
	return l
}

func (l *ListingShowOutputAssert) HasNoTargetAccounts() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("target_accounts"))
	return l
}

func (l *ListingShowOutputAssert) HasNoIsMonetized() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueNotSet("is_monetized"))
	return l
}

func (l *ListingShowOutputAssert) HasNoIsApplication() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueNotSet("is_application"))
	return l
}

func (l *ListingShowOutputAssert) HasNoIsTargeted() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueNotSet("is_targeted"))
	return l
}

func (l *ListingShowOutputAssert) HasNoIsLimitedTrial() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueNotSet("is_limited_trial"))
	return l
}

func (l *ListingShowOutputAssert) HasNoIsByRequest() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueNotSet("is_by_request"))
	return l
}

func (l *ListingShowOutputAssert) HasNoDistribution() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("distribution"))
	return l
}

func (l *ListingShowOutputAssert) HasNoIsMountlessQueryable() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputBoolValueNotSet("is_mountless_queryable"))
	return l
}

func (l *ListingShowOutputAssert) HasNoRejectedOn() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("rejected_on"))
	return l
}

func (l *ListingShowOutputAssert) HasNoOrganizationProfileName() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("organization_profile_name"))
	return l
}

func (l *ListingShowOutputAssert) HasNoUniformListingLocator() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("uniform_listing_locator"))
	return l
}

func (l *ListingShowOutputAssert) HasNoDetailedTargetAccounts() *ListingShowOutputAssert {
	l.AddAssertion(assert.ResourceShowOutputValueNotSet("detailed_target_accounts"))
	return l
}
