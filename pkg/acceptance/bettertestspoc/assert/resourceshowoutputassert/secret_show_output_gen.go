// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type SecretShowOutputAssert struct {
	*assert.ResourceAssert
}

func SecretShowOutput(t *testing.T, name string) *SecretShowOutputAssert {
	t.Helper()

	secretAssert := SecretShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	secretAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &secretAssert
}

func ImportedSecretShowOutput(t *testing.T, id string) *SecretShowOutputAssert {
	t.Helper()

	secretAssert := SecretShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	secretAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &secretAssert
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (s *SecretShowOutputAssert) HasCreatedOn(expected time.Time) *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected.String()))
	return s
}

func (s *SecretShowOutputAssert) HasName(expected string) *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return s
}

func (s *SecretShowOutputAssert) HasSchemaName(expected string) *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("schema_name", expected))
	return s
}

func (s *SecretShowOutputAssert) HasDatabaseName(expected string) *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("database_name", expected))
	return s
}

func (s *SecretShowOutputAssert) HasOwner(expected string) *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return s
}

func (s *SecretShowOutputAssert) HasComment(expected string) *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return s
}

func (s *SecretShowOutputAssert) HasSecretType(expected string) *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("secret_type", expected))
	return s
}

func (s *SecretShowOutputAssert) HasOwnerRoleType(expected string) *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", expected))
	return s
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (s *SecretShowOutputAssert) HasNoCreatedOn() *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("created_on"))
	return s
}

func (s *SecretShowOutputAssert) HasNoName() *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("name"))
	return s
}

func (s *SecretShowOutputAssert) HasNoSchemaName() *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("schema_name"))
	return s
}

func (s *SecretShowOutputAssert) HasNoDatabaseName() *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("database_name"))
	return s
}

func (s *SecretShowOutputAssert) HasNoOwner() *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("owner"))
	return s
}

func (s *SecretShowOutputAssert) HasNoComment() *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("comment"))
	return s
}

func (s *SecretShowOutputAssert) HasNoSecretType() *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("secret_type"))
	return s
}

func (s *SecretShowOutputAssert) HasNoOauthScopes() *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("oauth_scopes.#", "0"))
	return s
}

func (s *SecretShowOutputAssert) HasNoOwnerRoleType() *SecretShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("owner_role_type"))
	return s
}
