// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type SemanticViewShowOutputAssert struct {
	*assert.ResourceAssert
}

func SemanticViewShowOutput(t *testing.T, name string) *SemanticViewShowOutputAssert {
	t.Helper()

	semanticViewAssert := SemanticViewShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	semanticViewAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &semanticViewAssert
}

func ImportedSemanticViewShowOutput(t *testing.T, id string) *SemanticViewShowOutputAssert {
	t.Helper()

	semanticViewAssert := SemanticViewShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	semanticViewAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &semanticViewAssert
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (s *SemanticViewShowOutputAssert) HasCreatedOn(expected time.Time) *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected.String()))
	return s
}

func (s *SemanticViewShowOutputAssert) HasName(expected string) *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return s
}

func (s *SemanticViewShowOutputAssert) HasDatabaseName(expected string) *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("database_name", expected))
	return s
}

func (s *SemanticViewShowOutputAssert) HasSchemaName(expected string) *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("schema_name", expected))
	return s
}

func (s *SemanticViewShowOutputAssert) HasComment(expected string) *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return s
}

func (s *SemanticViewShowOutputAssert) HasOwner(expected string) *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return s
}

func (s *SemanticViewShowOutputAssert) HasOwnerRoleType(expected string) *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", expected))
	return s
}

func (s *SemanticViewShowOutputAssert) HasExtension(expected string) *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("extension", expected))
	return s
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (s *SemanticViewShowOutputAssert) HasNoCreatedOn() *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("created_on"))
	return s
}

func (s *SemanticViewShowOutputAssert) HasNoName() *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("name"))
	return s
}

func (s *SemanticViewShowOutputAssert) HasNoDatabaseName() *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("database_name"))
	return s
}

func (s *SemanticViewShowOutputAssert) HasNoSchemaName() *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("schema_name"))
	return s
}

func (s *SemanticViewShowOutputAssert) HasNoComment() *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("comment"))
	return s
}

func (s *SemanticViewShowOutputAssert) HasNoOwner() *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("owner"))
	return s
}

func (s *SemanticViewShowOutputAssert) HasNoOwnerRoleType() *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("owner_role_type"))
	return s
}

func (s *SemanticViewShowOutputAssert) HasNoExtension() *SemanticViewShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("extension"))
	return s
}
