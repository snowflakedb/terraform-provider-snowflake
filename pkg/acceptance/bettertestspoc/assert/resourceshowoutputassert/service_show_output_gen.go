// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type ServiceShowOutputAssert struct {
	*assert.ResourceAssert
}

func ServiceShowOutput(t *testing.T, name string) *ServiceShowOutputAssert {
	t.Helper()

	s := ServiceShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	s.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &s
}

func ImportedServiceShowOutput(t *testing.T, id string) *ServiceShowOutputAssert {
	t.Helper()

	s := ServiceShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	s.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &s
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (s *ServiceShowOutputAssert) HasName(expected string) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasStatus(expected sdk.ServiceStatus) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("status", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasDatabaseName(expected string) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("database_name", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasSchemaName(expected string) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("schema_name", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasOwner(expected string) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasComputePool(expected sdk.AccountObjectIdentifier) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("compute_pool", expected.Name()))
	return s
}

func (s *ServiceShowOutputAssert) HasDnsName(expected string) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("dns_name", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasCurrentInstances(expected int) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputIntValueSet("current_instances", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasTargetInstances(expected int) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputIntValueSet("target_instances", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasMinReadyInstances(expected int) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputIntValueSet("min_ready_instances", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasMinInstances(expected int) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputIntValueSet("min_instances", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasMaxInstances(expected int) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputIntValueSet("max_instances", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasAutoResume(expected bool) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputBoolValueSet("auto_resume", expected))
	return s
}

// Adjusted manually.
// func (s *ServiceShowOutputAssert) HasExternalAccessIntegrations(expected []sdk.AccountObjectIdentifier) *ServiceShowOutputAssert {
// 	s.AddAssertion(assert.ResourceShowOutputValueSet("external_access_integrations", expected))
// 	return s
// }

func (s *ServiceShowOutputAssert) HasCreatedOn(expected time.Time) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected.String()))
	return s
}

func (s *ServiceShowOutputAssert) HasUpdatedOn(expected time.Time) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("updated_on", expected.String()))
	return s
}

func (s *ServiceShowOutputAssert) HasResumedOn(expected time.Time) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("resumed_on", expected.String()))
	return s
}

func (s *ServiceShowOutputAssert) HasSuspendedOn(expected time.Time) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("suspended_on", expected.String()))
	return s
}

func (s *ServiceShowOutputAssert) HasAutoSuspendSecs(expected int) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputIntValueSet("auto_suspend_secs", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasComment(expected string) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasOwnerRoleType(expected string) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasQueryWarehouse(expected sdk.AccountObjectIdentifier) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("query_warehouse", expected.Name()))
	return s
}

func (s *ServiceShowOutputAssert) HasIsJob(expected bool) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_job", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasIsAsyncJob(expected bool) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_async_job", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasSpecDigest(expected string) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("spec_digest", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasIsUpgrading(expected bool) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_upgrading", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasManagingObjectDomain(expected string) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("managing_object_domain", expected))
	return s
}

func (s *ServiceShowOutputAssert) HasManagingObjectName(expected string) *ServiceShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("managing_object_name", expected))
	return s
}
