// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type ConnectionShowOutputAssert struct {
	*assert.ResourceAssert
}

func ConnectionShowOutput(t *testing.T, name string) *ConnectionShowOutputAssert {
	t.Helper()

	connectionAssert := ConnectionShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	connectionAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &connectionAssert
}

func ImportedConnectionShowOutput(t *testing.T, id string) *ConnectionShowOutputAssert {
	t.Helper()

	connectionAssert := ConnectionShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	connectionAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &connectionAssert
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (c *ConnectionShowOutputAssert) HasRegionGroup(expected string) *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueSet("region_group", expected))
	return c
}

func (c *ConnectionShowOutputAssert) HasSnowflakeRegion(expected string) *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueSet("snowflake_region", expected))
	return c
}

func (c *ConnectionShowOutputAssert) HasCreatedOn(expected time.Time) *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected.String()))
	return c
}

func (c *ConnectionShowOutputAssert) HasAccountName(expected string) *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueSet("account_name", expected))
	return c
}

func (c *ConnectionShowOutputAssert) HasName(expected string) *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return c
}

func (c *ConnectionShowOutputAssert) HasComment(expected string) *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return c
}

func (c *ConnectionShowOutputAssert) HasIsPrimary(expected bool) *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputBoolValueSet("is_primary", expected))
	return c
}

func (c *ConnectionShowOutputAssert) HasPrimary(expected sdk.ExternalObjectIdentifier) *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("primary", expected.FullyQualifiedName()))
	return c
}

func (c *ConnectionShowOutputAssert) HasConnectionUrl(expected string) *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueSet("connection_url", expected))
	return c
}

func (c *ConnectionShowOutputAssert) HasOrganizationName(expected string) *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueSet("organization_name", expected))
	return c
}

func (c *ConnectionShowOutputAssert) HasAccountLocator(expected string) *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueSet("account_locator", expected))
	return c
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (c *ConnectionShowOutputAssert) HasNoRegionGroup() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueNotSet("region_group"))
	return c
}

func (c *ConnectionShowOutputAssert) HasNoSnowflakeRegion() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueNotSet("snowflake_region"))
	return c
}

func (c *ConnectionShowOutputAssert) HasNoCreatedOn() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueNotSet("created_on"))
	return c
}

func (c *ConnectionShowOutputAssert) HasNoAccountName() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueNotSet("account_name"))
	return c
}

func (c *ConnectionShowOutputAssert) HasNoName() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueNotSet("name"))
	return c
}

func (c *ConnectionShowOutputAssert) HasNoComment() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueNotSet("comment"))
	return c
}

func (c *ConnectionShowOutputAssert) HasNoIsPrimary() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputBoolValueNotSet("is_primary"))
	return c
}

func (c *ConnectionShowOutputAssert) HasNoPrimary() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("primary"))
	return c
}

func (c *ConnectionShowOutputAssert) HasNoFailoverAllowedToAccounts() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueSet("failover_allowed_to_accounts.#", "0"))
	return c
}

func (c *ConnectionShowOutputAssert) HasNoConnectionUrl() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueNotSet("connection_url"))
	return c
}

func (c *ConnectionShowOutputAssert) HasNoOrganizationName() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueNotSet("organization_name"))
	return c
}

func (c *ConnectionShowOutputAssert) HasNoAccountLocator() *ConnectionShowOutputAssert {
	c.AddAssertion(assert.ResourceShowOutputValueNotSet("account_locator"))
	return c
}
