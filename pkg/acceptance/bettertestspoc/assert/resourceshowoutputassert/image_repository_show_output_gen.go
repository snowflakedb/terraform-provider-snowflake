// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type ImageRepositoryShowOutputAssert struct {
	*assert.ResourceAssert
}

func ImageRepositoryShowOutput(t *testing.T, name string) *ImageRepositoryShowOutputAssert {
	t.Helper()

	imageRepositoryAssert := ImageRepositoryShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	imageRepositoryAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &imageRepositoryAssert
}

func ImportedImageRepositoryShowOutput(t *testing.T, id string) *ImageRepositoryShowOutputAssert {
	t.Helper()

	imageRepositoryAssert := ImageRepositoryShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	imageRepositoryAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &imageRepositoryAssert
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (i *ImageRepositoryShowOutputAssert) HasCreatedOn(expected time.Time) *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected.String()))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasName(expected string) *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasDatabaseName(expected string) *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueSet("database_name", expected))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasSchemaName(expected string) *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueSet("schema_name", expected))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasRepositoryUrl(expected string) *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueSet("repository_url", expected))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasOwner(expected string) *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasOwnerRoleType(expected string) *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", expected))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasComment(expected string) *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasPrivatelinkRepositoryUrl(expected string) *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueSet("privatelink_repository_url", expected))
	return i
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (i *ImageRepositoryShowOutputAssert) HasNoCreatedOn() *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueNotSet("created_on"))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasNoName() *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueNotSet("name"))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasNoDatabaseName() *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueNotSet("database_name"))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasNoSchemaName() *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueNotSet("schema_name"))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasNoRepositoryUrl() *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueNotSet("repository_url"))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasNoOwner() *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueNotSet("owner"))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasNoOwnerRoleType() *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueNotSet("owner_role_type"))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasNoComment() *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueNotSet("comment"))
	return i
}

func (i *ImageRepositoryShowOutputAssert) HasNoPrivatelinkRepositoryUrl() *ImageRepositoryShowOutputAssert {
	i.AddAssertion(assert.ResourceShowOutputValueNotSet("privatelink_repository_url"))
	return i
}
