// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type StreamShowOutputAssert struct {
	*assert.ResourceAssert
}

func StreamShowOutput(t *testing.T, name string) *StreamShowOutputAssert {
	t.Helper()

	streamAssert := StreamShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	streamAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &streamAssert
}

func ImportedStreamShowOutput(t *testing.T, id string) *StreamShowOutputAssert {
	t.Helper()

	streamAssert := StreamShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	streamAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &streamAssert
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (s *StreamShowOutputAssert) HasCreatedOn(expected time.Time) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected.String()))
	return s
}

func (s *StreamShowOutputAssert) HasName(expected string) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return s
}

func (s *StreamShowOutputAssert) HasDatabaseName(expected string) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("database_name", expected))
	return s
}

func (s *StreamShowOutputAssert) HasSchemaName(expected string) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("schema_name", expected))
	return s
}

func (s *StreamShowOutputAssert) HasOwner(expected string) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return s
}

func (s *StreamShowOutputAssert) HasComment(expected string) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return s
}

func (s *StreamShowOutputAssert) HasTableName(expected string) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("table_name", expected))
	return s
}

func (s *StreamShowOutputAssert) HasSourceType(expected sdk.StreamSourceType) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("source_type", expected))
	return s
}

func (s *StreamShowOutputAssert) HasType(expected string) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("type", expected))
	return s
}

func (s *StreamShowOutputAssert) HasStale(expected bool) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputBoolValueSet("stale", expected))
	return s
}

func (s *StreamShowOutputAssert) HasMode(expected sdk.StreamMode) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("mode", expected))
	return s
}

func (s *StreamShowOutputAssert) HasStaleAfter(expected time.Time) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("stale_after", expected.String()))
	return s
}

func (s *StreamShowOutputAssert) HasInvalidReason(expected string) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("invalid_reason", expected))
	return s
}

func (s *StreamShowOutputAssert) HasOwnerRoleType(expected string) *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", expected))
	return s
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (s *StreamShowOutputAssert) HasNoCreatedOn() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("created_on"))
	return s
}

func (s *StreamShowOutputAssert) HasNoName() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("name"))
	return s
}

func (s *StreamShowOutputAssert) HasNoDatabaseName() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("database_name"))
	return s
}

func (s *StreamShowOutputAssert) HasNoSchemaName() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("schema_name"))
	return s
}

func (s *StreamShowOutputAssert) HasNoOwner() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("owner"))
	return s
}

func (s *StreamShowOutputAssert) HasNoComment() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("comment"))
	return s
}

func (s *StreamShowOutputAssert) HasNoTableName() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("table_name"))
	return s
}

func (s *StreamShowOutputAssert) HasNoSourceType() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("source_type"))
	return s
}

func (s *StreamShowOutputAssert) HasNoBaseTables() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("base_tables.#", "0"))
	return s
}

func (s *StreamShowOutputAssert) HasNoType() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("type"))
	return s
}

func (s *StreamShowOutputAssert) HasNoStale() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputBoolValueNotSet("stale"))
	return s
}

func (s *StreamShowOutputAssert) HasNoMode() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("mode"))
	return s
}

func (s *StreamShowOutputAssert) HasNoStaleAfter() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("stale_after"))
	return s
}

func (s *StreamShowOutputAssert) HasNoInvalidReason() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("invalid_reason"))
	return s
}

func (s *StreamShowOutputAssert) HasNoOwnerRoleType() *StreamShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("owner_role_type"))
	return s
}
