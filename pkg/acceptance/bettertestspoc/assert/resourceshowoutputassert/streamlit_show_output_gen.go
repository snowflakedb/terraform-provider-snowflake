// Code generated by resource show output assertions generator (v0.1.0); DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type StreamlitShowOutputAssert struct {
	*assert.ResourceAssert
}

func StreamlitShowOutput(t *testing.T, name string) *StreamlitShowOutputAssert {
	t.Helper()

	streamlitAssert := StreamlitShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	streamlitAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &streamlitAssert
}

func ImportedStreamlitShowOutput(t *testing.T, id string) *StreamlitShowOutputAssert {
	t.Helper()

	streamlitAssert := StreamlitShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	streamlitAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &streamlitAssert
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (s *StreamlitShowOutputAssert) HasCreatedOn(expected string) *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected))
	return s
}

func (s *StreamlitShowOutputAssert) HasName(expected string) *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return s
}

func (s *StreamlitShowOutputAssert) HasDatabaseName(expected string) *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("database_name", expected))
	return s
}

func (s *StreamlitShowOutputAssert) HasSchemaName(expected string) *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("schema_name", expected))
	return s
}

func (s *StreamlitShowOutputAssert) HasTitle(expected string) *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("title", expected))
	return s
}

func (s *StreamlitShowOutputAssert) HasOwner(expected string) *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return s
}

func (s *StreamlitShowOutputAssert) HasComment(expected string) *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return s
}

func (s *StreamlitShowOutputAssert) HasQueryWarehouse(expected string) *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("query_warehouse", expected))
	return s
}

func (s *StreamlitShowOutputAssert) HasUrlId(expected string) *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("url_id", expected))
	return s
}

func (s *StreamlitShowOutputAssert) HasOwnerRoleType(expected string) *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", expected))
	return s
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (s *StreamlitShowOutputAssert) HasNoCreatedOn() *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("created_on"))
	return s
}

func (s *StreamlitShowOutputAssert) HasNoName() *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("name"))
	return s
}

func (s *StreamlitShowOutputAssert) HasNoDatabaseName() *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("database_name"))
	return s
}

func (s *StreamlitShowOutputAssert) HasNoSchemaName() *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("schema_name"))
	return s
}

func (s *StreamlitShowOutputAssert) HasNoTitle() *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("title"))
	return s
}

func (s *StreamlitShowOutputAssert) HasNoOwner() *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("owner"))
	return s
}

func (s *StreamlitShowOutputAssert) HasNoComment() *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("comment"))
	return s
}

func (s *StreamlitShowOutputAssert) HasNoQueryWarehouse() *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("query_warehouse"))
	return s
}

func (s *StreamlitShowOutputAssert) HasNoUrlId() *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("url_id"))
	return s
}

func (s *StreamlitShowOutputAssert) HasNoOwnerRoleType() *StreamlitShowOutputAssert {
	s.AddAssertion(assert.ResourceShowOutputValueNotSet("owner_role_type"))
	return s
}
