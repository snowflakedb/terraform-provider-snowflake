// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type GitRepositoryShowOutputAssert struct {
	*assert.ResourceAssert
}

func GitRepositoryShowOutput(t *testing.T, name string) *GitRepositoryShowOutputAssert {
	t.Helper()

	gitRepositoryAssert := GitRepositoryShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	gitRepositoryAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &gitRepositoryAssert
}

func ImportedGitRepositoryShowOutput(t *testing.T, id string) *GitRepositoryShowOutputAssert {
	t.Helper()

	gitRepositoryAssert := GitRepositoryShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	gitRepositoryAssert.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &gitRepositoryAssert
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (g *GitRepositoryShowOutputAssert) HasCreatedOn(expected time.Time) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected.String()))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasName(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasDatabaseName(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("database_name", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasSchemaName(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("schema_name", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasOrigin(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("origin", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasApiIntegration(expected sdk.AccountObjectIdentifier) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("api_integration", expected.Name()))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasGitCredentials(expected sdk.SchemaObjectIdentifier) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("git_credentials", expected.FullyQualifiedName()))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasOwner(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasOwnerRoleType(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasComment(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasLastFetchedAt(expected time.Time) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("last_fetched_at", expected.String()))
	return g
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (g *GitRepositoryShowOutputAssert) HasNoCreatedOn() *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueNotSet("created_on"))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasNoName() *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueNotSet("name"))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasNoDatabaseName() *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueNotSet("database_name"))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasNoSchemaName() *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueNotSet("schema_name"))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasNoOrigin() *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueNotSet("origin"))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasNoApiIntegration() *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("api_integration"))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasNoGitCredentials() *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueNotSet("git_credentials"))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasNoOwner() *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueNotSet("owner"))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasNoOwnerRoleType() *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueNotSet("owner_role_type"))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasNoComment() *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueNotSet("comment"))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasNoLastFetchedAt() *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueNotSet("last_fetched_at"))
	return g
}
