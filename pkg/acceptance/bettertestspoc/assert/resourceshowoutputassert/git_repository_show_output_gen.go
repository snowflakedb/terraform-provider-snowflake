// Code generated by assertions generator; DO NOT EDIT.

package resourceshowoutputassert

import (
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

// to ensure sdk package is used
var _ = sdk.Object{}

type GitRepositoryShowOutputAssert struct {
	*assert.ResourceAssert
}

func GitRepositoryShowOutput(t *testing.T, name string) *GitRepositoryShowOutputAssert {
	t.Helper()

	g := GitRepositoryShowOutputAssert{
		ResourceAssert: assert.NewResourceAssert(name, "show_output"),
	}
	g.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &g
}

func ImportedGitRepositoryShowOutput(t *testing.T, id string) *GitRepositoryShowOutputAssert {
	t.Helper()

	g := GitRepositoryShowOutputAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "show_output"),
	}
	g.AddAssertion(assert.ValueSet("show_output.#", "1"))
	return &g
}

////////////////////////////
// Attribute value checks //
////////////////////////////

func (g *GitRepositoryShowOutputAssert) HasCreatedOn(expected time.Time) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("created_on", expected.String()))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasName(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("name", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasDatabaseName(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("database_name", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasSchemaName(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("schema_name", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasOrigin(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("origin", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasApiIntegration(expected sdk.AccountObjectIdentifier) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("api_integration", expected.Name()))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasGitCredentials(expected sdk.SchemaObjectIdentifier) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputStringUnderlyingValueSet("git_credentials", expected.FullyQualifiedName()))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasOwner(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("owner", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasOwnerRoleType(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("owner_role_type", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasComment(expected string) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("comment", expected))
	return g
}

func (g *GitRepositoryShowOutputAssert) HasLastFetchedAt(expected time.Time) *GitRepositoryShowOutputAssert {
	g.AddAssertion(assert.ResourceShowOutputValueSet("last_fetched_at", expected.String()))
	return g
}
