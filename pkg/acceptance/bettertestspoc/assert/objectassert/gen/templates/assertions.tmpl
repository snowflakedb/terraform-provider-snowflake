{{- /*gotype: github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert/objectassert/gen.SnowflakeObjectAssertionsModel*/ -}}

{{ $assertName := .Name | printf "%sAssert" }}
{{ $sdkType := .SdkType }}
{{ $nameLowerCase := FirstLetterLowercase .Name }}
{{ $assertVar := FirstLetter $nameLowerCase }}
{{- range .Fields }}
    {{ $itemType := TypeWithoutPointerAndBrackets .ConcreteType }}
    func ({{ $assertVar }} *{{ $assertName }}) Has{{ .Name }}(expected {{ if .IsOriginalTypeSlice }}...{{ end }}{{ $itemType }}) *{{ $assertName }} {
        {{ $assertVar }}.AddAssertion(func(t *testing.T, o *{{ $sdkType }}) error {
            t.Helper()
            {{ if .IsOriginalTypeSlice -}}
            mapped := collections.Map(o.{{ .Name }}, func(item {{ $itemType }}) any { return {{ RunMapper .Mapper "item" }} })
            mappedExpected := collections.Map(expected, func(item {{ $itemType }}) any { return {{ RunMapper .ExpectedValueMapper "item" }} })
            if !slices.Equal(mapped, mappedExpected) {
                return fmt.Errorf("expected {{ CamelToWords .Name }}: %v; got: %v", expected, o.{{ .Name }})
            }
            {{ else -}}
            {{ if .IsOriginalTypePointer -}}
            if o.{{ .Name }} == nil {
                return fmt.Errorf("expected {{ CamelToWords .Name }} to have value; got: nil")
            }
            {{ end -}}
            if {{ RunMapper .Mapper "o." .Name }} != {{ RunMapper .ExpectedValueMapper "expected" }} {
                return fmt.Errorf("expected {{ CamelToWords .Name }}: %v; got: %v", {{ RunMapper .ExpectedValueMapper "expected" }}, {{ RunMapper .Mapper "o." .Name }})
            }
            {{ end -}}
            return nil
        })
        return {{ $assertVar }}
    }
{{ end }}
