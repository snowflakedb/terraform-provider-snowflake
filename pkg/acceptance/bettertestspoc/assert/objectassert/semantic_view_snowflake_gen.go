// Code generated by object assertions generator (v0.1.0); DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type SemanticViewAssert struct {
	*assert.SnowflakeObjectAssert[sdk.SemanticView, sdk.SchemaObjectIdentifier]
}

func SemanticView(t *testing.T, id sdk.SchemaObjectIdentifier) *SemanticViewAssert {
	t.Helper()
	return &SemanticViewAssert{
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectTypeSemanticView, id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.SemanticView, sdk.SchemaObjectIdentifier] {
			return testClient.SemanticView.Show
		}),
	}
}

func SemanticViewFromObject(t *testing.T, semanticView *sdk.SemanticView) *SemanticViewAssert {
	t.Helper()
	return &SemanticViewAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeSemanticView, semanticView.ID(), semanticView),
	}
}

func (s *SemanticViewAssert) HasCreatedOn(expected time.Time) *SemanticViewAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SemanticView) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return s
}

func (s *SemanticViewAssert) HasName(expected string) *SemanticViewAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SemanticView) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return s
}

func (s *SemanticViewAssert) HasDatabaseName(expected string) *SemanticViewAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SemanticView) error {
		t.Helper()
		if o.DatabaseName != expected {
			return fmt.Errorf("expected database name: %v; got: %v", expected, o.DatabaseName)
		}
		return nil
	})
	return s
}

func (s *SemanticViewAssert) HasSchemaName(expected string) *SemanticViewAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SemanticView) error {
		t.Helper()
		if o.SchemaName != expected {
			return fmt.Errorf("expected schema name: %v; got: %v", expected, o.SchemaName)
		}
		return nil
	})
	return s
}

func (s *SemanticViewAssert) HasComment(expected string) *SemanticViewAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SemanticView) error {
		t.Helper()
		if o.Comment == nil {
			return fmt.Errorf("expected comment to have value; got: nil")
		}
		if *o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, *o.Comment)
		}
		return nil
	})
	return s
}

func (s *SemanticViewAssert) HasOwner(expected string) *SemanticViewAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SemanticView) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return s
}

func (s *SemanticViewAssert) HasOwnerRoleType(expected string) *SemanticViewAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SemanticView) error {
		t.Helper()
		if o.OwnerRoleType != expected {
			return fmt.Errorf("expected owner role type: %v; got: %v", expected, o.OwnerRoleType)
		}
		return nil
	})
	return s
}

func (s *SemanticViewAssert) HasExtension(expected string) *SemanticViewAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SemanticView) error {
		t.Helper()
		if o.Extension == nil {
			return fmt.Errorf("expected extension to have value; got: nil")
		}
		if *o.Extension != expected {
			return fmt.Errorf("expected extension: %v; got: %v", expected, *o.Extension)
		}
		return nil
	})
	return s
}
