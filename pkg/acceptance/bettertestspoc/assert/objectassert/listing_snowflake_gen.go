// Code generated by assertions generator; DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type ListingAssert struct {
	*assert.SnowflakeObjectAssert[sdk.Listing, sdk.AccountObjectIdentifier]
}

func Listing(t *testing.T, id sdk.AccountObjectIdentifier) *ListingAssert {
	t.Helper()
	return &ListingAssert{
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectTypeListing, id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.Listing, sdk.AccountObjectIdentifier] {
			return testClient.Listing.Show
		}),
	}
}

func ListingFromObject(t *testing.T, listing *sdk.Listing) *ListingAssert {
	t.Helper()
	return &ListingAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeListing, listing.ID(), listing),
	}
}

func (l *ListingAssert) HasGlobalName(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.GlobalName != expected {
			return fmt.Errorf("expected global name: %v; got: %v", expected, o.GlobalName)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasName(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasTitle(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.Title != expected {
			return fmt.Errorf("expected title: %v; got: %v", expected, o.Title)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasSubtitle(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.Subtitle == nil {
			return fmt.Errorf("expected subtitle to have value; got: nil")
		}
		if *o.Subtitle != expected {
			return fmt.Errorf("expected subtitle: %v; got: %v", expected, *o.Subtitle)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasProfile(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.Profile != expected {
			return fmt.Errorf("expected profile: %v; got: %v", expected, o.Profile)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasCreatedOn(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasUpdatedOn(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.UpdatedOn != expected {
			return fmt.Errorf("expected updated on: %v; got: %v", expected, o.UpdatedOn)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasPublishedOn(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.PublishedOn == nil {
			return fmt.Errorf("expected published on to have value; got: nil")
		}
		if *o.PublishedOn != expected {
			return fmt.Errorf("expected published on: %v; got: %v", expected, *o.PublishedOn)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasState(expected sdk.ListingState) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.State != expected {
			return fmt.Errorf("expected state: %v; got: %v", expected, o.State)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasReviewState(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.ReviewState == nil {
			return fmt.Errorf("expected review state to have value; got: nil")
		}
		if *o.ReviewState != expected {
			return fmt.Errorf("expected review state: %v; got: %v", expected, *o.ReviewState)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasComment(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.Comment == nil {
			return fmt.Errorf("expected comment to have value; got: nil")
		}
		if *o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, *o.Comment)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasOwner(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasOwnerRoleType(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.OwnerRoleType != expected {
			return fmt.Errorf("expected owner role type: %v; got: %v", expected, o.OwnerRoleType)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasRegions(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.Regions == nil {
			return fmt.Errorf("expected regions to have value; got: nil")
		}
		if *o.Regions != expected {
			return fmt.Errorf("expected regions: %v; got: %v", expected, *o.Regions)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasTargetAccounts(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.TargetAccounts != expected {
			return fmt.Errorf("expected target accounts: %v; got: %v", expected, o.TargetAccounts)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasIsMonetized(expected bool) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.IsMonetized != expected {
			return fmt.Errorf("expected is monetized: %v; got: %v", expected, o.IsMonetized)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasIsApplication(expected bool) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.IsApplication != expected {
			return fmt.Errorf("expected is application: %v; got: %v", expected, o.IsApplication)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasIsTargeted(expected bool) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.IsTargeted != expected {
			return fmt.Errorf("expected is targeted: %v; got: %v", expected, o.IsTargeted)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasIsLimitedTrial(expected bool) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.IsLimitedTrial == nil {
			return fmt.Errorf("expected is limited trial to have value; got: nil")
		}
		if *o.IsLimitedTrial != expected {
			return fmt.Errorf("expected is limited trial: %v; got: %v", expected, *o.IsLimitedTrial)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasIsByRequest(expected bool) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.IsByRequest == nil {
			return fmt.Errorf("expected is by request to have value; got: nil")
		}
		if *o.IsByRequest != expected {
			return fmt.Errorf("expected is by request: %v; got: %v", expected, *o.IsByRequest)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasDistribution(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.Distribution == nil {
			return fmt.Errorf("expected distribution to have value; got: nil")
		}
		if *o.Distribution != expected {
			return fmt.Errorf("expected distribution: %v; got: %v", expected, *o.Distribution)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasIsMountlessQueryable(expected bool) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.IsMountlessQueryable == nil {
			return fmt.Errorf("expected is mountless queryable to have value; got: nil")
		}
		if *o.IsMountlessQueryable != expected {
			return fmt.Errorf("expected is mountless queryable: %v; got: %v", expected, *o.IsMountlessQueryable)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasRejectedOn(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.RejectedOn == nil {
			return fmt.Errorf("expected rejected on to have value; got: nil")
		}
		if *o.RejectedOn != expected {
			return fmt.Errorf("expected rejected on: %v; got: %v", expected, *o.RejectedOn)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasOrganizationProfileName(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.OrganizationProfileName == nil {
			return fmt.Errorf("expected organization profile name to have value; got: nil")
		}
		if *o.OrganizationProfileName != expected {
			return fmt.Errorf("expected organization profile name: %v; got: %v", expected, *o.OrganizationProfileName)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasUniformListingLocator(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.UniformListingLocator == nil {
			return fmt.Errorf("expected uniform listing locator to have value; got: nil")
		}
		if *o.UniformListingLocator != expected {
			return fmt.Errorf("expected uniform listing locator: %v; got: %v", expected, *o.UniformListingLocator)
		}
		return nil
	})
	return l
}

func (l *ListingAssert) HasDetailedTargetAccounts(expected string) *ListingAssert {
	l.AddAssertion(func(t *testing.T, o *sdk.Listing) error {
		t.Helper()
		if o.DetailedTargetAccounts == nil {
			return fmt.Errorf("expected detailed target accounts to have value; got: nil")
		}
		if *o.DetailedTargetAccounts != expected {
			return fmt.Errorf("expected detailed target accounts: %v; got: %v", expected, *o.DetailedTargetAccounts)
		}
		return nil
	})
	return l
}
