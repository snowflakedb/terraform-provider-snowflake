// Code generated by object assertions generator (v0.1.0); DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type NetworkPolicyAssert struct {
	*assert.SnowflakeObjectAssert[sdk.NetworkPolicy, sdk.AccountObjectIdentifier]
}

func NetworkPolicy(t *testing.T, id sdk.AccountObjectIdentifier) *NetworkPolicyAssert {
	t.Helper()
	return &NetworkPolicyAssert{
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectTypeNetworkPolicy, id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.NetworkPolicy, sdk.AccountObjectIdentifier] {
			return testClient.NetworkPolicy.Show
		}),
	}
}

func NetworkPolicyFromObject(t *testing.T, networkPolicy *sdk.NetworkPolicy) *NetworkPolicyAssert {
	t.Helper()
	return &NetworkPolicyAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeNetworkPolicy, networkPolicy.ID(), networkPolicy),
	}
}

func (n *NetworkPolicyAssert) HasCreatedOn(expected string) *NetworkPolicyAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NetworkPolicy) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return n
}

func (n *NetworkPolicyAssert) HasName(expected string) *NetworkPolicyAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NetworkPolicy) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return n
}

func (n *NetworkPolicyAssert) HasComment(expected string) *NetworkPolicyAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NetworkPolicy) error {
		t.Helper()
		if o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, o.Comment)
		}
		return nil
	})
	return n
}

func (n *NetworkPolicyAssert) HasEntriesInAllowedIpList(expected int) *NetworkPolicyAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NetworkPolicy) error {
		t.Helper()
		if o.EntriesInAllowedIpList != expected {
			return fmt.Errorf("expected entries in allowed ip list: %v; got: %v", expected, o.EntriesInAllowedIpList)
		}
		return nil
	})
	return n
}

func (n *NetworkPolicyAssert) HasEntriesInBlockedIpList(expected int) *NetworkPolicyAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NetworkPolicy) error {
		t.Helper()
		if o.EntriesInBlockedIpList != expected {
			return fmt.Errorf("expected entries in blocked ip list: %v; got: %v", expected, o.EntriesInBlockedIpList)
		}
		return nil
	})
	return n
}

func (n *NetworkPolicyAssert) HasEntriesInAllowedNetworkRules(expected int) *NetworkPolicyAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NetworkPolicy) error {
		t.Helper()
		if o.EntriesInAllowedNetworkRules != expected {
			return fmt.Errorf("expected entries in allowed network rules: %v; got: %v", expected, o.EntriesInAllowedNetworkRules)
		}
		return nil
	})
	return n
}

func (n *NetworkPolicyAssert) HasEntriesInBlockedNetworkRules(expected int) *NetworkPolicyAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NetworkPolicy) error {
		t.Helper()
		if o.EntriesInBlockedNetworkRules != expected {
			return fmt.Errorf("expected entries in blocked network rules: %v; got: %v", expected, o.EntriesInBlockedNetworkRules)
		}
		return nil
	})
	return n
}
