// Code generated by assertions generator; DO NOT EDIT.

package objectassert

import (
	"fmt"
	"slices"
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/internal/collections"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type ServiceAssert struct {
	*assert.SnowflakeObjectAssert[sdk.Service, sdk.SchemaObjectIdentifier]
}

func Service(t *testing.T, id sdk.SchemaObjectIdentifier) *ServiceAssert {
	t.Helper()
	return &ServiceAssert{
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectTypeService, id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.Service, sdk.SchemaObjectIdentifier] {
			return testClient.Service.Show
		}),
	}
}

func ServiceFromObject(t *testing.T, service *sdk.Service) *ServiceAssert {
	t.Helper()
	return &ServiceAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeService, service.ID(), service),
	}
}

func (s *ServiceAssert) HasName(expected string) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasStatus(expected sdk.ServiceStatus) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.Status != expected {
			return fmt.Errorf("expected status: %v; got: %v", expected, o.Status)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasDatabaseName(expected string) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.DatabaseName != expected {
			return fmt.Errorf("expected database name: %v; got: %v", expected, o.DatabaseName)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasSchemaName(expected string) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.SchemaName != expected {
			return fmt.Errorf("expected schema name: %v; got: %v", expected, o.SchemaName)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasOwner(expected string) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasComputePool(expected sdk.AccountObjectIdentifier) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.ComputePool.Name() != expected.Name() {
			return fmt.Errorf("expected compute pool: %v; got: %v", expected.Name(), o.ComputePool.Name())
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasDnsName(expected string) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.DnsName != expected {
			return fmt.Errorf("expected dns name: %v; got: %v", expected, o.DnsName)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasCurrentInstances(expected int) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.CurrentInstances != expected {
			return fmt.Errorf("expected current instances: %v; got: %v", expected, o.CurrentInstances)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasTargetInstances(expected int) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.TargetInstances != expected {
			return fmt.Errorf("expected target instances: %v; got: %v", expected, o.TargetInstances)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasMinReadyInstances(expected int) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.MinReadyInstances != expected {
			return fmt.Errorf("expected min ready instances: %v; got: %v", expected, o.MinReadyInstances)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasMinInstances(expected int) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.MinInstances != expected {
			return fmt.Errorf("expected min instances: %v; got: %v", expected, o.MinInstances)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasMaxInstances(expected int) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.MaxInstances != expected {
			return fmt.Errorf("expected max instances: %v; got: %v", expected, o.MaxInstances)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasAutoResume(expected bool) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.AutoResume != expected {
			return fmt.Errorf("expected auto resume: %v; got: %v", expected, o.AutoResume)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasExternalAccessIntegrations(expected ...sdk.AccountObjectIdentifier) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		mapped := collections.Map(o.ExternalAccessIntegrations, func(item sdk.AccountObjectIdentifier) any { return item.Name() })
		mappedExpected := collections.Map(expected, func(item sdk.AccountObjectIdentifier) any { return item.Name() })
		if !slices.Equal(mapped, mappedExpected) {
			return fmt.Errorf("expected external access integrations: %v; got: %v", expected, o.ExternalAccessIntegrations)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasCreatedOn(expected time.Time) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasUpdatedOn(expected time.Time) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.UpdatedOn != expected {
			return fmt.Errorf("expected updated on: %v; got: %v", expected, o.UpdatedOn)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasResumedOn(expected time.Time) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.ResumedOn == nil {
			return fmt.Errorf("expected resumed on to have value; got: nil")
		}
		if *o.ResumedOn != expected {
			return fmt.Errorf("expected resumed on: %v; got: %v", expected, *o.ResumedOn)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasSuspendedOn(expected time.Time) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.SuspendedOn == nil {
			return fmt.Errorf("expected suspended on to have value; got: nil")
		}
		if *o.SuspendedOn != expected {
			return fmt.Errorf("expected suspended on: %v; got: %v", expected, *o.SuspendedOn)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasAutoSuspendSecs(expected int) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.AutoSuspendSecs != expected {
			return fmt.Errorf("expected auto suspend secs: %v; got: %v", expected, o.AutoSuspendSecs)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasComment(expected string) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.Comment == nil {
			return fmt.Errorf("expected comment to have value; got: nil")
		}
		if *o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, *o.Comment)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasOwnerRoleType(expected string) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.OwnerRoleType != expected {
			return fmt.Errorf("expected owner role type: %v; got: %v", expected, o.OwnerRoleType)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasQueryWarehouse(expected sdk.AccountObjectIdentifier) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.QueryWarehouse == nil {
			return fmt.Errorf("expected query warehouse to have value; got: nil")
		}
		if (*o.QueryWarehouse).Name() != expected.Name() {
			return fmt.Errorf("expected query warehouse: %v; got: %v", expected.Name(), (*o.QueryWarehouse).Name())
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasIsJob(expected bool) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.IsJob != expected {
			return fmt.Errorf("expected is job: %v; got: %v", expected, o.IsJob)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasIsAsyncJob(expected bool) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.IsAsyncJob != expected {
			return fmt.Errorf("expected is async job: %v; got: %v", expected, o.IsAsyncJob)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasSpecDigest(expected string) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.SpecDigest != expected {
			return fmt.Errorf("expected spec digest: %v; got: %v", expected, o.SpecDigest)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasIsUpgrading(expected bool) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.IsUpgrading != expected {
			return fmt.Errorf("expected is upgrading: %v; got: %v", expected, o.IsUpgrading)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasManagingObjectDomain(expected string) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.ManagingObjectDomain == nil {
			return fmt.Errorf("expected managing object domain to have value; got: nil")
		}
		if *o.ManagingObjectDomain != expected {
			return fmt.Errorf("expected managing object domain: %v; got: %v", expected, *o.ManagingObjectDomain)
		}
		return nil
	})
	return s
}

func (s *ServiceAssert) HasManagingObjectName(expected string) *ServiceAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Service) error {
		t.Helper()
		if o.ManagingObjectName == nil {
			return fmt.Errorf("expected managing object name to have value; got: nil")
		}
		if *o.ManagingObjectName != expected {
			return fmt.Errorf("expected managing object name: %v; got: %v", expected, *o.ManagingObjectName)
		}
		return nil
	})
	return s
}
