// Code generated by object assertions generator (v0.1.0); DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type StreamlitAssert struct {
	*assert.SnowflakeObjectAssert[sdk.Streamlit, sdk.SchemaObjectIdentifier]
}

func Streamlit(t *testing.T, id sdk.SchemaObjectIdentifier) *StreamlitAssert {
	t.Helper()
	return &StreamlitAssert{
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectTypeStreamlit, id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.Streamlit, sdk.SchemaObjectIdentifier] {
			return testClient.Streamlit.Show
		}),
	}
}

func StreamlitFromObject(t *testing.T, streamlit *sdk.Streamlit) *StreamlitAssert {
	t.Helper()
	return &StreamlitAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeStreamlit, streamlit.ID(), streamlit),
	}
}

func (s *StreamlitAssert) HasCreatedOn(expected string) *StreamlitAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Streamlit) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return s
}

func (s *StreamlitAssert) HasName(expected string) *StreamlitAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Streamlit) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return s
}

func (s *StreamlitAssert) HasDatabaseName(expected string) *StreamlitAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Streamlit) error {
		t.Helper()
		if o.DatabaseName != expected {
			return fmt.Errorf("expected database name: %v; got: %v", expected, o.DatabaseName)
		}
		return nil
	})
	return s
}

func (s *StreamlitAssert) HasSchemaName(expected string) *StreamlitAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Streamlit) error {
		t.Helper()
		if o.SchemaName != expected {
			return fmt.Errorf("expected schema name: %v; got: %v", expected, o.SchemaName)
		}
		return nil
	})
	return s
}

func (s *StreamlitAssert) HasTitle(expected string) *StreamlitAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Streamlit) error {
		t.Helper()
		if o.Title != expected {
			return fmt.Errorf("expected title: %v; got: %v", expected, o.Title)
		}
		return nil
	})
	return s
}

func (s *StreamlitAssert) HasOwner(expected string) *StreamlitAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Streamlit) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return s
}

func (s *StreamlitAssert) HasComment(expected string) *StreamlitAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Streamlit) error {
		t.Helper()
		if o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, o.Comment)
		}
		return nil
	})
	return s
}

func (s *StreamlitAssert) HasQueryWarehouse(expected string) *StreamlitAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Streamlit) error {
		t.Helper()
		if o.QueryWarehouse != expected {
			return fmt.Errorf("expected query warehouse: %v; got: %v", expected, o.QueryWarehouse)
		}
		return nil
	})
	return s
}

func (s *StreamlitAssert) HasUrlId(expected string) *StreamlitAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Streamlit) error {
		t.Helper()
		if o.UrlId != expected {
			return fmt.Errorf("expected url id: %v; got: %v", expected, o.UrlId)
		}
		return nil
	})
	return s
}

func (s *StreamlitAssert) HasOwnerRoleType(expected string) *StreamlitAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Streamlit) error {
		t.Helper()
		if o.OwnerRoleType != expected {
			return fmt.Errorf("expected owner role type: %v; got: %v", expected, o.OwnerRoleType)
		}
		return nil
	})
	return s
}
