// Code generated by object assertions generator (v0.1.0); DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type RoleAssert struct {
	*assert.SnowflakeObjectAssert[sdk.Role, sdk.AccountObjectIdentifier]
}

func Role(t *testing.T, id sdk.AccountObjectIdentifier) *RoleAssert {
	t.Helper()
	return &RoleAssert{
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectTypeRole, id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.Role, sdk.AccountObjectIdentifier] {
			return testClient.Role.Show
		}),
	}
}

func RoleFromObject(t *testing.T, role *sdk.Role) *RoleAssert {
	t.Helper()
	return &RoleAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeRole, role.ID(), role),
	}
}

func (r *RoleAssert) HasCreatedOn(expected time.Time) *RoleAssert {
	r.AddAssertion(func(t *testing.T, o *sdk.Role) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return r
}

func (r *RoleAssert) HasName(expected string) *RoleAssert {
	r.AddAssertion(func(t *testing.T, o *sdk.Role) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return r
}

func (r *RoleAssert) HasIsDefault(expected bool) *RoleAssert {
	r.AddAssertion(func(t *testing.T, o *sdk.Role) error {
		t.Helper()
		if o.IsDefault != expected {
			return fmt.Errorf("expected is default: %v; got: %v", expected, o.IsDefault)
		}
		return nil
	})
	return r
}

func (r *RoleAssert) HasIsCurrent(expected bool) *RoleAssert {
	r.AddAssertion(func(t *testing.T, o *sdk.Role) error {
		t.Helper()
		if o.IsCurrent != expected {
			return fmt.Errorf("expected is current: %v; got: %v", expected, o.IsCurrent)
		}
		return nil
	})
	return r
}

func (r *RoleAssert) HasIsInherited(expected bool) *RoleAssert {
	r.AddAssertion(func(t *testing.T, o *sdk.Role) error {
		t.Helper()
		if o.IsInherited != expected {
			return fmt.Errorf("expected is inherited: %v; got: %v", expected, o.IsInherited)
		}
		return nil
	})
	return r
}

func (r *RoleAssert) HasAssignedToUsers(expected int) *RoleAssert {
	r.AddAssertion(func(t *testing.T, o *sdk.Role) error {
		t.Helper()
		if o.AssignedToUsers != expected {
			return fmt.Errorf("expected assigned to users: %v; got: %v", expected, o.AssignedToUsers)
		}
		return nil
	})
	return r
}

func (r *RoleAssert) HasGrantedToRoles(expected int) *RoleAssert {
	r.AddAssertion(func(t *testing.T, o *sdk.Role) error {
		t.Helper()
		if o.GrantedToRoles != expected {
			return fmt.Errorf("expected granted to roles: %v; got: %v", expected, o.GrantedToRoles)
		}
		return nil
	})
	return r
}

func (r *RoleAssert) HasGrantedRoles(expected int) *RoleAssert {
	r.AddAssertion(func(t *testing.T, o *sdk.Role) error {
		t.Helper()
		if o.GrantedRoles != expected {
			return fmt.Errorf("expected granted roles: %v; got: %v", expected, o.GrantedRoles)
		}
		return nil
	})
	return r
}

func (r *RoleAssert) HasOwner(expected string) *RoleAssert {
	r.AddAssertion(func(t *testing.T, o *sdk.Role) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return r
}

func (r *RoleAssert) HasComment(expected string) *RoleAssert {
	r.AddAssertion(func(t *testing.T, o *sdk.Role) error {
		t.Helper()
		if o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, o.Comment)
		}
		return nil
	})
	return r
}
