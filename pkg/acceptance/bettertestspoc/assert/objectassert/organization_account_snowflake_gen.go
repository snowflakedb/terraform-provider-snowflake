// Code generated by assertions generator; DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type OrganizationAccountAssert struct {
	*assert.SnowflakeObjectAssert[sdk.OrganizationAccount, sdk.AccountObjectIdentifier]
}

func OrganizationAccount(t *testing.T, id sdk.AccountObjectIdentifier) *OrganizationAccountAssert {
	t.Helper()
	return &OrganizationAccountAssert{
		// Manually adjusted
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectTypeAccount, id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.OrganizationAccount, sdk.AccountObjectIdentifier] {
			return testClient.OrganizationAccount.Show
		}),
	}
}

func OrganizationAccountFromObject(t *testing.T, organizationAccount *sdk.OrganizationAccount) *OrganizationAccountAssert {
	t.Helper()
	return &OrganizationAccountAssert{
		// Manually adjusted
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeAccount, organizationAccount.ID().AsAccountObjectIdentifier(), organizationAccount),
	}
}

func (o *OrganizationAccountAssert) HasOrganizationName(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.OrganizationName != expected {
			return fmt.Errorf("expected organization name: %v; got: %v", expected, o.OrganizationName)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasAccountName(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.AccountName != expected {
			return fmt.Errorf("expected account name: %v; got: %v", expected, o.AccountName)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasSnowflakeRegion(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.SnowflakeRegion != expected {
			return fmt.Errorf("expected snowflake region: %v; got: %v", expected, o.SnowflakeRegion)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasEdition(expected sdk.OrganizationAccountEdition) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.Edition != expected {
			return fmt.Errorf("expected edition: %v; got: %v", expected, o.Edition)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasAccountUrl(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.AccountUrl != expected {
			return fmt.Errorf("expected account url: %v; got: %v", expected, o.AccountUrl)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasCreatedOn(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasComment(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.Comment == nil {
			return fmt.Errorf("expected comment to have value; got: nil")
		}
		if *o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, *o.Comment)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasAccountLocator(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.AccountLocator != expected {
			return fmt.Errorf("expected account locator: %v; got: %v", expected, o.AccountLocator)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasAccountLocatorUrl(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.AccountLocatorUrl != expected {
			return fmt.Errorf("expected account locator url: %v; got: %v", expected, o.AccountLocatorUrl)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasManagedAccounts(expected int) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.ManagedAccounts != expected {
			return fmt.Errorf("expected managed accounts: %v; got: %v", expected, o.ManagedAccounts)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasConsumptionBillingEntityName(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.ConsumptionBillingEntityName != expected {
			return fmt.Errorf("expected consumption billing entity name: %v; got: %v", expected, o.ConsumptionBillingEntityName)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasMarketplaceConsumerBillingEntityName(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.MarketplaceConsumerBillingEntityName == nil {
			return fmt.Errorf("expected marketplace consumer billing entity name to have value; got: nil")
		}
		if *o.MarketplaceConsumerBillingEntityName != expected {
			return fmt.Errorf("expected marketplace consumer billing entity name: %v; got: %v", expected, *o.MarketplaceConsumerBillingEntityName)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasMarketplaceProviderBillingEntityName(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.MarketplaceProviderBillingEntityName != expected {
			return fmt.Errorf("expected marketplace provider billing entity name: %v; got: %v", expected, o.MarketplaceProviderBillingEntityName)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasOldAccountUrl(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.OldAccountUrl == nil {
			return fmt.Errorf("expected old account url to have value; got: nil")
		}
		if *o.OldAccountUrl != expected {
			return fmt.Errorf("expected old account url: %v; got: %v", expected, *o.OldAccountUrl)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasIsOrgAdmin(expected bool) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.IsOrgAdmin != expected {
			return fmt.Errorf("expected is org admin: %v; got: %v", expected, o.IsOrgAdmin)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasAccountOldUrlSavedOn(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.AccountOldUrlSavedOn == nil {
			return fmt.Errorf("expected account old url saved on to have value; got: nil")
		}
		if *o.AccountOldUrlSavedOn != expected {
			return fmt.Errorf("expected account old url saved on: %v; got: %v", expected, *o.AccountOldUrlSavedOn)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasAccountOldUrlLastUsed(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.AccountOldUrlLastUsed == nil {
			return fmt.Errorf("expected account old url last used to have value; got: nil")
		}
		if *o.AccountOldUrlLastUsed != expected {
			return fmt.Errorf("expected account old url last used: %v; got: %v", expected, *o.AccountOldUrlLastUsed)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasOrganizationOldUrl(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.OrganizationOldUrl == nil {
			return fmt.Errorf("expected organization old url to have value; got: nil")
		}
		if *o.OrganizationOldUrl != expected {
			return fmt.Errorf("expected organization old url: %v; got: %v", expected, *o.OrganizationOldUrl)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasOrganizationOldUrlSavedOn(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.OrganizationOldUrlSavedOn == nil {
			return fmt.Errorf("expected organization old url saved on to have value; got: nil")
		}
		if *o.OrganizationOldUrlSavedOn != expected {
			return fmt.Errorf("expected organization old url saved on: %v; got: %v", expected, *o.OrganizationOldUrlSavedOn)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasOrganizationOldUrlLastUsed(expected string) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.OrganizationOldUrlLastUsed == nil {
			return fmt.Errorf("expected organization old url last used to have value; got: nil")
		}
		if *o.OrganizationOldUrlLastUsed != expected {
			return fmt.Errorf("expected organization old url last used: %v; got: %v", expected, *o.OrganizationOldUrlLastUsed)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasIsEventsAccount(expected bool) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.IsEventsAccount != expected {
			return fmt.Errorf("expected is events account: %v; got: %v", expected, o.IsEventsAccount)
		}
		return nil
	})
	return o
}

func (o *OrganizationAccountAssert) HasIsOrganizationAccount(expected bool) *OrganizationAccountAssert {
	o.AddAssertion(func(t *testing.T, o *sdk.OrganizationAccount) error {
		t.Helper()
		if o.IsOrganizationAccount != expected {
			return fmt.Errorf("expected is organization account: %v; got: %v", expected, o.IsOrganizationAccount)
		}
		return nil
	})
	return o
}
