// Code generated by object assertions generator (v0.1.0); DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type NotebookDetailsAssert struct {
	*assert.SnowflakeObjectAssert[sdk.NotebookDetails, sdk.SchemaObjectIdentifier]
}

func NotebookDetails(t *testing.T, id sdk.SchemaObjectIdentifier) *NotebookDetailsAssert {
	t.Helper()
	return &NotebookDetailsAssert{
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectType("NOTEBOOK_DETAILS"), id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.NotebookDetails, sdk.SchemaObjectIdentifier] {
			return testClient.Notebook.Describe
		}),
	}
}

func (n *NotebookDetailsAssert) HasTitle(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.Title == nil {
			return fmt.Errorf("expected title to have value; got: nil")
		}
		if *o.Title != expected {
			return fmt.Errorf("expected title: %v; got: %v", expected, *o.Title)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNoTitle() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.Title != nil {
			return fmt.Errorf("expected title to be empty")
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasMainFile(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.MainFile != expected {
			return fmt.Errorf("expected main file: %v; got: %v", expected, o.MainFile)
		}
		return nil
	})
	return n
}

func (s *NotebookDetailsAssert) HasNoQueryWarehouse() *NotebookDetailsAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.QueryWarehouse != nil {
			return fmt.Errorf("expected query_warehouse to be empty")
		}
		return nil
	})
	return s
}

func (n *NotebookDetailsAssert) HasQueryWarehouse(expected sdk.AccountObjectIdentifier) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.QueryWarehouse == nil {
			return fmt.Errorf("expected query warehouse to have value; got: nil")
		}
		if (*o.QueryWarehouse).Name() != expected.Name() {
			return fmt.Errorf("expected query warehouse: %v; got: %v", expected.Name(), (*o.QueryWarehouse).Name())
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasUrlId() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.UrlId == "" {
			return fmt.Errorf("expected url id to be present")
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNonEmptyDefaultPackages() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.DefaultPackages == "" {
			return fmt.Errorf("expected default packages to be non empty")
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasUserPackages(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.UserPackages == nil {
			return fmt.Errorf("expected user packages to have value; got: nil")
		}
		if *o.UserPackages != expected {
			return fmt.Errorf("expected user packages: %v; got: %v", expected, *o.UserPackages)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasRuntimeName(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.RuntimeName == nil {
			return fmt.Errorf("expected runtime name to have value; got: nil")
		}
		if *o.RuntimeName != expected {
			return fmt.Errorf("expected runtime name: %v; got: %v", expected, *o.RuntimeName)
		}
		return nil
	})
	return n
}

func (s *NotebookDetailsAssert) HasComputePool(expected sdk.AccountObjectIdentifier) *NotebookDetailsAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.ComputePool == nil {
			return fmt.Errorf("expected compute pool to have value; got: nil")
		}
		if o.ComputePool.Name() != expected.Name() {
			return fmt.Errorf("expected compute pool: %v; got: %v", expected.Name(), o.ComputePool.Name())
		}
		return nil
	})
	return s
}

func (s *NotebookDetailsAssert) HasNoComputePool() *NotebookDetailsAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.ComputePool != nil {
			return fmt.Errorf("expected compute pool to be empty")
		}
		return nil
	})
	return s
}

func (n *NotebookDetailsAssert) HasOwner(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasImportUrls(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.ImportUrls != expected {
			return fmt.Errorf("expected import urls: %v; got: %v", expected, o.ImportUrls)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasExternalAccessIntegrations(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.ExternalAccessIntegrations != expected {
			return fmt.Errorf("expected external access integrations: %v; got: %v", expected, o.ExternalAccessIntegrations)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasExternalAccessSecrets(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.ExternalAccessSecrets != expected {
			return fmt.Errorf("expected external access secrets: %v; got: %v", expected, o.ExternalAccessSecrets)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasCodeWarehouse(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.CodeWarehouse != expected {
			return fmt.Errorf("expected code warehouse: %v; got: %v", expected, o.CodeWarehouse)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasIdleAutoShutdownTimeSeconds(expected int) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.IdleAutoShutdownTimeSeconds != expected {
			return fmt.Errorf("expected idle auto shutdown time seconds: %v; got: %v", expected, o.IdleAutoShutdownTimeSeconds)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasRuntimeEnvironmentVersion(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.RuntimeEnvironmentVersion != expected {
			return fmt.Errorf("expected runtime environment version: %v; got: %v", expected, o.RuntimeEnvironmentVersion)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasName(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasComment(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.Comment == nil {
			return fmt.Errorf("expected comment to be non empty")
		}
		if *o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, *o.Comment)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNoComment() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.Comment != nil {
			return fmt.Errorf("expected comment to be empty")
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasDefaultVersion(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.DefaultVersion != expected {
			return fmt.Errorf("expected default version: %v; got: %v", expected, o.DefaultVersion)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasDefaultVersionName(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.DefaultVersionName != expected {
			return fmt.Errorf("expected default version name: %v; got: %v", expected, o.DefaultVersionName)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNoDefaultVersionAlias() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.DefaultVersionAlias != nil {
			return fmt.Errorf("expected default_version_alias to be empty")
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNonEmptyDefaultVersionLocationUri() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.DefaultVersionLocationUri == "" {
			return fmt.Errorf("expected default version location uri to be non empty")
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNoDefaultVersionSourceLocationUri() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.DefaultVersionSourceLocationUri != nil {
			return fmt.Errorf("expected default version source location uri to be empty %s", *o.DefaultVersionSourceLocationUri)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasDefaultVersionSourceLocationUri(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.DefaultVersionSourceLocationUri == nil {
			return fmt.Errorf("expected default version source location uri to be non empty")
		}
		if *o.DefaultVersionSourceLocationUri != expected {
			return fmt.Errorf("expected default version source location uri: %v; got %v", expected, *o.DefaultVersionSourceLocationUri)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNoDefaultVersionGitCommitHash() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.DefaultVersionGitCommitHash != nil {
			return fmt.Errorf("expected default version git commit hash to be empty")
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasLastVersionName(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.LastVersionName != expected {
			return fmt.Errorf("expected last version name: %v; got: %v", expected, o.LastVersionName)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNoLastVersionAlias() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.LastVersionAlias != nil {
			return fmt.Errorf("expected last version alias to be empty")
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNonEmptyLastVersionLocationUri() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.LastVersionLocationUri == "" {
			return fmt.Errorf("expected last version location uri to be non empty")
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNoLastVersionSourceLocationUri() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.LastVersionSourceLocationUri != nil {
			return fmt.Errorf("expected last version source location uri to be empty")
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasLastVersionSourceLocationUri(expected string) *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.LastVersionSourceLocationUri == nil {
			return fmt.Errorf("expected last version source location uri to be non empty")
		}
		if *o.LastVersionSourceLocationUri != expected {
			return fmt.Errorf("expected last version source location uri: %v; got %v", expected, *o.LastVersionSourceLocationUri)
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNoLastVersionGitCommitHash() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.LastVersionGitCommitHash != nil {
			return fmt.Errorf("expected last version git commit hash to be empty")
		}
		return nil
	})
	return n
}

func (n *NotebookDetailsAssert) HasNoLiveVersionLocationUri() *NotebookDetailsAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.NotebookDetails) error {
		t.Helper()
		if o.LiveVersionLocationUri != nil {
			return fmt.Errorf("expected live version location uri to be empty")
		}
		return nil
	})
	return n
}
