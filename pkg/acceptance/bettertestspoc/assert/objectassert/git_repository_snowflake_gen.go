// Code generated by assertions generator; DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type GitRepositoryAssert struct {
	*assert.SnowflakeObjectAssert[sdk.GitRepository, sdk.SchemaObjectIdentifier]
}

func GitRepository(t *testing.T, id sdk.SchemaObjectIdentifier) *GitRepositoryAssert {
	t.Helper()
	return &GitRepositoryAssert{
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectTypeGitRepository, id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.GitRepository, sdk.SchemaObjectIdentifier] {
			return testClient.GitRepository.Show
		}),
	}
}

func GitRepositoryFromObject(t *testing.T, gitRepository *sdk.GitRepository) *GitRepositoryAssert {
	t.Helper()
	return &GitRepositoryAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeGitRepository, gitRepository.ID(), gitRepository),
	}
}

func (g *GitRepositoryAssert) HasCreatedOn(expected time.Time) *GitRepositoryAssert {
	g.AddAssertion(func(t *testing.T, o *sdk.GitRepository) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return g
}

func (g *GitRepositoryAssert) HasName(expected string) *GitRepositoryAssert {
	g.AddAssertion(func(t *testing.T, o *sdk.GitRepository) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return g
}

func (g *GitRepositoryAssert) HasDatabaseName(expected string) *GitRepositoryAssert {
	g.AddAssertion(func(t *testing.T, o *sdk.GitRepository) error {
		t.Helper()
		if o.DatabaseName != expected {
			return fmt.Errorf("expected database name: %v; got: %v", expected, o.DatabaseName)
		}
		return nil
	})
	return g
}

func (g *GitRepositoryAssert) HasSchemaName(expected string) *GitRepositoryAssert {
	g.AddAssertion(func(t *testing.T, o *sdk.GitRepository) error {
		t.Helper()
		if o.SchemaName != expected {
			return fmt.Errorf("expected schema name: %v; got: %v", expected, o.SchemaName)
		}
		return nil
	})
	return g
}

func (g *GitRepositoryAssert) HasOrigin(expected string) *GitRepositoryAssert {
	g.AddAssertion(func(t *testing.T, o *sdk.GitRepository) error {
		t.Helper()
		if o.Origin != expected {
			return fmt.Errorf("expected origin: %v; got: %v", expected, o.Origin)
		}
		return nil
	})
	return g
}

func (g *GitRepositoryAssert) HasApiIntegration(expected sdk.AccountObjectIdentifier) *GitRepositoryAssert {
	g.AddAssertion(func(t *testing.T, o *sdk.GitRepository) error {
		t.Helper()
		if o.ApiIntegration == nil {
			return fmt.Errorf("expected api integration to have value; got: nil")
		}
		if (*o.ApiIntegration).Name() != expected.Name() {
			return fmt.Errorf("expected api integration: %v; got: %v", expected.Name(), (*o.ApiIntegration).Name())
		}
		return nil
	})
	return g
}

func (g *GitRepositoryAssert) HasGitCredentials(expected sdk.SchemaObjectIdentifier) *GitRepositoryAssert {
	g.AddAssertion(func(t *testing.T, o *sdk.GitRepository) error {
		t.Helper()
		if o.GitCredentials == nil {
			return fmt.Errorf("expected git credentials to have value; got: nil")
		}
		if (*o.GitCredentials).FullyQualifiedName() != expected.FullyQualifiedName() {
			return fmt.Errorf("expected git credentials: %v; got: %v", expected.FullyQualifiedName(), (*o.GitCredentials).FullyQualifiedName())
		}
		return nil
	})
	return g
}

func (g *GitRepositoryAssert) HasOwner(expected string) *GitRepositoryAssert {
	g.AddAssertion(func(t *testing.T, o *sdk.GitRepository) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return g
}

func (g *GitRepositoryAssert) HasOwnerRoleType(expected string) *GitRepositoryAssert {
	g.AddAssertion(func(t *testing.T, o *sdk.GitRepository) error {
		t.Helper()
		if o.OwnerRoleType != expected {
			return fmt.Errorf("expected owner role type: %v; got: %v", expected, o.OwnerRoleType)
		}
		return nil
	})
	return g
}

func (g *GitRepositoryAssert) HasComment(expected string) *GitRepositoryAssert {
	g.AddAssertion(func(t *testing.T, o *sdk.GitRepository) error {
		t.Helper()
		if o.Comment == nil {
			return fmt.Errorf("expected comment to have value; got: nil")
		}
		if *o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, *o.Comment)
		}
		return nil
	})
	return g
}

func (g *GitRepositoryAssert) HasLastFetchedAt(expected time.Time) *GitRepositoryAssert {
	g.AddAssertion(func(t *testing.T, o *sdk.GitRepository) error {
		t.Helper()
		if o.LastFetchedAt == nil {
			return fmt.Errorf("expected last fetched at to have value; got: nil")
		}
		if *o.LastFetchedAt != expected {
			return fmt.Errorf("expected last fetched at: %v; got: %v", expected, *o.LastFetchedAt)
		}
		return nil
	})
	return g
}
