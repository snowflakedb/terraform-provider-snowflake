// Code generated by object assertions generator (v0.1.0); DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type SecurityIntegrationAssert struct {
	*assert.SnowflakeObjectAssert[sdk.SecurityIntegration, sdk.AccountObjectIdentifier]
}

func SecurityIntegration(t *testing.T, id sdk.AccountObjectIdentifier) *SecurityIntegrationAssert {
	t.Helper()
	return &SecurityIntegrationAssert{
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectTypeSecurityIntegration, id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.SecurityIntegration, sdk.AccountObjectIdentifier] {
			return testClient.SecurityIntegration.Show
		}),
	}
}

func SecurityIntegrationFromObject(t *testing.T, securityIntegration *sdk.SecurityIntegration) *SecurityIntegrationAssert {
	t.Helper()
	return &SecurityIntegrationAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeSecurityIntegration, securityIntegration.ID(), securityIntegration),
	}
}

func (s *SecurityIntegrationAssert) HasName(expected string) *SecurityIntegrationAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SecurityIntegration) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return s
}

func (s *SecurityIntegrationAssert) HasIntegrationType(expected string) *SecurityIntegrationAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SecurityIntegration) error {
		t.Helper()
		if o.IntegrationType != expected {
			return fmt.Errorf("expected integration type: %v; got: %v", expected, o.IntegrationType)
		}
		return nil
	})
	return s
}

func (s *SecurityIntegrationAssert) HasCategory(expected string) *SecurityIntegrationAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SecurityIntegration) error {
		t.Helper()
		if o.Category != expected {
			return fmt.Errorf("expected category: %v; got: %v", expected, o.Category)
		}
		return nil
	})
	return s
}

func (s *SecurityIntegrationAssert) HasEnabled(expected bool) *SecurityIntegrationAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SecurityIntegration) error {
		t.Helper()
		if o.Enabled != expected {
			return fmt.Errorf("expected enabled: %v; got: %v", expected, o.Enabled)
		}
		return nil
	})
	return s
}

func (s *SecurityIntegrationAssert) HasComment(expected string) *SecurityIntegrationAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SecurityIntegration) error {
		t.Helper()
		if o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, o.Comment)
		}
		return nil
	})
	return s
}

func (s *SecurityIntegrationAssert) HasCreatedOn(expected time.Time) *SecurityIntegrationAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.SecurityIntegration) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return s
}
