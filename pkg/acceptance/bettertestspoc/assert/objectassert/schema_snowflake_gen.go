// Code generated by object assertions generator (v0.1.0); DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type SchemaAssert struct {
	*assert.SnowflakeObjectAssert[sdk.Schema, sdk.DatabaseObjectIdentifier]
}

func Schema(t *testing.T, id sdk.DatabaseObjectIdentifier) *SchemaAssert {
	t.Helper()
	return &SchemaAssert{
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectTypeSchema, id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.Schema, sdk.DatabaseObjectIdentifier] {
			return testClient.Schema.Show
		}),
	}
}

func SchemaFromObject(t *testing.T, schema *sdk.Schema) *SchemaAssert {
	t.Helper()
	return &SchemaAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeSchema, schema.ID(), schema),
	}
}

func (s *SchemaAssert) HasCreatedOn(expected time.Time) *SchemaAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Schema) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return s
}

func (s *SchemaAssert) HasDroppedOn(expected time.Time) *SchemaAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Schema) error {
		t.Helper()
		if o.DroppedOn != expected {
			return fmt.Errorf("expected dropped on: %v; got: %v", expected, o.DroppedOn)
		}
		return nil
	})
	return s
}

func (s *SchemaAssert) HasName(expected string) *SchemaAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Schema) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return s
}

func (s *SchemaAssert) HasIsDefault(expected bool) *SchemaAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Schema) error {
		t.Helper()
		if o.IsDefault != expected {
			return fmt.Errorf("expected is default: %v; got: %v", expected, o.IsDefault)
		}
		return nil
	})
	return s
}

func (s *SchemaAssert) HasIsCurrent(expected bool) *SchemaAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Schema) error {
		t.Helper()
		if o.IsCurrent != expected {
			return fmt.Errorf("expected is current: %v; got: %v", expected, o.IsCurrent)
		}
		return nil
	})
	return s
}

func (s *SchemaAssert) HasDatabaseName(expected string) *SchemaAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Schema) error {
		t.Helper()
		if o.DatabaseName != expected {
			return fmt.Errorf("expected database name: %v; got: %v", expected, o.DatabaseName)
		}
		return nil
	})
	return s
}

func (s *SchemaAssert) HasOwner(expected string) *SchemaAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Schema) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return s
}

func (s *SchemaAssert) HasComment(expected string) *SchemaAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Schema) error {
		t.Helper()
		if o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, o.Comment)
		}
		return nil
	})
	return s
}

func (s *SchemaAssert) HasOptions(expected string) *SchemaAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Schema) error {
		t.Helper()
		if o.Options == nil {
			return fmt.Errorf("expected options to have value; got: nil")
		}
		if *o.Options != expected {
			return fmt.Errorf("expected options: %v; got: %v", expected, *o.Options)
		}
		return nil
	})
	return s
}

func (s *SchemaAssert) HasRetentionTime(expected string) *SchemaAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Schema) error {
		t.Helper()
		if o.RetentionTime != expected {
			return fmt.Errorf("expected retention time: %v; got: %v", expected, o.RetentionTime)
		}
		return nil
	})
	return s
}

func (s *SchemaAssert) HasOwnerRoleType(expected string) *SchemaAssert {
	s.AddAssertion(func(t *testing.T, o *sdk.Schema) error {
		t.Helper()
		if o.OwnerRoleType != expected {
			return fmt.Errorf("expected owner role type: %v; got: %v", expected, o.OwnerRoleType)
		}
		return nil
	})
	return s
}
