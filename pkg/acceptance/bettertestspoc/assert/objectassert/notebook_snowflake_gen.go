// Code generated by object assertions generator (v0.1.0); DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type NotebookAssert struct {
	*assert.SnowflakeObjectAssert[sdk.Notebook, sdk.SchemaObjectIdentifier]
}

func Notebook(t *testing.T, id sdk.SchemaObjectIdentifier) *NotebookAssert {
	t.Helper()
	return &NotebookAssert{
		assert.NewSnowflakeObjectAssertWithTestClientObjectProvider(sdk.ObjectTypeNotebook, id, func(testClient *helpers.TestClient) assert.ObjectProvider[sdk.Notebook, sdk.SchemaObjectIdentifier] {
			return testClient.Notebook.Show
		}),
	}
}

func NotebookFromObject(t *testing.T, notebook *sdk.Notebook) *NotebookAssert {
	t.Helper()
	return &NotebookAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeNotebook, notebook.ID(), notebook),
	}
}

func (n *NotebookAssert) HasCreatedOn(expected time.Time) *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return n
}

func (n *NotebookAssert) HasName(expected string) *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return n
}

func (n *NotebookAssert) HasDatabaseName(expected string) *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.DatabaseName != expected {
			return fmt.Errorf("expected database name: %v; got: %v", expected, o.DatabaseName)
		}
		return nil
	})
	return n
}

func (n *NotebookAssert) HasSchemaName(expected string) *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.SchemaName != expected {
			return fmt.Errorf("expected schema name: %v; got: %v", expected, o.SchemaName)
		}
		return nil
	})
	return n
}

func (n *NotebookAssert) HasComment(expected string) *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.Comment == nil {
			return fmt.Errorf("expected comment to be non empty")
		}
		if *o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, *o.Comment)
		}
		return nil
	})
	return n
}

func (n *NotebookAssert) HasNoComment() *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.Comment != nil {
			return fmt.Errorf("expected comment to be empty")
		}
		return nil
	})
	return n
}

func (n *NotebookAssert) HasOwner(expected string) *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.Owner != expected {
			return fmt.Errorf("expected owner: %v; got: %v", expected, o.Owner)
		}
		return nil
	})
	return n
}

func (n *NotebookAssert) HasQueryWarehouse(expected sdk.AccountObjectIdentifier) *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.QueryWarehouse == nil {
			return fmt.Errorf("expected query warehouse to have value; got: nil")
		}
		if (*o.QueryWarehouse).Name() != expected.Name() {
			return fmt.Errorf("expected query warehouse: %v; got: %v", expected.Name(), (*o.QueryWarehouse).Name())
		}
		return nil
	})
	return n
}

func (n *NotebookAssert) HasUrlId(expected string) *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.UrlId != expected {
			return fmt.Errorf("expected url id: %v; got: %v", expected, o.UrlId)
		}
		return nil
	})
	return n
}

func (n *NotebookAssert) HasOwnerRoleType(expected string) *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.OwnerRoleType != expected {
			return fmt.Errorf("expected owner role type: %v; got: %v", expected, o.OwnerRoleType)
		}
		return nil
	})
	return n
}

func (n *NotebookAssert) HasCodeWarehouse(expected sdk.AccountObjectIdentifier) *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.CodeWarehouse.Name() != expected.Name() {
			return fmt.Errorf("expected code warehouse: %v; got: %v", expected.Name(), o.CodeWarehouse.Name())
		}
		return nil
	})
	return n
}

func (n *NotebookAssert) HasNoCodeWarehouse() *NotebookAssert {
	n.AddAssertion(func(t *testing.T, o *sdk.Notebook) error {
		t.Helper()
		if o.CodeWarehouse.Name() != "" {
			return fmt.Errorf("expected code warehouse to be empty")
		}
		return nil
	})
	return n
}
