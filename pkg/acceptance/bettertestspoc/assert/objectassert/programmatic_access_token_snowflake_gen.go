// Code generated by assertions generator; DO NOT EDIT.

package objectassert

import (
	"fmt"
	"testing"
	"time"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type ProgrammaticAccessTokenAssert struct {
	*assert.SnowflakeObjectAssert[sdk.ProgrammaticAccessToken, sdk.AccountObjectIdentifier]
}

// function ProgrammaticAccessToken is not supported because ProgrammaticAccessToken has a pseudo-identifier and requires a user ID for being listed in Snowflake.
// TODO(SNOW-1501905): add a function to get the ProgrammaticAccessToken by user and token name.

func ProgrammaticAccessTokenFromObject(t *testing.T, programmaticAccessToken *sdk.ProgrammaticAccessToken) *ProgrammaticAccessTokenAssert {
	t.Helper()
	return &ProgrammaticAccessTokenAssert{
		assert.NewSnowflakeObjectAssertWithObject(sdk.ObjectTypeProgrammaticAccessToken, programmaticAccessToken.ID(), programmaticAccessToken),
	}
}

func (p *ProgrammaticAccessTokenAssert) HasName(expected string) *ProgrammaticAccessTokenAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.ProgrammaticAccessToken) error {
		t.Helper()
		if o.Name != expected {
			return fmt.Errorf("expected name: %v; got: %v", expected, o.Name)
		}
		return nil
	})
	return p
}

func (p *ProgrammaticAccessTokenAssert) HasUserName(expected sdk.AccountObjectIdentifier) *ProgrammaticAccessTokenAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.ProgrammaticAccessToken) error {
		t.Helper()
		if o.UserName.Name() != expected.Name() {
			return fmt.Errorf("expected user name: %v; got: %v", expected.Name(), o.UserName.Name())
		}
		return nil
	})
	return p
}

func (p *ProgrammaticAccessTokenAssert) HasRoleRestriction(expected sdk.AccountObjectIdentifier) *ProgrammaticAccessTokenAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.ProgrammaticAccessToken) error {
		t.Helper()
		if o.RoleRestriction == nil {
			return fmt.Errorf("expected role restriction to have value; got: nil")
		}
		if (*o.RoleRestriction).Name() != expected.Name() {
			return fmt.Errorf("expected role restriction: %v; got: %v", expected.Name(), (*o.RoleRestriction).Name())
		}
		return nil
	})
	return p
}

func (p *ProgrammaticAccessTokenAssert) HasExpiresAt(expected time.Time) *ProgrammaticAccessTokenAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.ProgrammaticAccessToken) error {
		t.Helper()
		if o.ExpiresAt != expected {
			return fmt.Errorf("expected expires at: %v; got: %v", expected, o.ExpiresAt)
		}
		return nil
	})
	return p
}

func (p *ProgrammaticAccessTokenAssert) HasStatus(expected sdk.ProgrammaticAccessTokenStatus) *ProgrammaticAccessTokenAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.ProgrammaticAccessToken) error {
		t.Helper()
		if o.Status != expected {
			return fmt.Errorf("expected status: %v; got: %v", expected, o.Status)
		}
		return nil
	})
	return p
}

func (p *ProgrammaticAccessTokenAssert) HasComment(expected string) *ProgrammaticAccessTokenAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.ProgrammaticAccessToken) error {
		t.Helper()
		if o.Comment == nil {
			return fmt.Errorf("expected comment to have value; got: nil")
		}
		if *o.Comment != expected {
			return fmt.Errorf("expected comment: %v; got: %v", expected, *o.Comment)
		}
		return nil
	})
	return p
}

func (p *ProgrammaticAccessTokenAssert) HasCreatedOn(expected time.Time) *ProgrammaticAccessTokenAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.ProgrammaticAccessToken) error {
		t.Helper()
		if o.CreatedOn != expected {
			return fmt.Errorf("expected created on: %v; got: %v", expected, o.CreatedOn)
		}
		return nil
	})
	return p
}

func (p *ProgrammaticAccessTokenAssert) HasCreatedBy(expected string) *ProgrammaticAccessTokenAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.ProgrammaticAccessToken) error {
		t.Helper()
		if o.CreatedBy != expected {
			return fmt.Errorf("expected created by: %v; got: %v", expected, o.CreatedBy)
		}
		return nil
	})
	return p
}

func (p *ProgrammaticAccessTokenAssert) HasMinsToBypassNetworkPolicyRequirement(expected int) *ProgrammaticAccessTokenAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.ProgrammaticAccessToken) error {
		t.Helper()
		if o.MinsToBypassNetworkPolicyRequirement == nil {
			return fmt.Errorf("expected mins to bypass network policy requirement to have value; got: nil")
		}
		if *o.MinsToBypassNetworkPolicyRequirement != expected {
			return fmt.Errorf("expected mins to bypass network policy requirement: %v; got: %v", expected, *o.MinsToBypassNetworkPolicyRequirement)
		}
		return nil
	})
	return p
}

func (p *ProgrammaticAccessTokenAssert) HasRotatedTo(expected string) *ProgrammaticAccessTokenAssert {
	p.AddAssertion(func(t *testing.T, o *sdk.ProgrammaticAccessToken) error {
		t.Helper()
		if o.RotatedTo == nil {
			return fmt.Errorf("expected rotated to to have value; got: nil")
		}
		if *o.RotatedTo != expected {
			return fmt.Errorf("expected rotated to: %v; got: %v", expected, *o.RotatedTo)
		}
		return nil
	})
	return p
}
