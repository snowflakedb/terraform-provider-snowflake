// Code generated by assertions generator; DO NOT EDIT.

package objectparametersassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/helpers"
	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
)

type SchemaParametersAssert struct {
	*assert.SnowflakeParametersAssert[sdk.DatabaseObjectIdentifier]
}

func SchemaParameters(t *testing.T, id sdk.DatabaseObjectIdentifier) *SchemaParametersAssert {
	t.Helper()
	return &SchemaParametersAssert{
		assert.NewSnowflakeParametersAssertWithTestClientParametersProvider(id, sdk.ObjectTypeSchema, func(testClient *helpers.TestClient) assert.ParametersProvider[sdk.DatabaseObjectIdentifier] {
			return testClient.Parameter.ShowSchemaParameters
		}),
	}
}

func SchemaParametersPrefetched(t *testing.T, id sdk.DatabaseObjectIdentifier, parameters []*sdk.Parameter) *SchemaParametersAssert {
	t.Helper()
	return &SchemaParametersAssert{
		assert.NewSnowflakeParametersAssertWithParameters(id, sdk.ObjectTypeSchema, parameters),
	}
}

//////////////////////////////
// Generic parameter checks //
//////////////////////////////

func (s *SchemaParametersAssert) HasBoolParameterValue(parameterName sdk.ObjectParameter, expected bool) *SchemaParametersAssert {
	s.AddAssertion(assert.SnowflakeParameterBoolValueSet(parameterName, expected))
	return s
}

func (s *SchemaParametersAssert) HasIntParameterValue(parameterName sdk.ObjectParameter, expected int) *SchemaParametersAssert {
	s.AddAssertion(assert.SnowflakeParameterIntValueSet(parameterName, expected))
	return s
}

func (s *SchemaParametersAssert) HasStringParameterValue(parameterName sdk.ObjectParameter, expected string) *SchemaParametersAssert {
	s.AddAssertion(assert.SnowflakeParameterValueSet(parameterName, expected))
	return s
}

func (s *SchemaParametersAssert) HasDefaultParameterValue(parameterName sdk.ObjectParameter) *SchemaParametersAssert {
	s.AddAssertion(assert.SnowflakeParameterDefaultValueSet(parameterName))
	return s
}

func (s *SchemaParametersAssert) HasDefaultParameterValueOnLevel(parameterName sdk.ObjectParameter, parameterType sdk.ParameterType) *SchemaParametersAssert {
	s.AddAssertion(assert.SnowflakeParameterDefaultValueOnLevelSet(parameterName, parameterType))
	return s
}

///////////////////////////////
// Aggregated generic checks //
///////////////////////////////

// HasAllDefaults checks if all the parameters:
// - have a default value by comparing current value of the sdk.Parameter with its default
// - have an expected level
func (s *SchemaParametersAssert) HasAllDefaults() *SchemaParametersAssert {
	return s.
		HasDefaultParameterValueOnLevel(sdk.ObjectParameterDefaultDDLCollation, sdk.ParameterTypeSnowflakeDefault)
}

func (s *SchemaParametersAssert) HasAllDefaultsExplicit() *SchemaParametersAssert {
	return s.
		HasDefaultDefaultDdlCollationValueExplicit()
}

////////////////////////////
// Parameter value checks //
////////////////////////////

func (s *SchemaParametersAssert) HasDefaultDdlCollation(expected string) *SchemaParametersAssert {
	s.AddAssertion(assert.SnowflakeParameterValueSet(sdk.ObjectParameterDefaultDDLCollation, expected))
	return s
}

////////////////////////////
// Parameter level checks //
////////////////////////////

func (s *SchemaParametersAssert) HasDefaultDdlCollationLevel(expected sdk.ParameterType) *SchemaParametersAssert {
	s.AddAssertion(assert.SnowflakeParameterLevelSet(sdk.ObjectParameterDefaultDDLCollation, expected))
	return s
}

////////////////////////////////////
// Parameter default value checks //
////////////////////////////////////

func (s *SchemaParametersAssert) HasDefaultDefaultDdlCollationValue() *SchemaParametersAssert {
	return s.HasDefaultParameterValue(sdk.ObjectParameterDefaultDDLCollation)
}

/////////////////////////////////////////////
// Parameter explicit default value checks //
/////////////////////////////////////////////

func (s *SchemaParametersAssert) HasDefaultDefaultDdlCollationValueExplicit() *SchemaParametersAssert {
	return s.HasDefaultDdlCollation("")
}
