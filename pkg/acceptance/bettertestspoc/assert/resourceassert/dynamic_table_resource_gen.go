// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type DynamicTableResourceAssert struct {
	*assert.ResourceAssert
}

func DynamicTableResource(t *testing.T, name string) *DynamicTableResourceAssert {
	t.Helper()

	return &DynamicTableResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedDynamicTableResource(t *testing.T, id string) *DynamicTableResourceAssert {
	t.Helper()

	return &DynamicTableResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (d *DynamicTableResourceAssert) HasDatabaseString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("database", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasSchemaString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("schema", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasNameString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("name", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasAutomaticClusteringString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("automatic_clustering", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasBytesString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("bytes", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasClusterByString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("cluster_by", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasCommentString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("comment", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasCreatedOnString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("created_on", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasDataTimestampString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("data_timestamp", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasFullyQualifiedNameString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasInitializeString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("initialize", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasIsCloneString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("is_clone", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasIsReplicaString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("is_replica", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasLastSuspendedOnString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("last_suspended_on", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasOrReplaceString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("or_replace", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasOwnerString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("owner", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasQueryString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("query", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasRefreshModeString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("refresh_mode", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasRefreshModeReasonString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("refresh_mode_reason", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasRowsString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("rows", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasSchedulingStateString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("scheduling_state", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasTargetLagString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("target_lag", expected))
	return d
}

func (d *DynamicTableResourceAssert) HasWarehouseString(expected string) *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("warehouse", expected))
	return d
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (d *DynamicTableResourceAssert) HasNoDatabase() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("database"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoSchema() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("schema"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoName() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("name"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoAutomaticClustering() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("automatic_clustering"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoBytes() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("bytes"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoClusterBy() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("cluster_by"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoComment() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("comment"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoCreatedOn() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("created_on"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoDataTimestamp() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("data_timestamp"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoFullyQualifiedName() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoInitialize() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("initialize"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoIsClone() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("is_clone"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoIsReplica() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("is_replica"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoLastSuspendedOn() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("last_suspended_on"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoOrReplace() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("or_replace"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoOwner() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("owner"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoQuery() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("query"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoRefreshMode() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("refresh_mode"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoRefreshModeReason() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("refresh_mode_reason"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoRows() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("rows"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoSchedulingState() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("scheduling_state"))
	return d
}

func (d *DynamicTableResourceAssert) HasNoWarehouse() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueNotSet("warehouse"))
	return d
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (d *DynamicTableResourceAssert) HasAutomaticClusteringEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("automatic_clustering", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasBytesEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("bytes", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasClusterByEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("cluster_by", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasCommentEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("comment", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasCreatedOnEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("created_on", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasDataTimestampEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("data_timestamp", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasFullyQualifiedNameEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasInitializeEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("initialize", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasIsCloneEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("is_clone", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasIsReplicaEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("is_replica", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasLastSuspendedOnEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("last_suspended_on", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasOrReplaceEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("or_replace", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasOwnerEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("owner", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasRefreshModeEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("refresh_mode", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasRefreshModeReasonEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("refresh_mode_reason", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasRowsEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("rows", ""))
	return d
}

func (d *DynamicTableResourceAssert) HasSchedulingStateEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValueSet("scheduling_state", ""))
	return d
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (d *DynamicTableResourceAssert) HasDatabaseNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("database"))
	return d
}

func (d *DynamicTableResourceAssert) HasSchemaNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("schema"))
	return d
}

func (d *DynamicTableResourceAssert) HasNameNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("name"))
	return d
}

func (d *DynamicTableResourceAssert) HasAutomaticClusteringNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("automatic_clustering"))
	return d
}

func (d *DynamicTableResourceAssert) HasBytesNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("bytes"))
	return d
}

func (d *DynamicTableResourceAssert) HasClusterByNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("cluster_by"))
	return d
}

func (d *DynamicTableResourceAssert) HasCommentNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("comment"))
	return d
}

func (d *DynamicTableResourceAssert) HasCreatedOnNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("created_on"))
	return d
}

func (d *DynamicTableResourceAssert) HasDataTimestampNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("data_timestamp"))
	return d
}

func (d *DynamicTableResourceAssert) HasFullyQualifiedNameNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return d
}

func (d *DynamicTableResourceAssert) HasInitializeNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("initialize"))
	return d
}

func (d *DynamicTableResourceAssert) HasIsCloneNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("is_clone"))
	return d
}

func (d *DynamicTableResourceAssert) HasIsReplicaNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("is_replica"))
	return d
}

func (d *DynamicTableResourceAssert) HasLastSuspendedOnNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("last_suspended_on"))
	return d
}

func (d *DynamicTableResourceAssert) HasOrReplaceNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("or_replace"))
	return d
}

func (d *DynamicTableResourceAssert) HasOwnerNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("owner"))
	return d
}

func (d *DynamicTableResourceAssert) HasQueryNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("query"))
	return d
}

func (d *DynamicTableResourceAssert) HasRefreshModeNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("refresh_mode"))
	return d
}

func (d *DynamicTableResourceAssert) HasRefreshModeReasonNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("refresh_mode_reason"))
	return d
}

func (d *DynamicTableResourceAssert) HasRowsNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("rows"))
	return d
}

func (d *DynamicTableResourceAssert) HasSchedulingStateNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("scheduling_state"))
	return d
}

func (d *DynamicTableResourceAssert) HasWarehouseNotEmpty() *DynamicTableResourceAssert {
	d.AddAssertion(assert.ValuePresent("warehouse"))
	return d
}
