// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type StreamlitResourceAssert struct {
	*assert.ResourceAssert
}

func StreamlitResource(t *testing.T, name string) *StreamlitResourceAssert {
	t.Helper()

	return &StreamlitResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedStreamlitResource(t *testing.T, id string) *StreamlitResourceAssert {
	t.Helper()

	return &StreamlitResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (s *StreamlitResourceAssert) HasDatabaseString(expected string) *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueSet("database", expected))
	return s
}

func (s *StreamlitResourceAssert) HasSchemaString(expected string) *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueSet("schema", expected))
	return s
}

func (s *StreamlitResourceAssert) HasNameString(expected string) *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueSet("name", expected))
	return s
}

func (s *StreamlitResourceAssert) HasCommentString(expected string) *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueSet("comment", expected))
	return s
}

func (s *StreamlitResourceAssert) HasDirectoryLocationString(expected string) *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueSet("directory_location", expected))
	return s
}

func (s *StreamlitResourceAssert) HasExternalAccessIntegrationsString(expected string) *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueSet("external_access_integrations", expected))
	return s
}

func (s *StreamlitResourceAssert) HasFullyQualifiedNameString(expected string) *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return s
}

func (s *StreamlitResourceAssert) HasMainFileString(expected string) *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueSet("main_file", expected))
	return s
}

func (s *StreamlitResourceAssert) HasQueryWarehouseString(expected string) *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueSet("query_warehouse", expected))
	return s
}

func (s *StreamlitResourceAssert) HasStageString(expected string) *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueSet("stage", expected))
	return s
}

func (s *StreamlitResourceAssert) HasTitleString(expected string) *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueSet("title", expected))
	return s
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (s *StreamlitResourceAssert) HasNoDatabase() *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueNotSet("database"))
	return s
}

func (s *StreamlitResourceAssert) HasNoSchema() *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueNotSet("schema"))
	return s
}

func (s *StreamlitResourceAssert) HasNoName() *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueNotSet("name"))
	return s
}

func (s *StreamlitResourceAssert) HasNoComment() *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueNotSet("comment"))
	return s
}

func (s *StreamlitResourceAssert) HasNoDirectoryLocation() *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueNotSet("directory_location"))
	return s
}

func (s *StreamlitResourceAssert) HasNoExternalAccessIntegrations() *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueNotSet("external_access_integrations"))
	return s
}

func (s *StreamlitResourceAssert) HasNoFullyQualifiedName() *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return s
}

func (s *StreamlitResourceAssert) HasNoMainFile() *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueNotSet("main_file"))
	return s
}

func (s *StreamlitResourceAssert) HasNoQueryWarehouse() *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueNotSet("query_warehouse"))
	return s
}

func (s *StreamlitResourceAssert) HasNoStage() *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueNotSet("stage"))
	return s
}

func (s *StreamlitResourceAssert) HasNoTitle() *StreamlitResourceAssert {
	s.AddAssertion(assert.ValueNotSet("title"))
	return s
}
