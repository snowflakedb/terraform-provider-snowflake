// Code generated by resource assertions generator (v0.1.0); DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type GrantPrivilegesToAccountRoleResourceAssert struct {
	*assert.ResourceAssert
}

func GrantPrivilegesToAccountRoleResource(t *testing.T, name string) *GrantPrivilegesToAccountRoleResourceAssert {
	t.Helper()

	return &GrantPrivilegesToAccountRoleResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedGrantPrivilegesToAccountRoleResource(t *testing.T, id string) *GrantPrivilegesToAccountRoleResourceAssert {
	t.Helper()

	return &GrantPrivilegesToAccountRoleResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasAccountRoleNameString(expected string) *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("account_role_name", expected))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasAllPrivilegesString(expected string) *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("all_privileges", expected))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasAlwaysApplyString(expected string) *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("always_apply", expected))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasAlwaysApplyTriggerString(expected string) *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("always_apply_trigger", expected))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasOnAccountString(expected string) *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_account", expected))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasOnAccountObjectString(expected string) *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_account_object", expected))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasOnSchemaString(expected string) *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_schema", expected))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasOnSchemaObjectString(expected string) *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_schema_object", expected))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasPrivilegesString(expected string) *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("privileges", expected))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasWithGrantOptionString(expected string) *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("with_grant_option", expected))
	return g
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasNoAccountRoleName() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("account_role_name"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasNoAllPrivileges() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("all_privileges"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasNoAlwaysApply() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("always_apply"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasNoAlwaysApplyTrigger() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("always_apply_trigger"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasNoOnAccount() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("on_account"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasNoWithGrantOption() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("with_grant_option"))
	return g
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasAllPrivilegesEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("all_privileges", ""))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasAlwaysApplyEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("always_apply", ""))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasAlwaysApplyTriggerEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("always_apply_trigger", ""))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasOnAccountEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_account", ""))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasOnAccountObjectEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_account_object.#", "0"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasOnSchemaEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_schema.#", "0"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasOnSchemaObjectEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_schema_object.#", "0"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasPrivilegesEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("privileges.#", "0"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasWithGrantOptionEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("with_grant_option", ""))
	return g
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasAccountRoleNameNotEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("account_role_name"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasAllPrivilegesNotEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("all_privileges"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasAlwaysApplyNotEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("always_apply"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasAlwaysApplyTriggerNotEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("always_apply_trigger"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasOnAccountNotEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("on_account"))
	return g
}

func (g *GrantPrivilegesToAccountRoleResourceAssert) HasWithGrantOptionNotEmpty() *GrantPrivilegesToAccountRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("with_grant_option"))
	return g
}
