// Code generated by resource assertions generator (v0.1.0); DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type SemanticViewResourceAssert struct {
	*assert.ResourceAssert
}

func SemanticViewResource(t *testing.T, name string) *SemanticViewResourceAssert {
	t.Helper()

	return &SemanticViewResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedSemanticViewResource(t *testing.T, id string) *SemanticViewResourceAssert {
	t.Helper()

	return &SemanticViewResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (s *SemanticViewResourceAssert) HasDatabaseString(expected string) *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueSet("database", expected))
	return s
}

func (s *SemanticViewResourceAssert) HasSchemaString(expected string) *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueSet("schema", expected))
	return s
}

func (s *SemanticViewResourceAssert) HasNameString(expected string) *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueSet("name", expected))
	return s
}

func (s *SemanticViewResourceAssert) HasCommentString(expected string) *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueSet("comment", expected))
	return s
}

func (s *SemanticViewResourceAssert) HasFullyQualifiedNameString(expected string) *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return s
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (s *SemanticViewResourceAssert) HasNoDatabase() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueNotSet("database"))
	return s
}

func (s *SemanticViewResourceAssert) HasNoSchema() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueNotSet("schema"))
	return s
}

func (s *SemanticViewResourceAssert) HasNoName() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueNotSet("name"))
	return s
}

func (s *SemanticViewResourceAssert) HasNoComment() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueNotSet("comment"))
	return s
}

func (s *SemanticViewResourceAssert) HasNoFullyQualifiedName() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return s
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (s *SemanticViewResourceAssert) HasCommentEmpty() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueSet("comment", ""))
	return s
}

func (s *SemanticViewResourceAssert) HasFullyQualifiedNameEmpty() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return s
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (s *SemanticViewResourceAssert) HasDatabaseNotEmpty() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValuePresent("database"))
	return s
}

func (s *SemanticViewResourceAssert) HasSchemaNotEmpty() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValuePresent("schema"))
	return s
}

func (s *SemanticViewResourceAssert) HasNameNotEmpty() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValuePresent("name"))
	return s
}

func (s *SemanticViewResourceAssert) HasCommentNotEmpty() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValuePresent("comment"))
	return s
}

func (s *SemanticViewResourceAssert) HasFullyQualifiedNameNotEmpty() *SemanticViewResourceAssert {
	s.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return s
}
