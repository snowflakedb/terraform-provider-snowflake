// Code generated by resource assertions generator (v0.1.0); DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type GrantPrivilegesToDatabaseRoleResourceAssert struct {
	*assert.ResourceAssert
}

func GrantPrivilegesToDatabaseRoleResource(t *testing.T, name string) *GrantPrivilegesToDatabaseRoleResourceAssert {
	t.Helper()

	return &GrantPrivilegesToDatabaseRoleResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedGrantPrivilegesToDatabaseRoleResource(t *testing.T, id string) *GrantPrivilegesToDatabaseRoleResourceAssert {
	t.Helper()

	return &GrantPrivilegesToDatabaseRoleResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasAllPrivilegesString(expected string) *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("all_privileges", expected))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasAlwaysApplyString(expected string) *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("always_apply", expected))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasAlwaysApplyTriggerString(expected string) *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("always_apply_trigger", expected))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasDatabaseRoleNameString(expected string) *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("database_role_name", expected))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasOnDatabaseString(expected string) *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_database", expected))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasOnSchemaString(expected string) *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_schema", expected))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasOnSchemaObjectString(expected string) *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_schema_object", expected))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasPrivilegesString(expected string) *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("privileges", expected))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasWithGrantOptionString(expected string) *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("with_grant_option", expected))
	return g
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasNoAllPrivileges() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("all_privileges"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasNoAlwaysApply() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("always_apply"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasNoAlwaysApplyTrigger() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("always_apply_trigger"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasNoDatabaseRoleName() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("database_role_name"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasNoOnDatabase() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("on_database"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasNoWithGrantOption() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("with_grant_option"))
	return g
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasAllPrivilegesEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("all_privileges", ""))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasAlwaysApplyEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("always_apply", ""))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasAlwaysApplyTriggerEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("always_apply_trigger", ""))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasOnDatabaseEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_database", ""))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasOnSchemaEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_schema.#", "0"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasOnSchemaObjectEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("on_schema_object.#", "0"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasPrivilegesEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("privileges.#", "0"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasWithGrantOptionEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("with_grant_option", ""))
	return g
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasAllPrivilegesNotEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("all_privileges"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasAlwaysApplyNotEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("always_apply"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasAlwaysApplyTriggerNotEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("always_apply_trigger"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasDatabaseRoleNameNotEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("database_role_name"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasOnDatabaseNotEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("on_database"))
	return g
}

func (g *GrantPrivilegesToDatabaseRoleResourceAssert) HasWithGrantOptionNotEmpty() *GrantPrivilegesToDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("with_grant_option"))
	return g
}
