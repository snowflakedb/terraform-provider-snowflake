// Code generated by resource assertions generator (v0.1.0); DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type ApiAuthenticationIntegrationWithJwtBearerResourceAssert struct {
	*assert.ResourceAssert
}

func ApiAuthenticationIntegrationWithJwtBearerResource(t *testing.T, name string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	t.Helper()

	return &ApiAuthenticationIntegrationWithJwtBearerResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedApiAuthenticationIntegrationWithJwtBearerResource(t *testing.T, id string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	t.Helper()

	return &ApiAuthenticationIntegrationWithJwtBearerResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasNameString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("name", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasCommentString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("comment", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasEnabledString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("enabled", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasFullyQualifiedNameString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAccessTokenValidityString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("oauth_access_token_validity", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAllowedScopesString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("oauth_allowed_scopes", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAssertionIssuerString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("oauth_assertion_issuer", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAuthorizationEndpointString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("oauth_authorization_endpoint", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthClientAuthMethodString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("oauth_client_auth_method", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthClientIdString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("oauth_client_id", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthClientSecretString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("oauth_client_secret", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthRefreshTokenValidityString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("oauth_refresh_token_validity", expected))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthTokenEndpointString(expected string) *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueSet("oauth_token_endpoint", expected))
	return a
}

///////////////////////////////////
// Attribute value not set checks //
///////////////////////////////////

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasNameNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("name"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasCommentNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("comment"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasEnabledNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("enabled"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasFullyQualifiedNameNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAccessTokenValidityNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("oauth_access_token_validity"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAllowedScopesNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("oauth_allowed_scopes"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAssertionIssuerNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("oauth_assertion_issuer"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAuthorizationEndpointNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("oauth_authorization_endpoint"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthClientAuthMethodNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("oauth_client_auth_method"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthClientIdNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("oauth_client_id"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthClientSecretNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("oauth_client_secret"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthRefreshTokenValidityNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("oauth_refresh_token_validity"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthTokenEndpointNotSet() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueNotSet("oauth_token_endpoint"))
	return a
}

///////////////////////////////////
// Attribute value exists checks //
///////////////////////////////////

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasNameExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("name"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasCommentExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("comment"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasEnabledExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("enabled"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasFullyQualifiedNameExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("fully_qualified_name"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAccessTokenValidityExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("oauth_access_token_validity"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAllowedScopesExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("oauth_allowed_scopes"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAssertionIssuerExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("oauth_assertion_issuer"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthAuthorizationEndpointExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("oauth_authorization_endpoint"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthClientAuthMethodExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("oauth_client_auth_method"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthClientIdExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("oauth_client_id"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthClientSecretExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("oauth_client_secret"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthRefreshTokenValidityExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("oauth_refresh_token_validity"))
	return a
}

func (a *ApiAuthenticationIntegrationWithJwtBearerResourceAssert) HasOauthTokenEndpointExists() *ApiAuthenticationIntegrationWithJwtBearerResourceAssert {
	a.AddAssertion(assert.ValueExists("oauth_token_endpoint"))
	return a
}
