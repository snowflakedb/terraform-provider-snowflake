// Code generated by resource assertions generator (v0.1.0); DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type StageResourceAssert struct {
	*assert.ResourceAssert
}

func StageResource(t *testing.T, name string) *StageResourceAssert {
	t.Helper()

	return &StageResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedStageResource(t *testing.T, id string) *StageResourceAssert {
	t.Helper()

	return &StageResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (s *StageResourceAssert) HasDatabaseString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("database", expected))
	return s
}

func (s *StageResourceAssert) HasSchemaString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("schema", expected))
	return s
}

func (s *StageResourceAssert) HasNameString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("name", expected))
	return s
}

func (s *StageResourceAssert) HasAwsExternalIdString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("aws_external_id", expected))
	return s
}

func (s *StageResourceAssert) HasCommentString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("comment", expected))
	return s
}

func (s *StageResourceAssert) HasCopyOptionsString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("copy_options", expected))
	return s
}

func (s *StageResourceAssert) HasCredentialsString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("credentials", expected))
	return s
}

func (s *StageResourceAssert) HasDirectoryString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("directory", expected))
	return s
}

func (s *StageResourceAssert) HasEncryptionString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("encryption", expected))
	return s
}

func (s *StageResourceAssert) HasFileFormatString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("file_format", expected))
	return s
}

func (s *StageResourceAssert) HasFullyQualifiedNameString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return s
}

func (s *StageResourceAssert) HasSnowflakeIamUserString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("snowflake_iam_user", expected))
	return s
}

func (s *StageResourceAssert) HasStorageIntegrationString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_integration", expected))
	return s
}

func (s *StageResourceAssert) HasTagString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("tag", expected))
	return s
}

func (s *StageResourceAssert) HasUrlString(expected string) *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("url", expected))
	return s
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (s *StageResourceAssert) HasNoDatabase() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("database"))
	return s
}

func (s *StageResourceAssert) HasNoSchema() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("schema"))
	return s
}

func (s *StageResourceAssert) HasNoName() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("name"))
	return s
}

func (s *StageResourceAssert) HasNoAwsExternalId() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("aws_external_id"))
	return s
}

func (s *StageResourceAssert) HasNoComment() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("comment"))
	return s
}

func (s *StageResourceAssert) HasNoCopyOptions() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("copy_options"))
	return s
}

func (s *StageResourceAssert) HasNoCredentials() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("credentials"))
	return s
}

func (s *StageResourceAssert) HasNoDirectory() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("directory"))
	return s
}

func (s *StageResourceAssert) HasNoEncryption() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("encryption"))
	return s
}

func (s *StageResourceAssert) HasNoFileFormat() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("file_format"))
	return s
}

func (s *StageResourceAssert) HasNoFullyQualifiedName() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return s
}

func (s *StageResourceAssert) HasNoSnowflakeIamUser() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("snowflake_iam_user"))
	return s
}

func (s *StageResourceAssert) HasNoStorageIntegration() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("storage_integration"))
	return s
}

func (s *StageResourceAssert) HasNoUrl() *StageResourceAssert {
	s.AddAssertion(assert.ValueNotSet("url"))
	return s
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (s *StageResourceAssert) HasAwsExternalIdEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("aws_external_id", ""))
	return s
}

func (s *StageResourceAssert) HasCommentEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("comment", ""))
	return s
}

func (s *StageResourceAssert) HasCopyOptionsEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("copy_options", ""))
	return s
}

func (s *StageResourceAssert) HasCredentialsEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("credentials", ""))
	return s
}

func (s *StageResourceAssert) HasDirectoryEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("directory", ""))
	return s
}

func (s *StageResourceAssert) HasEncryptionEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("encryption", ""))
	return s
}

func (s *StageResourceAssert) HasFileFormatEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("file_format", ""))
	return s
}

func (s *StageResourceAssert) HasFullyQualifiedNameEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return s
}

func (s *StageResourceAssert) HasSnowflakeIamUserEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("snowflake_iam_user", ""))
	return s
}

func (s *StageResourceAssert) HasStorageIntegrationEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_integration", ""))
	return s
}

func (s *StageResourceAssert) HasTagEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("tag.#", "0"))
	return s
}

func (s *StageResourceAssert) HasUrlEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValueSet("url", ""))
	return s
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (s *StageResourceAssert) HasDatabaseNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("database"))
	return s
}

func (s *StageResourceAssert) HasSchemaNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("schema"))
	return s
}

func (s *StageResourceAssert) HasNameNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("name"))
	return s
}

func (s *StageResourceAssert) HasAwsExternalIdNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("aws_external_id"))
	return s
}

func (s *StageResourceAssert) HasCommentNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("comment"))
	return s
}

func (s *StageResourceAssert) HasCopyOptionsNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("copy_options"))
	return s
}

func (s *StageResourceAssert) HasCredentialsNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("credentials"))
	return s
}

func (s *StageResourceAssert) HasDirectoryNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("directory"))
	return s
}

func (s *StageResourceAssert) HasEncryptionNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("encryption"))
	return s
}

func (s *StageResourceAssert) HasFileFormatNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("file_format"))
	return s
}

func (s *StageResourceAssert) HasFullyQualifiedNameNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return s
}

func (s *StageResourceAssert) HasSnowflakeIamUserNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("snowflake_iam_user"))
	return s
}

func (s *StageResourceAssert) HasStorageIntegrationNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("storage_integration"))
	return s
}

func (s *StageResourceAssert) HasUrlNotEmpty() *StageResourceAssert {
	s.AddAssertion(assert.ValuePresent("url"))
	return s
}
