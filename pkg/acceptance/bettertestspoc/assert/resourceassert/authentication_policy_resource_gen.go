// Code generated by resource assertions generator (v0.1.0); DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type AuthenticationPolicyResourceAssert struct {
	*assert.ResourceAssert
}

func AuthenticationPolicyResource(t *testing.T, name string) *AuthenticationPolicyResourceAssert {
	t.Helper()

	return &AuthenticationPolicyResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedAuthenticationPolicyResource(t *testing.T, id string) *AuthenticationPolicyResourceAssert {
	t.Helper()

	return &AuthenticationPolicyResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (a *AuthenticationPolicyResourceAssert) HasDatabaseString(expected string) *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("database", expected))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasSchemaString(expected string) *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("schema", expected))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasNameString(expected string) *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("name", expected))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasAuthenticationMethodsString(expected string) *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("authentication_methods", expected))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasClientTypesString(expected string) *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("client_types", expected))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasCommentString(expected string) *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("comment", expected))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasFullyQualifiedNameString(expected string) *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasMfaAuthenticationMethodsString(expected string) *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("mfa_authentication_methods", expected))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasMfaEnrollmentString(expected string) *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("mfa_enrollment", expected))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasSecurityIntegrationsString(expected string) *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("security_integrations", expected))
	return a
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (a *AuthenticationPolicyResourceAssert) HasNoDatabase() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueNotSet("database"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasNoSchema() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueNotSet("schema"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasNoName() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueNotSet("name"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasNoComment() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueNotSet("comment"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasNoFullyQualifiedName() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasNoMfaEnrollment() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueNotSet("mfa_enrollment"))
	return a
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (a *AuthenticationPolicyResourceAssert) HasAuthenticationMethodsEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("authentication_methods.#", "0"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasClientTypesEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("client_types.#", "0"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasCommentEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("comment", ""))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasFullyQualifiedNameEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasMfaAuthenticationMethodsEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("mfa_authentication_methods.#", "0"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasMfaEnrollmentEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("mfa_enrollment", ""))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasSecurityIntegrationsEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValueSet("security_integrations.#", "0"))
	return a
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (a *AuthenticationPolicyResourceAssert) HasDatabaseNotEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValuePresent("database"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasSchemaNotEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValuePresent("schema"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasNameNotEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValuePresent("name"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasCommentNotEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValuePresent("comment"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasFullyQualifiedNameNotEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return a
}

func (a *AuthenticationPolicyResourceAssert) HasMfaEnrollmentNotEmpty() *AuthenticationPolicyResourceAssert {
	a.AddAssertion(assert.ValuePresent("mfa_enrollment"))
	return a
}
