// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type ListingResourceAssert struct {
	*assert.ResourceAssert
}

func ListingResource(t *testing.T, name string) *ListingResourceAssert {
	t.Helper()

	return &ListingResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedListingResource(t *testing.T, id string) *ListingResourceAssert {
	t.Helper()

	return &ListingResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (l *ListingResourceAssert) HasNameString(expected string) *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("name", expected))
	return l
}

func (l *ListingResourceAssert) HasApplicationPackageString(expected string) *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("application_package", expected))
	return l
}

func (l *ListingResourceAssert) HasCommentString(expected string) *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("comment", expected))
	return l
}

func (l *ListingResourceAssert) HasFullyQualifiedNameString(expected string) *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return l
}

func (l *ListingResourceAssert) HasManifestString(expected string) *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("manifest", expected))
	return l
}

func (l *ListingResourceAssert) HasPublishString(expected string) *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("publish", expected))
	return l
}

func (l *ListingResourceAssert) HasReviewString(expected string) *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("review", expected))
	return l
}

func (l *ListingResourceAssert) HasShareString(expected string) *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("share", expected))
	return l
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (l *ListingResourceAssert) HasNoName() *ListingResourceAssert {
	l.AddAssertion(assert.ValueNotSet("name"))
	return l
}

func (l *ListingResourceAssert) HasNoApplicationPackage() *ListingResourceAssert {
	l.AddAssertion(assert.ValueNotSet("application_package"))
	return l
}

func (l *ListingResourceAssert) HasNoComment() *ListingResourceAssert {
	l.AddAssertion(assert.ValueNotSet("comment"))
	return l
}

func (l *ListingResourceAssert) HasNoFullyQualifiedName() *ListingResourceAssert {
	l.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return l
}

func (l *ListingResourceAssert) HasNoPublish() *ListingResourceAssert {
	l.AddAssertion(assert.ValueNotSet("publish"))
	return l
}

func (l *ListingResourceAssert) HasNoReview() *ListingResourceAssert {
	l.AddAssertion(assert.ValueNotSet("review"))
	return l
}

func (l *ListingResourceAssert) HasNoShare() *ListingResourceAssert {
	l.AddAssertion(assert.ValueNotSet("share"))
	return l
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (l *ListingResourceAssert) HasApplicationPackageEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("application_package", ""))
	return l
}

func (l *ListingResourceAssert) HasCommentEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("comment", ""))
	return l
}

func (l *ListingResourceAssert) HasFullyQualifiedNameEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return l
}

func (l *ListingResourceAssert) HasPublishEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("publish", ""))
	return l
}

func (l *ListingResourceAssert) HasReviewEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("review", ""))
	return l
}

func (l *ListingResourceAssert) HasShareEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValueSet("share", ""))
	return l
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (l *ListingResourceAssert) HasNameNotEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValuePresent("name"))
	return l
}

func (l *ListingResourceAssert) HasApplicationPackageNotEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValuePresent("application_package"))
	return l
}

func (l *ListingResourceAssert) HasCommentNotEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValuePresent("comment"))
	return l
}

func (l *ListingResourceAssert) HasFullyQualifiedNameNotEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return l
}

func (l *ListingResourceAssert) HasPublishNotEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValuePresent("publish"))
	return l
}

func (l *ListingResourceAssert) HasReviewNotEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValuePresent("review"))
	return l
}

func (l *ListingResourceAssert) HasShareNotEmpty() *ListingResourceAssert {
	l.AddAssertion(assert.ValuePresent("share"))
	return l
}
