// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type NetworkPolicyResourceAssert struct {
	*assert.ResourceAssert
}

func NetworkPolicyResource(t *testing.T, name string) *NetworkPolicyResourceAssert {
	t.Helper()

	return &NetworkPolicyResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedNetworkPolicyResource(t *testing.T, id string) *NetworkPolicyResourceAssert {
	t.Helper()

	return &NetworkPolicyResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (n *NetworkPolicyResourceAssert) HasNameString(expected string) *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("name", expected))
	return n
}

func (n *NetworkPolicyResourceAssert) HasAllowedIpListString(expected string) *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("allowed_ip_list", expected))
	return n
}

func (n *NetworkPolicyResourceAssert) HasAllowedNetworkRuleListString(expected string) *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("allowed_network_rule_list", expected))
	return n
}

func (n *NetworkPolicyResourceAssert) HasBlockedIpListString(expected string) *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("blocked_ip_list", expected))
	return n
}

func (n *NetworkPolicyResourceAssert) HasBlockedNetworkRuleListString(expected string) *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("blocked_network_rule_list", expected))
	return n
}

func (n *NetworkPolicyResourceAssert) HasCommentString(expected string) *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("comment", expected))
	return n
}

func (n *NetworkPolicyResourceAssert) HasFullyQualifiedNameString(expected string) *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return n
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (n *NetworkPolicyResourceAssert) HasNoName() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueNotSet("name"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasNoAllowedIpList() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("allowed_ip_list.#", "0"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasNoAllowedNetworkRuleList() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("allowed_network_rule_list.#", "0"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasNoBlockedIpList() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("blocked_ip_list.#", "0"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasNoBlockedNetworkRuleList() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("blocked_network_rule_list.#", "0"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasNoComment() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueNotSet("comment"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasNoFullyQualifiedName() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return n
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (n *NetworkPolicyResourceAssert) HasCommentEmpty() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("comment", ""))
	return n
}

func (n *NetworkPolicyResourceAssert) HasFullyQualifiedNameEmpty() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return n
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (n *NetworkPolicyResourceAssert) HasNameNotEmpty() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValuePresent("name"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasAllowedIpListNotEmpty() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValuePresent("allowed_ip_list"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasAllowedNetworkRuleListNotEmpty() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValuePresent("allowed_network_rule_list"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasBlockedIpListNotEmpty() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValuePresent("blocked_ip_list"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasBlockedNetworkRuleListNotEmpty() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValuePresent("blocked_network_rule_list"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasCommentNotEmpty() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValuePresent("comment"))
	return n
}

func (n *NetworkPolicyResourceAssert) HasFullyQualifiedNameNotEmpty() *NetworkPolicyResourceAssert {
	n.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return n
}
