// Code generated by resource assertions generator (v0.1.0); DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type StorageIntegrationResourceAssert struct {
	*assert.ResourceAssert
}

func StorageIntegrationResource(t *testing.T, name string) *StorageIntegrationResourceAssert {
	t.Helper()

	return &StorageIntegrationResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedStorageIntegrationResource(t *testing.T, id string) *StorageIntegrationResourceAssert {
	t.Helper()

	return &StorageIntegrationResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (s *StorageIntegrationResourceAssert) HasNameString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("name", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasAzureConsentUrlString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("azure_consent_url", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasAzureMultiTenantAppNameString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("azure_multi_tenant_app_name", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasAzureTenantIdString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("azure_tenant_id", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasCommentString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("comment", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasCreatedOnString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("created_on", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasEnabledString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("enabled", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasFullyQualifiedNameString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAllowedLocationsString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_allowed_locations", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsExternalIdString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_aws_external_id", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsIamUserArnString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_aws_iam_user_arn", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsObjectAclString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_aws_object_acl", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsRoleArnString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_aws_role_arn", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageBlockedLocationsString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_blocked_locations", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageGcpServiceAccountString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_gcp_service_account", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageProviderString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_provider", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasTypeString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("type", expected))
	return s
}

func (s *StorageIntegrationResourceAssert) HasUsePrivatelinkEndpointString(expected string) *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("use_privatelink_endpoint", expected))
	return s
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (s *StorageIntegrationResourceAssert) HasNoName() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("name"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoAzureConsentUrl() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("azure_consent_url"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoAzureMultiTenantAppName() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("azure_multi_tenant_app_name"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoAzureTenantId() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("azure_tenant_id"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoComment() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("comment"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoCreatedOn() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("created_on"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoEnabled() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("enabled"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoFullyQualifiedName() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoStorageAwsExternalId() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("storage_aws_external_id"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoStorageAwsIamUserArn() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("storage_aws_iam_user_arn"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoStorageAwsObjectAcl() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("storage_aws_object_acl"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoStorageAwsRoleArn() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("storage_aws_role_arn"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoStorageGcpServiceAccount() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("storage_gcp_service_account"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoStorageProvider() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("storage_provider"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoType() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("type"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasNoUsePrivatelinkEndpoint() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueNotSet("use_privatelink_endpoint"))
	return s
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (s *StorageIntegrationResourceAssert) HasAzureConsentUrlEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("azure_consent_url", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasAzureMultiTenantAppNameEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("azure_multi_tenant_app_name", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasAzureTenantIdEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("azure_tenant_id", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasCommentEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("comment", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasCreatedOnEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("created_on", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasEnabledEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("enabled", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasFullyQualifiedNameEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsExternalIdEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_aws_external_id", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsIamUserArnEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_aws_iam_user_arn", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsObjectAclEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_aws_object_acl", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsRoleArnEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_aws_role_arn", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageBlockedLocationsEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_blocked_locations.#", "0"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageGcpServiceAccountEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("storage_gcp_service_account", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasTypeEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("type", ""))
	return s
}

func (s *StorageIntegrationResourceAssert) HasUsePrivatelinkEndpointEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValueSet("use_privatelink_endpoint", ""))
	return s
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (s *StorageIntegrationResourceAssert) HasNameNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("name"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasAzureConsentUrlNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("azure_consent_url"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasAzureMultiTenantAppNameNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("azure_multi_tenant_app_name"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasAzureTenantIdNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("azure_tenant_id"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasCommentNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("comment"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasCreatedOnNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("created_on"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasEnabledNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("enabled"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasFullyQualifiedNameNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsExternalIdNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("storage_aws_external_id"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsIamUserArnNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("storage_aws_iam_user_arn"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsObjectAclNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("storage_aws_object_acl"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageAwsRoleArnNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("storage_aws_role_arn"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageGcpServiceAccountNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("storage_gcp_service_account"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasStorageProviderNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("storage_provider"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasTypeNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("type"))
	return s
}

func (s *StorageIntegrationResourceAssert) HasUsePrivatelinkEndpointNotEmpty() *StorageIntegrationResourceAssert {
	s.AddAssertion(assert.ValuePresent("use_privatelink_endpoint"))
	return s
}
