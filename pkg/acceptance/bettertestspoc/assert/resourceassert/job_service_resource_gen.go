// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type JobServiceResourceAssert struct {
	*assert.ResourceAssert
}

func JobServiceResource(t *testing.T, name string) *JobServiceResourceAssert {
	t.Helper()

	return &JobServiceResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedJobServiceResource(t *testing.T, id string) *JobServiceResourceAssert {
	t.Helper()

	return &JobServiceResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (j *JobServiceResourceAssert) HasDatabaseString(expected string) *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("database", expected))
	return j
}

func (j *JobServiceResourceAssert) HasSchemaString(expected string) *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("schema", expected))
	return j
}

func (j *JobServiceResourceAssert) HasNameString(expected string) *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("name", expected))
	return j
}

func (j *JobServiceResourceAssert) HasCommentString(expected string) *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("comment", expected))
	return j
}

func (j *JobServiceResourceAssert) HasComputePoolString(expected string) *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("compute_pool", expected))
	return j
}

func (j *JobServiceResourceAssert) HasExternalAccessIntegrationsString(expected string) *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("external_access_integrations", expected))
	return j
}

func (j *JobServiceResourceAssert) HasFromSpecificationString(expected string) *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("from_specification", expected))
	return j
}

func (j *JobServiceResourceAssert) HasFullyQualifiedNameString(expected string) *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return j
}

func (j *JobServiceResourceAssert) HasQueryWarehouseString(expected string) *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("query_warehouse", expected))
	return j
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (j *JobServiceResourceAssert) HasNoDatabase() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueNotSet("database"))
	return j
}

func (j *JobServiceResourceAssert) HasNoSchema() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueNotSet("schema"))
	return j
}

func (j *JobServiceResourceAssert) HasNoName() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueNotSet("name"))
	return j
}

func (j *JobServiceResourceAssert) HasNoComment() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueNotSet("comment"))
	return j
}

func (j *JobServiceResourceAssert) HasNoComputePool() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueNotSet("compute_pool"))
	return j
}

func (j *JobServiceResourceAssert) HasNoFullyQualifiedName() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return j
}

func (j *JobServiceResourceAssert) HasNoQueryWarehouse() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueNotSet("query_warehouse"))
	return j
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (j *JobServiceResourceAssert) HasCommentEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("comment", ""))
	return j
}

func (j *JobServiceResourceAssert) HasExternalAccessIntegrationsEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("external_access_integrations.#", "0"))
	return j
}

func (j *JobServiceResourceAssert) HasFromSpecificationEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("from_specification.#", "0"))
	return j
}

func (j *JobServiceResourceAssert) HasFullyQualifiedNameEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return j
}

func (j *JobServiceResourceAssert) HasQueryWarehouseEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValueSet("query_warehouse", ""))
	return j
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (j *JobServiceResourceAssert) HasDatabaseNotEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValuePresent("database"))
	return j
}

func (j *JobServiceResourceAssert) HasSchemaNotEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValuePresent("schema"))
	return j
}

func (j *JobServiceResourceAssert) HasNameNotEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValuePresent("name"))
	return j
}

func (j *JobServiceResourceAssert) HasCommentNotEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValuePresent("comment"))
	return j
}

func (j *JobServiceResourceAssert) HasComputePoolNotEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValuePresent("compute_pool"))
	return j
}

func (j *JobServiceResourceAssert) HasFullyQualifiedNameNotEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return j
}

func (j *JobServiceResourceAssert) HasQueryWarehouseNotEmpty() *JobServiceResourceAssert {
	j.AddAssertion(assert.ValuePresent("query_warehouse"))
	return j
}
