// Code generated by resource assertions generator (v0.1.0); DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type DbtProjectResourceAssert struct {
	*assert.ResourceAssert
}

func DbtProjectResource(t *testing.T, name string) *DbtProjectResourceAssert {
	t.Helper()

	return &DbtProjectResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedDbtProjectResource(t *testing.T, id string) *DbtProjectResourceAssert {
	t.Helper()

	return &DbtProjectResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (d *DbtProjectResourceAssert) HasDatabaseString(expected string) *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("database", expected))
	return d
}

func (d *DbtProjectResourceAssert) HasSchemaString(expected string) *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("schema", expected))
	return d
}

func (d *DbtProjectResourceAssert) HasNameString(expected string) *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("name", expected))
	return d
}

func (d *DbtProjectResourceAssert) HasCommentString(expected string) *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("comment", expected))
	return d
}

func (d *DbtProjectResourceAssert) HasDefaultArgsString(expected string) *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("default_args", expected))
	return d
}

func (d *DbtProjectResourceAssert) HasDefaultVersionString(expected string) *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("default_version", expected))
	return d
}

func (d *DbtProjectResourceAssert) HasFromString(expected string) *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("from", expected))
	return d
}

func (d *DbtProjectResourceAssert) HasFullyQualifiedNameString(expected string) *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return d
}

func (d *DbtProjectResourceAssert) HasGitRepositoryFqnString(expected string) *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("git_repository_fqn", expected))
	return d
}

func (d *DbtProjectResourceAssert) HasGitSourceString(expected string) *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("git_source", expected))
	return d
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (d *DbtProjectResourceAssert) HasNoDatabase() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueNotSet("database"))
	return d
}

func (d *DbtProjectResourceAssert) HasNoSchema() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueNotSet("schema"))
	return d
}

func (d *DbtProjectResourceAssert) HasNoName() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueNotSet("name"))
	return d
}

func (d *DbtProjectResourceAssert) HasNoComment() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueNotSet("comment"))
	return d
}

func (d *DbtProjectResourceAssert) HasNoDefaultArgs() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueNotSet("default_args"))
	return d
}

func (d *DbtProjectResourceAssert) HasNoDefaultVersion() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueNotSet("default_version"))
	return d
}

func (d *DbtProjectResourceAssert) HasNoFrom() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueNotSet("from"))
	return d
}

func (d *DbtProjectResourceAssert) HasNoFullyQualifiedName() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return d
}

func (d *DbtProjectResourceAssert) HasNoGitRepositoryFqn() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueNotSet("git_repository_fqn"))
	return d
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (d *DbtProjectResourceAssert) HasCommentEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("comment", ""))
	return d
}

func (d *DbtProjectResourceAssert) HasDefaultArgsEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("default_args", ""))
	return d
}

func (d *DbtProjectResourceAssert) HasDefaultVersionEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("default_version", ""))
	return d
}

func (d *DbtProjectResourceAssert) HasFromEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("from", ""))
	return d
}

func (d *DbtProjectResourceAssert) HasFullyQualifiedNameEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return d
}

func (d *DbtProjectResourceAssert) HasGitRepositoryFqnEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("git_repository_fqn", ""))
	return d
}

func (d *DbtProjectResourceAssert) HasGitSourceEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValueSet("git_source.#", "0"))
	return d
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (d *DbtProjectResourceAssert) HasDatabaseNotEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValuePresent("database"))
	return d
}

func (d *DbtProjectResourceAssert) HasSchemaNotEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValuePresent("schema"))
	return d
}

func (d *DbtProjectResourceAssert) HasNameNotEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValuePresent("name"))
	return d
}

func (d *DbtProjectResourceAssert) HasCommentNotEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValuePresent("comment"))
	return d
}

func (d *DbtProjectResourceAssert) HasDefaultArgsNotEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValuePresent("default_args"))
	return d
}

func (d *DbtProjectResourceAssert) HasDefaultVersionNotEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValuePresent("default_version"))
	return d
}

func (d *DbtProjectResourceAssert) HasFromNotEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValuePresent("from"))
	return d
}

func (d *DbtProjectResourceAssert) HasFullyQualifiedNameNotEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return d
}

func (d *DbtProjectResourceAssert) HasGitRepositoryFqnNotEmpty() *DbtProjectResourceAssert {
	d.AddAssertion(assert.ValuePresent("git_repository_fqn"))
	return d
}
