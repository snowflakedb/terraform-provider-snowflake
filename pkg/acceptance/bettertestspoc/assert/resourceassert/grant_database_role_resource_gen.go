// Code generated by resource assertions generator (v0.1.0); DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type GrantDatabaseRoleResourceAssert struct {
	*assert.ResourceAssert
}

func GrantDatabaseRoleResource(t *testing.T, name string) *GrantDatabaseRoleResourceAssert {
	t.Helper()

	return &GrantDatabaseRoleResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedGrantDatabaseRoleResource(t *testing.T, id string) *GrantDatabaseRoleResourceAssert {
	t.Helper()

	return &GrantDatabaseRoleResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (g *GrantDatabaseRoleResourceAssert) HasDatabaseRoleNameString(expected string) *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("database_role_name", expected))
	return g
}

func (g *GrantDatabaseRoleResourceAssert) HasParentDatabaseRoleNameString(expected string) *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("parent_database_role_name", expected))
	return g
}

func (g *GrantDatabaseRoleResourceAssert) HasParentRoleNameString(expected string) *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("parent_role_name", expected))
	return g
}

func (g *GrantDatabaseRoleResourceAssert) HasShareNameString(expected string) *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("share_name", expected))
	return g
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (g *GrantDatabaseRoleResourceAssert) HasNoDatabaseRoleName() *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("database_role_name"))
	return g
}

func (g *GrantDatabaseRoleResourceAssert) HasNoParentDatabaseRoleName() *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("parent_database_role_name"))
	return g
}

func (g *GrantDatabaseRoleResourceAssert) HasNoParentRoleName() *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("parent_role_name"))
	return g
}

func (g *GrantDatabaseRoleResourceAssert) HasNoShareName() *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueNotSet("share_name"))
	return g
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (g *GrantDatabaseRoleResourceAssert) HasParentDatabaseRoleNameEmpty() *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("parent_database_role_name", ""))
	return g
}

func (g *GrantDatabaseRoleResourceAssert) HasParentRoleNameEmpty() *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("parent_role_name", ""))
	return g
}

func (g *GrantDatabaseRoleResourceAssert) HasShareNameEmpty() *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValueSet("share_name", ""))
	return g
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (g *GrantDatabaseRoleResourceAssert) HasDatabaseRoleNameNotEmpty() *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("database_role_name"))
	return g
}

func (g *GrantDatabaseRoleResourceAssert) HasParentDatabaseRoleNameNotEmpty() *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("parent_database_role_name"))
	return g
}

func (g *GrantDatabaseRoleResourceAssert) HasParentRoleNameNotEmpty() *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("parent_role_name"))
	return g
}

func (g *GrantDatabaseRoleResourceAssert) HasShareNameNotEmpty() *GrantDatabaseRoleResourceAssert {
	g.AddAssertion(assert.ValuePresent("share_name"))
	return g
}
