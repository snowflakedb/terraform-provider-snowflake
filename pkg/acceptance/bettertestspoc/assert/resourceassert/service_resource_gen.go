// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type ServiceResourceAssert struct {
	*assert.ResourceAssert
}

func ServiceResource(t *testing.T, name string) *ServiceResourceAssert {
	t.Helper()

	return &ServiceResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedServiceResource(t *testing.T, id string) *ServiceResourceAssert {
	t.Helper()

	return &ServiceResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (s *ServiceResourceAssert) HasDatabaseString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("database", expected))
	return s
}

func (s *ServiceResourceAssert) HasSchemaString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("schema", expected))
	return s
}

func (s *ServiceResourceAssert) HasNameString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("name", expected))
	return s
}

func (s *ServiceResourceAssert) HasAutoResumeString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("auto_resume", expected))
	return s
}

func (s *ServiceResourceAssert) HasAutoSuspendSecsString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("auto_suspend_secs", expected))
	return s
}

func (s *ServiceResourceAssert) HasCommentString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("comment", expected))
	return s
}

func (s *ServiceResourceAssert) HasComputePoolString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("compute_pool", expected))
	return s
}

func (s *ServiceResourceAssert) HasExternalAccessIntegrationsString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("external_access_integrations", expected))
	return s
}

func (s *ServiceResourceAssert) HasFromSpecificationString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("from_specification", expected))
	return s
}

func (s *ServiceResourceAssert) HasFromSpecificationTemplateString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("from_specification_template", expected))
	return s
}

func (s *ServiceResourceAssert) HasFullyQualifiedNameString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return s
}

func (s *ServiceResourceAssert) HasMaxInstancesString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("max_instances", expected))
	return s
}

func (s *ServiceResourceAssert) HasMinInstancesString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("min_instances", expected))
	return s
}

func (s *ServiceResourceAssert) HasMinReadyInstancesString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("min_ready_instances", expected))
	return s
}

func (s *ServiceResourceAssert) HasQueryWarehouseString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("query_warehouse", expected))
	return s
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (s *ServiceResourceAssert) HasNoDatabase() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("database"))
	return s
}

func (s *ServiceResourceAssert) HasNoSchema() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("schema"))
	return s
}

func (s *ServiceResourceAssert) HasNoName() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("name"))
	return s
}

func (s *ServiceResourceAssert) HasNoAutoResume() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("auto_resume"))
	return s
}

func (s *ServiceResourceAssert) HasNoAutoSuspendSecs() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("auto_suspend_secs"))
	return s
}

func (s *ServiceResourceAssert) HasNoComment() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("comment"))
	return s
}

func (s *ServiceResourceAssert) HasNoComputePool() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("compute_pool"))
	return s
}

func (s *ServiceResourceAssert) HasNoExternalAccessIntegrations() *ServiceResourceAssert {
	// Adjusted manually.
	s.AddAssertion(assert.ValueSet("external_access_integrations.#", "0"))
	return s
}

func (s *ServiceResourceAssert) HasNoFromSpecification() *ServiceResourceAssert {
	// Adjusted manually.
	s.AddAssertion(assert.ValueSet("from_specification.#", "0"))
	return s
}

func (s *ServiceResourceAssert) HasNoFromSpecificationTemplate() *ServiceResourceAssert {
	// Adjusted manually.
	s.AddAssertion(assert.ValueSet("from_specification_template.#", "0"))
	return s
}

func (s *ServiceResourceAssert) HasNoFullyQualifiedName() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return s
}

func (s *ServiceResourceAssert) HasNoMaxInstances() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("max_instances"))
	return s
}

func (s *ServiceResourceAssert) HasNoMinInstances() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("min_instances"))
	return s
}

func (s *ServiceResourceAssert) HasNoMinReadyInstances() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("min_ready_instances"))
	return s
}

func (s *ServiceResourceAssert) HasNoQueryWarehouse() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("query_warehouse"))
	return s
}
