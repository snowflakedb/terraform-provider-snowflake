// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type ServiceResourceAssert struct {
	*assert.ResourceAssert
}

func ServiceResource(t *testing.T, name string) *ServiceResourceAssert {
	t.Helper()

	return &ServiceResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedServiceResource(t *testing.T, id string) *ServiceResourceAssert {
	t.Helper()

	return &ServiceResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (s *ServiceResourceAssert) HasDatabaseString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("database", expected))
	return s
}

func (s *ServiceResourceAssert) HasSchemaString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("schema", expected))
	return s
}

func (s *ServiceResourceAssert) HasNameString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("name", expected))
	return s
}

func (s *ServiceResourceAssert) HasAutoResumeString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("auto_resume", expected))
	return s
}

func (s *ServiceResourceAssert) HasAutoSuspendSecsString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("auto_suspend_secs", expected))
	return s
}

func (s *ServiceResourceAssert) HasCommentString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("comment", expected))
	return s
}

func (s *ServiceResourceAssert) HasComputePoolString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("compute_pool", expected))
	return s
}

func (s *ServiceResourceAssert) HasExternalAccessIntegrationsString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("external_access_integrations", expected))
	return s
}

func (s *ServiceResourceAssert) HasFromSpecificationString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("from_specification", expected))
	return s
}

func (s *ServiceResourceAssert) HasFullyQualifiedNameString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("fully_qualified_name", expected))
	return s
}

func (s *ServiceResourceAssert) HasMaxInstancesString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("max_instances", expected))
	return s
}

func (s *ServiceResourceAssert) HasMinInstancesString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("min_instances", expected))
	return s
}

func (s *ServiceResourceAssert) HasMinReadyInstancesString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("min_ready_instances", expected))
	return s
}

func (s *ServiceResourceAssert) HasQueryWarehouseString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("query_warehouse", expected))
	return s
}

func (s *ServiceResourceAssert) HasServiceTypeString(expected string) *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("service_type", expected))
	return s
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (s *ServiceResourceAssert) HasNoDatabase() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("database"))
	return s
}

func (s *ServiceResourceAssert) HasNoSchema() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("schema"))
	return s
}

func (s *ServiceResourceAssert) HasNoName() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("name"))
	return s
}

func (s *ServiceResourceAssert) HasNoAutoResume() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("auto_resume"))
	return s
}

func (s *ServiceResourceAssert) HasNoAutoSuspendSecs() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("auto_suspend_secs"))
	return s
}

func (s *ServiceResourceAssert) HasNoComment() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("comment"))
	return s
}

func (s *ServiceResourceAssert) HasNoComputePool() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("compute_pool"))
	return s
}

func (s *ServiceResourceAssert) HasNoFullyQualifiedName() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("fully_qualified_name"))
	return s
}

func (s *ServiceResourceAssert) HasNoMaxInstances() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("max_instances"))
	return s
}

func (s *ServiceResourceAssert) HasNoMinInstances() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("min_instances"))
	return s
}

func (s *ServiceResourceAssert) HasNoMinReadyInstances() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("min_ready_instances"))
	return s
}

func (s *ServiceResourceAssert) HasNoQueryWarehouse() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("query_warehouse"))
	return s
}

func (s *ServiceResourceAssert) HasNoServiceType() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueNotSet("service_type"))
	return s
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (s *ServiceResourceAssert) HasAutoResumeEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("auto_resume", ""))
	return s
}

func (s *ServiceResourceAssert) HasAutoSuspendSecsEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("auto_suspend_secs", ""))
	return s
}

func (s *ServiceResourceAssert) HasCommentEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("comment", ""))
	return s
}

func (s *ServiceResourceAssert) HasExternalAccessIntegrationsEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("external_access_integrations.#", "0"))
	return s
}

func (s *ServiceResourceAssert) HasFromSpecificationEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("from_specification.#", "0"))
	return s
}

func (s *ServiceResourceAssert) HasFullyQualifiedNameEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("fully_qualified_name", ""))
	return s
}

func (s *ServiceResourceAssert) HasMaxInstancesEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("max_instances", ""))
	return s
}

func (s *ServiceResourceAssert) HasMinInstancesEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("min_instances", ""))
	return s
}

func (s *ServiceResourceAssert) HasMinReadyInstancesEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("min_ready_instances", ""))
	return s
}

func (s *ServiceResourceAssert) HasQueryWarehouseEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("query_warehouse", ""))
	return s
}

func (s *ServiceResourceAssert) HasServiceTypeEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValueSet("service_type", ""))
	return s
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (s *ServiceResourceAssert) HasDatabaseNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("database"))
	return s
}

func (s *ServiceResourceAssert) HasSchemaNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("schema"))
	return s
}

func (s *ServiceResourceAssert) HasNameNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("name"))
	return s
}

func (s *ServiceResourceAssert) HasAutoResumeNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("auto_resume"))
	return s
}

func (s *ServiceResourceAssert) HasAutoSuspendSecsNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("auto_suspend_secs"))
	return s
}

func (s *ServiceResourceAssert) HasCommentNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("comment"))
	return s
}

func (s *ServiceResourceAssert) HasComputePoolNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("compute_pool"))
	return s
}

func (s *ServiceResourceAssert) HasFullyQualifiedNameNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("fully_qualified_name"))
	return s
}

func (s *ServiceResourceAssert) HasMaxInstancesNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("max_instances"))
	return s
}

func (s *ServiceResourceAssert) HasMinInstancesNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("min_instances"))
	return s
}

func (s *ServiceResourceAssert) HasMinReadyInstancesNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("min_ready_instances"))
	return s
}

func (s *ServiceResourceAssert) HasQueryWarehouseNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("query_warehouse"))
	return s
}

func (s *ServiceResourceAssert) HasServiceTypeNotEmpty() *ServiceResourceAssert {
	s.AddAssertion(assert.ValuePresent("service_type"))
	return s
}
