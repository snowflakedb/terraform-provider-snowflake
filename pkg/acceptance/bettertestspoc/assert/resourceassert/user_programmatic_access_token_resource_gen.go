// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type UserProgrammaticAccessTokenResourceAssert struct {
	*assert.ResourceAssert
}

func UserProgrammaticAccessTokenResource(t *testing.T, name string) *UserProgrammaticAccessTokenResourceAssert {
	t.Helper()

	return &UserProgrammaticAccessTokenResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedUserProgrammaticAccessTokenResource(t *testing.T, id string) *UserProgrammaticAccessTokenResourceAssert {
	t.Helper()

	return &UserProgrammaticAccessTokenResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (u *UserProgrammaticAccessTokenResourceAssert) HasNameString(expected string) *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("name", expected))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasCommentString(expected string) *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("comment", expected))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasDaysToExpiryString(expected string) *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("days_to_expiry", expected))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasDisabledString(expected string) *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("disabled", expected))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasMinsToBypassNetworkPolicyRequirementString(expected string) *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("mins_to_bypass_network_policy_requirement", expected))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasRoleRestrictionString(expected string) *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("role_restriction", expected))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasTokenString(expected string) *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("token", expected))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasUserString(expected string) *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("user", expected))
	return u
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (u *UserProgrammaticAccessTokenResourceAssert) HasNoName() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueNotSet("name"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasNoComment() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueNotSet("comment"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasNoDaysToExpiry() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueNotSet("days_to_expiry"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasNoDisabled() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueNotSet("disabled"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasNoMinsToBypassNetworkPolicyRequirement() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueNotSet("mins_to_bypass_network_policy_requirement"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasNoRoleRestriction() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueNotSet("role_restriction"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasNoToken() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueNotSet("token"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasNoUser() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueNotSet("user"))
	return u
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (u *UserProgrammaticAccessTokenResourceAssert) HasCommentEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("comment", ""))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasDaysToExpiryEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("days_to_expiry", ""))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasDisabledEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("disabled", ""))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasMinsToBypassNetworkPolicyRequirementEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("mins_to_bypass_network_policy_requirement", ""))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasRoleRestrictionEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("role_restriction", ""))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasTokenEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValueSet("token", ""))
	return u
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (u *UserProgrammaticAccessTokenResourceAssert) HasNameNotEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValuePresent("name"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasCommentNotEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValuePresent("comment"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasDaysToExpiryNotEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValuePresent("days_to_expiry"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasDisabledNotEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValuePresent("disabled"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasMinsToBypassNetworkPolicyRequirementNotEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValuePresent("mins_to_bypass_network_policy_requirement"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasRoleRestrictionNotEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValuePresent("role_restriction"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasTokenNotEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValuePresent("token"))
	return u
}

func (u *UserProgrammaticAccessTokenResourceAssert) HasUserNotEmpty() *UserProgrammaticAccessTokenResourceAssert {
	u.AddAssertion(assert.ValuePresent("user"))
	return u
}
