// Code generated by PoC plugin framework model and schema generator; DO NOT EDIT.

package testacc

import (
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

type pluginFrameworkPocProviderModelV0 struct {
	AccountName                        types.String `tfsdk:"account_name"`
	Authenticator                      types.String `tfsdk:"authenticator"`
	ClientIp                           types.String `tfsdk:"client_ip"`
	ClientRequestMfaToken              types.String `tfsdk:"client_request_mfa_token"`
	ClientStoreTemporaryCredential     types.String `tfsdk:"client_store_temporary_credential"`
	ClientTimeout                      types.Int64  `tfsdk:"client_timeout"`
	DisableConsoleLogin                types.String `tfsdk:"disable_console_login"`
	DisableQueryContextCache           types.Bool   `tfsdk:"disable_query_context_cache"`
	DisableTelemetry                   types.Bool   `tfsdk:"disable_telemetry"`
	DriverTracing                      types.String `tfsdk:"driver_tracing"`
	ExternalBrowserTimeout             types.Int64  `tfsdk:"external_browser_timeout"`
	Host                               types.String `tfsdk:"host"`
	IncludeRetryReason                 types.String `tfsdk:"include_retry_reason"`
	InsecureMode                       types.Bool   `tfsdk:"insecure_mode"`
	JwtClientTimeout                   types.Int64  `tfsdk:"jwt_client_timeout"`
	JwtExpireTimeout                   types.Int64  `tfsdk:"jwt_expire_timeout"`
	KeepSessionAlive                   types.Bool   `tfsdk:"keep_session_alive"`
	LoginTimeout                       types.Int64  `tfsdk:"login_timeout"`
	MaxRetryCount                      types.Int64  `tfsdk:"max_retry_count"`
	OcspFailOpen                       types.String `tfsdk:"ocsp_fail_open"`
	OktaUrl                            types.String `tfsdk:"okta_url"`
	OrganizationName                   types.String `tfsdk:"organization_name"`
	Params                             types.Map    `tfsdk:"params"`
	Passcode                           types.String `tfsdk:"passcode"`
	PasscodeInPassword                 types.Bool   `tfsdk:"passcode_in_password"`
	Password                           types.String `tfsdk:"password"`
	Port                               types.Int64  `tfsdk:"port"`
	PreviewFeaturesEnabled             types.Set    `tfsdk:"preview_features_enabled"`
	PrivateKey                         types.String `tfsdk:"private_key"`
	PrivateKeyPassphrase               types.String `tfsdk:"private_key_passphrase"`
	Profile                            types.String `tfsdk:"profile"`
	Protocol                           types.String `tfsdk:"protocol"`
	RequestTimeout                     types.Int64  `tfsdk:"request_timeout"`
	Role                               types.String `tfsdk:"role"`
	SkipTomlFilePermissionVerification types.Bool   `tfsdk:"skip_toml_file_permission_verification"`
	TmpDirectoryPath                   types.String `tfsdk:"tmp_directory_path"`
	Token                              types.String `tfsdk:"token"`
	TokenAccessor                      types.List   `tfsdk:"token_accessor"`
	UseLegacyTomlFile                  types.Bool   `tfsdk:"use_legacy_toml_file"`
	User                               types.String `tfsdk:"user"`
	ValidateDefaultParameters          types.String `tfsdk:"validate_default_parameters"`
	Warehouse                          types.String `tfsdk:"warehouse"`
}

var pluginFrameworkPocProviderSchemaV0 = map[string]schema.Attribute{
	"account_name": schema.StringAttribute{
		Description: "Specifies your Snowflake account name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#account-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ACCOUNT_NAME` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"authenticator": schema.StringAttribute{
		Description: "Specifies the [authentication type](https://pkg.go.dev/github.com/snowflakedb/gosnowflake#AuthType) to use when connecting to Snowflake. Valid options are: `SNOWFLAKE` | `OAUTH` | `EXTERNALBROWSER` | `OKTA` | `SNOWFLAKE_JWT` | `TOKENACCESSOR` | `USERNAMEPASSWORDMFA` | `PROGRAMMATIC_ACCESS_TOKEN`. Can also be sourced from the `SNOWFLAKE_AUTHENTICATOR` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"client_ip": schema.StringAttribute{
		Description: "IP address for network checks. Can also be sourced from the `SNOWFLAKE_CLIENT_IP` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"client_request_mfa_token": schema.StringAttribute{
		Description: "When true the MFA token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_REQUEST_MFA_TOKEN` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"client_store_temporary_credential": schema.StringAttribute{
		Description: "When true the ID token is cached in the credential manager. True by default in Windows/OSX. False for Linux. Can also be sourced from the `SNOWFLAKE_CLIENT_STORE_TEMPORARY_CREDENTIAL` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"client_timeout": schema.Int64Attribute{
		Description: "The timeout in seconds for the client to complete the authentication. Can also be sourced from the `SNOWFLAKE_CLIENT_TIMEOUT` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"disable_console_login": schema.StringAttribute{
		Description: "Indicates whether console login should be disabled in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_CONSOLE_LOGIN` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"disable_query_context_cache": schema.BoolAttribute{
		Description: "Disables HTAP query context cache in the driver. Can also be sourced from the `SNOWFLAKE_DISABLE_QUERY_CONTEXT_CACHE` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"disable_telemetry": schema.BoolAttribute{
		Description: "Disables telemetry in the driver. Can also be sourced from the `DISABLE_TELEMETRY` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"driver_tracing": schema.StringAttribute{
		Description: "Specifies the logging level to be used by the driver. Valid options are: `trace` | `debug` | `info` | `print` | `warning` | `error` | `fatal` | `panic`. Can also be sourced from the `SNOWFLAKE_DRIVER_TRACING` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"external_browser_timeout": schema.Int64Attribute{
		Description: "The timeout in seconds for the external browser to complete the authentication. Can also be sourced from the `SNOWFLAKE_EXTERNAL_BROWSER_TIMEOUT` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"host": schema.StringAttribute{
		Description: "Specifies a custom host value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_HOST` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"include_retry_reason": schema.StringAttribute{
		Description: "Should retried request contain retry reason. Can also be sourced from the `SNOWFLAKE_INCLUDE_RETRY_REASON` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"insecure_mode": schema.BoolAttribute{
		Description: "If true, bypass the Online Certificate Status Protocol (OCSP) certificate revocation check. IMPORTANT: Change the default value for testing or emergency situations only. Can also be sourced from the `SNOWFLAKE_INSECURE_MODE` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"jwt_client_timeout": schema.Int64Attribute{
		Description: "The timeout in seconds for the JWT client to complete the authentication. Can also be sourced from the `SNOWFLAKE_JWT_CLIENT_TIMEOUT` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"jwt_expire_timeout": schema.Int64Attribute{
		Description: "JWT expire after timeout in seconds. Can also be sourced from the `SNOWFLAKE_JWT_EXPIRE_TIMEOUT` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"keep_session_alive": schema.BoolAttribute{
		Description: "Enables the session to persist even after the connection is closed. Can also be sourced from the `SNOWFLAKE_KEEP_SESSION_ALIVE` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"login_timeout": schema.Int64Attribute{
		Description: "Login retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_LOGIN_TIMEOUT` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"max_retry_count": schema.Int64Attribute{
		Description: "Specifies how many times non-periodic HTTP request can be retried by the driver. Can also be sourced from the `SNOWFLAKE_MAX_RETRY_COUNT` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"ocsp_fail_open": schema.StringAttribute{
		Description: "True represents OCSP fail open mode. False represents OCSP fail closed mode. Fail open true by default. Can also be sourced from the `SNOWFLAKE_OCSP_FAIL_OPEN` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"okta_url": schema.StringAttribute{
		Description: "The URL of the Okta server. e.g. https://example.okta.com. Okta URL host needs to to have a suffix `okta.com`. Read more in Snowflake [docs](https://docs.snowflake.com/en/user-guide/oauth-okta). Can also be sourced from the `SNOWFLAKE_OKTA_URL` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"organization_name": schema.StringAttribute{
		Description: "Specifies your Snowflake organization name assigned by Snowflake. For information about account identifiers, see the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/admin-account-identifier#organization-name). Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_ORGANIZATION_NAME` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"params": schema.MapAttribute{
		Description: "Sets other connection (i.e. session) parameters. [Parameters](https://docs.snowflake.com/en/sql-reference/parameters). This field can not be set with environmental variables.",
		Optional:    true,
		Sensitive:   false,
		ElementType: types.StringType, // edited manually
	},
	"passcode": schema.StringAttribute{
		Description: "Specifies the passcode provided by Duo when using multi-factor authentication (MFA) for login. Can also be sourced from the `SNOWFLAKE_PASSCODE` environment variable.",
		Optional:    true,
		Sensitive:   true,
	},
	"passcode_in_password": schema.BoolAttribute{
		Description: "False by default. Set to true if the MFA passcode is embedded to the configured password. Can also be sourced from the `SNOWFLAKE_PASSCODE_IN_PASSWORD` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"password": schema.StringAttribute{
		Description: "Password for user + password or [token](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens#generating-a-programmatic-access-token) for [PAT auth](https://docs.snowflake.com/en/user-guide/programmatic-access-tokens). Cannot be used with `private_key` and `private_key_passphrase`. Can also be sourced from the `SNOWFLAKE_PASSWORD` environment variable.",
		Optional:    true,
		Sensitive:   true,
	},
	"port": schema.Int64Attribute{
		Description: "Specifies a custom port value used by the driver for privatelink connections. Can also be sourced from the `SNOWFLAKE_PORT` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"preview_features_enabled": schema.SetAttribute{
		Description: "A list of preview features that are handled by the provider. See [preview features list](https://github.com/Snowflake-Labs/terraform-provider-snowflake/blob/main/v1-preparations/LIST_OF_PREVIEW_FEATURES_FOR_V1.md). Preview features may have breaking changes in future releases, even without raising the major version. This field can not be set with environmental variables. Valid options are: `snowflake_account_authentication_policy_attachment_resource` | `snowflake_account_password_policy_attachment_resource` | `snowflake_alert_resource` | `snowflake_alerts_datasource` | `snowflake_api_integration_resource` | `snowflake_authentication_policy_resource` | `snowflake_compute_pool_resource` | `snowflake_compute_pools_datasource` | `snowflake_cortex_search_service_resource` | `snowflake_cortex_search_services_datasource` | `snowflake_current_account_resource` | `snowflake_current_account_datasource` | `snowflake_database_datasource` | `snowflake_database_role_datasource` | `snowflake_dynamic_table_resource` | `snowflake_dynamic_tables_datasource` | `snowflake_external_function_resource` | `snowflake_external_functions_datasource` | `snowflake_external_table_resource` | `snowflake_external_tables_datasource` | `snowflake_external_volume_resource` | `snowflake_failover_group_resource` | `snowflake_failover_groups_datasource` | `snowflake_file_format_resource` | `snowflake_file_formats_datasource` | `snowflake_function_java_resource` | `snowflake_function_javascript_resource` | `snowflake_function_python_resource` | `snowflake_function_scala_resource` | `snowflake_function_sql_resource` | `snowflake_functions_datasource` | `snowflake_git_repository_resource` | `snowflake_git_repositories_datasource` | `snowflake_image_repository_resource` | `snowflake_image_repositories_datasource` | `snowflake_job_service_resource` | `snowflake_managed_account_resource` | `snowflake_materialized_view_resource` | `snowflake_materialized_views_datasource` | `snowflake_network_policy_attachment_resource` | `snowflake_network_rule_resource` | `snowflake_email_notification_integration_resource` | `snowflake_notification_integration_resource` | `snowflake_object_parameter_resource` | `snowflake_password_policy_resource` | `snowflake_pipe_resource` | `snowflake_pipes_datasource` | `snowflake_current_role_datasource` | `snowflake_service_resource` | `snowflake_services_datasource` | `snowflake_sequence_resource` | `snowflake_sequences_datasource` | `snowflake_share_resource` | `snowflake_shares_datasource` | `snowflake_parameters_datasource` | `snowflake_procedure_java_resource` | `snowflake_procedure_javascript_resource` | `snowflake_procedure_python_resource` | `snowflake_procedure_scala_resource` | `snowflake_procedure_sql_resource` | `snowflake_procedures_datasource` | `snowflake_stage_resource` | `snowflake_stages_datasource` | `snowflake_storage_integration_resource` | `snowflake_storage_integrations_datasource` | `snowflake_system_generate_scim_access_token_datasource` | `snowflake_system_get_aws_sns_iam_policy_datasource` | `snowflake_system_get_privatelink_config_datasource` | `snowflake_system_get_snowflake_platform_info_datasource` | `snowflake_table_column_masking_policy_application_resource` | `snowflake_table_constraint_resource` | `snowflake_table_resource` | `snowflake_tables_datasource` | `snowflake_user_authentication_policy_attachment_resource` | `snowflake_user_public_keys_resource` | `snowflake_user_password_policy_attachment_resource`.",
		Optional:    true,
		Sensitive:   false,
		ElementType: types.StringType, // edited manually
	},
	"private_key": schema.StringAttribute{
		Description: "Private Key for username+private-key auth. Cannot be used with `password`. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY` environment variable.",
		Optional:    true,
		Sensitive:   true,
	},
	"private_key_passphrase": schema.StringAttribute{
		Description: "Supports the encryption ciphers aes-128-cbc, aes-128-gcm, aes-192-cbc, aes-192-gcm, aes-256-cbc, aes-256-gcm, and des-ede3-cbc. Can also be sourced from the `SNOWFLAKE_PRIVATE_KEY_PASSPHRASE` environment variable.",
		Optional:    true,
		Sensitive:   true,
	},
	"profile": schema.StringAttribute{
		Description: "Sets the profile to read from ~/.snowflake/config file. Can also be sourced from the `SNOWFLAKE_PROFILE` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"protocol": schema.StringAttribute{
		Description: "A protocol used in the connection. Valid options are: `http` | `https`. Can also be sourced from the `SNOWFLAKE_PROTOCOL` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"request_timeout": schema.Int64Attribute{
		Description: "request retry timeout in seconds EXCLUDING network roundtrip and read out http response. Can also be sourced from the `SNOWFLAKE_REQUEST_TIMEOUT` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"role": schema.StringAttribute{
		Description: "Specifies the role to use by default for accessing Snowflake objects in the client session. Can also be sourced from the `SNOWFLAKE_ROLE` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"skip_toml_file_permission_verification": schema.BoolAttribute{
		Description: "False by default. Skips TOML configuration file permission verification. This flag has no effect on Windows systems, as the permissions are not checked on this platform. Instead of skipping the permissions verification, we recommend setting the proper privileges - see [the section below](#toml-file-limitations). Can also be sourced from the `SNOWFLAKE_SKIP_TOML_FILE_PERMISSION_VERIFICATION` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"tmp_directory_path": schema.StringAttribute{
		Description: "Sets temporary directory used by the driver for operations like encrypting, compressing etc. Can also be sourced from the `SNOWFLAKE_TMP_DIRECTORY_PATH` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"token": schema.StringAttribute{
		Description: "Token to use for OAuth and other forms of token based auth. Can also be sourced from the `SNOWFLAKE_TOKEN` environment variable.",
		Optional:    true,
		Sensitive:   true,
	},
	// commented out manually
	//"token_accessor": schema.ListAttribute{
	//	Description: "",
	//	Optional:    true,
	//	Sensitive:   false,
	//},
	"use_legacy_toml_file": schema.BoolAttribute{
		Description: "False by default. When this is set to true, the provider expects the legacy TOML format. Otherwise, it expects the new format. See more in [the section below](#examples) Can also be sourced from the `SNOWFLAKE_USE_LEGACY_TOML_FILE` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"user": schema.StringAttribute{
		Description: "Username. Required unless using `profile`. Can also be sourced from the `SNOWFLAKE_USER` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"validate_default_parameters": schema.StringAttribute{
		Description: "True by default. If false, disables the validation checks for Database, Schema, Warehouse and Role at the time a connection is established. Can also be sourced from the `SNOWFLAKE_VALIDATE_DEFAULT_PARAMETERS` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
	"warehouse": schema.StringAttribute{
		Description: "Specifies the virtual warehouse to use by default for queries, loading, etc. in the client session. Can also be sourced from the `SNOWFLAKE_WAREHOUSE` environment variable.",
		Optional:    true,
		Sensitive:   false,
	},
}
