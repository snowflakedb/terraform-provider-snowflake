---
description: "Rules for generating SHOW Terraform schemas and providing other query (like DESC) Terraform schemas in the Snowflake provider"
globs:
    - "pkg/schemas/*.go"
alwaysApply: false
---

# Query Command Schema Generation Guide

This guide covers the generation and manual definition of Terraform schemas for Snowflake query commands (SHOW, DESC, etc.) in the Snowflake provider.

## Project Structure

### Schema Files Location
- **[@schemas/](mdc:pkg/schemas/)** - All schema definitions for query command outputs
- **[@schemas/gen/](mdc:pkg/schemas/gen/)** - Schema generation tools and templates

### File Types
- **Generated schemas** (`*_gen.go`) - Auto-generated from SDK objects
- **Manual schemas** (`*.go`) - Hand-written for DESC and other query commands
- **Generation tools** - Located in `gen/` subdirectory

## SHOW Schema Generation

### Overview
SHOW schemas are automatically generated from SDK object return types using dedicated generators. These schemas represent the output structure of Snowflake SHOW commands.

### Generation Process

#### 1. Prerequisites
- SDK object must have a corresponding SHOW operation
- The return type of SHOW operation must be listed in [sdk_show_result_structs.go](mdc:pkg/schemas/gen/sdk_show_result_structs.go)

#### 2. Adding New SHOW Schema
To add a new SHOW schema for an SDK object:

1. **Add to SDK Show Result Structs**:
   ```go
   // In pkg/schemas/gen/sdk_show_result_structs.go
   var sdkShowResultStructs = []string{
       "sdk.Warehouse",     // existing
       "sdk.User",          // existing
       "sdk.NewObject",     // ‚Üê Add new object here
   }
   ```

2. **Run Generation**:
   ```bash
   # Generate all SHOW schemas
   make clean-show-output-schemas generate-show-output-schemas

   # Generate specific objects only
   make clean-show-output-schemas generate-show-output-schemas SF_TF_GENERATOR_EXT_ALLOWED_OBJECT_NAMES="sdk.NewObject"
   ```

#### 3. Generated File Structure
Generated files follow this pattern:

**File**: `pkg/schemas/objectname_gen.go`
```go
// Code generated by SDK to schema generator (v0.1.0); DO NOT EDIT.

package schemas

import (
    "github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

// ShowObjectNameSchema represents output of SHOW query for the single ObjectName.
var ShowObjectNameSchema = map[string]*schema.Schema{
    "name": {
        Type:     schema.TypeString,
        Computed: true,
    },
    "created_on": {
        Type:     schema.TypeString,
        Computed: true,
    },
    // ... other fields
}

var _ = ShowObjectNameSchema

func ObjectNameToSchema(objectName *sdk.ObjectName) map[string]any {
    objectNameSchema := make(map[string]any)
    objectNameSchema["name"] = objectName.Name
    objectNameSchema["created_on"] = objectName.CreatedOn
    // ... other mappings

    // Adjusted manually.
    if objectName.OptionalField != nil {
        objectNameSchema["optional_field"] = string(*objectName.OptionalField)
    }

    return objectNameSchema
}

var _ = ObjectNameToSchema
```

### Supported Types in Generation

The generator supports the following types:

#### Basic Types
- `string`, `int`, `float64`, `bool`
- Pointers to basic types (`*string`, `*int`, etc.)
- `time.Time` (and `*time.Time`)

#### Special Types
- **Enums**: `sdk.WarehouseType`, `sdk.ResourceMonitorLevel` (with underlying string/int)
- **Identifiers**:
  - `sdk.AccountIdentifier`
  - `sdk.ExternalObjectIdentifier`
  - `sdk.AccountObjectIdentifier`
  - `sdk.DatabaseObjectIdentifier`
  - `sdk.SchemaObjectIdentifier`
  - `sdk.TableColumnIdentifier`
  - `sdk.ObjectIdentifier` interface

#### Type Mappings
- **Identity**: Basic types (string, int, bool, float64)
- **ToString**: time.Time fields
- **FullyQualifiedName**: All identifier types
- **CastToString/CastToInt**: Enum types

### Manual Adjustments

Generated schemas sometimes need manual adjustments. These must be clearly marked:

#### Commenting Out Unsupported Fields
```go
// In generated schema
// commented out manually
// "unsupported_field": {
//     Type:     schema.TypeInvalid,
//     Computed: true,
// },

// In mapper function
// commented out manually
// objectSchema["unsupported_field"] = object.UnsupportedField
```

#### Handling Optional Fields
```go
// In mapper function
// Adjusted manually.
if object.OptionalField != nil {
    objectSchema["optional_field"] = string(*object.OptionalField)
}
```

#### Type Conversions
```go
// In mapper function
// Adjusted manually.
if object.EnumField != nil {
    objectSchema["enum_field"] = string(*object.EnumField)
}
```

## Manual Schema Definition (DESC and Other Queries)

### Overview
DESC schemas and other query command schemas are manually defined since they don't follow the same patterns as SHOW commands.

### Manual Schema Pattern

**File**: `pkg/schemas/objectname_describe.go` or `pkg/schemas/objectname.go`

```go
package schemas

import (
    "github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk"
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

// ObjectNameDescribeSchema represents output of DESCRIBE query for the single ObjectNameDetails.
var ObjectNameDescribeSchema = map[string]*schema.Schema{
    "name": {
        Type:     schema.TypeString,
        Computed: true,
    },
    "comment": {
        Type:     schema.TypeString,
        Computed: true,
    },
    "created_on": {
        Type:     schema.TypeString,
        Computed: true,
    },
    // ... other fields based on DESC output
}

func ObjectNameDescriptionToSchema(description sdk.ObjectNameDetails) []map[string]any {
    return []map[string]any{
        {
            "name":       description.Name,
            "comment":    description.Comment,
            "created_on": description.CreatedOn.String(),
            // ... other mappings
        },
    }
}
```

### Manual Schema Guidelines

#### Field Types
- Use appropriate Terraform schema types (`TypeString`, `TypeInt`, `TypeBool`, `TypeFloat`)
- All fields should be `Computed: true` (query outputs are read-only)
- Use `TypeString` for timestamps and convert using `.String()` method

#### Naming Conventions
- Schema variable: `ObjectNameDescribeSchema` or `ObjectNameShowSchema`
- Mapper function: `ObjectNameDescriptionToSchema` or `ObjectNameToSchema`
- File naming: `objectname_describe.go` or `objectname.go`

#### Field Mapping
- Map SDK struct fields to Terraform schema fields
- Handle optional fields with nil checks
- Convert complex types to appropriate Terraform types
- Use string conversion for timestamps and enums

## Integration with Resources

Schemas generated or manually defined here are used in resource implementations. See [resource-development](mdc:.cursor/rules/resource-development.mdc) for integration patterns.

## Best Practices

### Manual Adjustments
- Always comment manual adjustments clearly
- Use consistent comment format: `// Adjusted manually.` or `// commented out manually`
- Keep adjustments minimal and focused

### Type Handling
- Use appropriate Terraform types for each field
- Convert complex SDK types to simple Terraform types
- Handle nil pointers gracefully
- Use string conversion for timestamps and enums

### File Organization
- Keep generated files separate from manual files
- Use consistent naming conventions
- Group related schemas together
- Maintain clear separation between SHOW and DESC schemas

## Common Issues and Solutions

### Unsupported Types
- **Issue**: Generator creates `TypeInvalid` for unsupported types
- **Solution**: Comment out the field and add manual handling if needed

### Optional Fields
- **Issue**: Generated code doesn't handle optional fields properly
- **Solution**: Add manual nil checks in the mapper function

### Type Conversions
- **Issue**: Complex types need conversion to Terraform types
- **Solution**: Add manual type conversion in mapper function

### Schema Inconsistencies
- **Issue**: Generated schema doesn't match actual Snowflake output
- **Solution**: Add manual adjustments with clear comments

## Development Workflow

### For SHOW Schemas
1. Ensure SDK object has SHOW operation
2. Add object to `sdk_show_result_structs.go`
3. Run generation command
4. Review generated schema
5. Add manual adjustments if needed
6. Integrate with resource implementation

### For Manual Schemas
1. Analyze Snowflake query output structure based on SDK object returned by the query operation function
2. Create schema definition file
3. Define field mappings
4. Implement mapper function
5. Integrate with resource implementation

## File Dependencies

When working with query command schemas, you'll interact with:
1. **Generated files** in [@schemas/](mdc:pkg/schemas/) - Auto-generated SHOW schemas
2. **Manual files** in [@schemas/](mdc:pkg/schemas/) - Hand-written DESC schemas
3. **Generation tools** in [@schemas/gen/](mdc:pkg/schemas/gen/) - Schema generation infrastructure
4. **SDK files** in [@sdk/](mdc:pkg/sdk/) - Source of truth for object structures
5. **Resource files** - See [resource-development](mdc:.cursor/rules/resource-development.mdc) for schema usage

## Development Checklist

### For SHOW Schema Generation
- [ ] Verify SDK object has SHOW operation
- [ ] Add object to `sdk_show_result_structs.go`
- [ ] Run generation command
- [ ] Review generated schema for correctness
- [ ] Add manual adjustments if needed
- [ ] Integrate with resource implementation

### For Manual Schema Definition
- [ ] Analyze Snowflake query output structure
- [ ] Create schema definition file
- [ ] Define all required fields with correct types
- [ ] Implement mapper function
- [ ] Handle optional fields and type conversions
- [ ] Integrate with resource implementation
