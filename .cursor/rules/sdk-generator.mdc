---
description: Rules for using the SDK generator to create Snowflake object definitions
globs:
  - "pkg/sdk/**/*_def.go"
  - "pkg/sdk/poc/**/*.go"
alwaysApply: false
---

# SDK Generator Usage

You are working with the SDK generator that creates Go types and methods for Snowflake SQL commands using a custom DSL.

**Scope**: This document covers the SDK generator workflow, DSL patterns, DDL tag system, testing requirements, and best practices for implementing new SDK objects.

**Prerequisites**: Understand the SDK architecture and patterns from [SDK Development Rules](sdk-development.mdc) before using the generator.

## Creating SDK Object Definitions

### Definition File Structure
Create `<object_name>_def.go` files with this pattern:

```go
package sdk

import g "github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/sdk/poc/generator"

//go:generate go run ./poc/main.go

// Define output structures separately above main definition
var objectDbRow = g.DbStruct("objectDBRow").
    Text("created_on").
    Text("name").
    Text("owner").
    Text("comment")

var object = g.PlainStruct("Object").
    Time("CreatedOn").
    Text("Name").
    Text("Owner").
    Text("Comment")

var describeObjectDbRow = g.DbStruct("describeObjectDBRow").
    Text("property").
    Text("value")

var objectDetails = g.PlainStruct("ObjectDetails").
    Text("Property").
    Text("Value")

var ObjectsDef = g.NewInterface(
    "Objects",           // Interface name (plural)
    "Object",           // Struct name (singular)
    g.KindOfT[SchemaObjectIdentifier](), // Identifier type
).
CreateOperation("https://docs.snowflake.com/...",
    g.NewQueryStruct("CreateObject").
        Create().
        SQL("OBJECT").
        Name().
        OptionalComment(),
).
ShowOperation("https://docs.snowflake.com/...",
    objectDbRow, object,
    g.NewQueryStruct("ShowObjects").
        Show().
        SQL("OBJECTS").
        OptionalLike().
        OptionalExtendedIn(),
).
ShowByIdOperationWithFiltering(
    g.ShowByIDLikeFiltering,
    g.ShowByIDExtendedInFiltering,
).
DescribeOperation(
    g.DescriptionMappingKindSingleValue,
    "https://docs.snowflake.com/...",
    describeObjectDbRow,
    objectDetails,
    g.NewQueryStruct("DescribeObject").
        Describe().
        SQL("OBJECT").
        Name(),
)
```

### DSL Guidelines

**Documentation-Based Development:**
- Use Snowflake documentation as the source of truth, map SQL syntax directly to DSL operations
- **CRITICAL**: Examine EXACT syntax from specific command documentation pages
- **Documentation Verification Workflow**:
  1. **Verify each documentation URL** is accessible and contains expected content
  2. **Check for "Syntax" sections** with command structure
  3. **Check for "Output" sections** with field specifications for SHOW/DESCRIBE commands
  4. **Ask for help** if any links are broken or sections are missing
  5. **Never proceed** with made-up fields or syntax
- **Accuracy Requirements**: Only include fields and options explicitly documented in "Syntax" and "Output" sections
- **Conservative Approach**: When in doubt, ask for clarification rather than making assumptions

**DSL Patterns and DDL Tag System**

The SDK uses a sophisticated DDL tag system to generate SQL from Go structs. Understanding these patterns is crucial for accurate implementation:

**Core DDL Tags:**
- `ddl:"static"` - Fixed SQL keywords (e.g., `CREATE`, `ALTER`, `DROP`)
- `ddl:"keyword"` - Dynamic keywords with optional quoting and parentheses
- `ddl:"parameter"` - Parameter assignments with `KEY = value` syntax
- `ddl:"identifier"` - Snowflake object identifiers with proper escaping
- `ddl:"list"` - Collections with configurable separators and parentheses

**SQL Generation Modifiers:**
- Quoting: `single_quotes`, `double_quotes`, `no_quotes`, `double_dollar_quotes`
- Parentheses: `parentheses`, `no_parentheses`, `must_parentheses`
- Equals: `no_equals` (for identifiers and special cases)
- Separators: `comma`, `no_comma` (for lists)
- Reverse: `reverse` (for reversed parameter syntax)

**DSL Method Mapping:**
- `SQL("TEXT")` → `ddl:"static" sql:"TEXT"`
- `OptionalSQL("TEXT")` → `ddl:"keyword" sql:"TEXT"` (optional field)
- `TextAssignment("FIELD", options)` → `ddl:"parameter" sql:"FIELD"`
- `Name()` → `ddl:"identifier"` with appropriate identifier type
- `OptionalComment()` → `ddl:"parameter,single_quotes" sql:"COMMENT"`

**Complex Pattern Examples:**
```go
// Generates: ALLOWED_VALUES ('value1', 'value2')
AllowedValues *AllowedValues `ddl:"keyword" sql:"ALLOWED_VALUES"`
type AllowedValues struct {
    Values []AllowedValue `ddl:"list,comma"`
}
type AllowedValue struct {
    Value string `ddl:"keyword,single_quotes"`
}

// Generates: SET TAG (tag1 = 'value1', tag2 = 'value2')
SetTags []TagAssociation `ddl:"keyword" sql:"SET TAG"`

// Generates: MODIFY COLUMN "column_name" for column operations
column *string `ddl:"parameter,no_equals,double_quotes" sql:"MODIFY COLUMN"`
```

**Operation Types**
- `CreateOperation()` - CREATE commands
- `AlterOperation()` - ALTER commands
- `DropOperation()` - DROP commands
- `ShowOperation()` - SHOW commands
- `ShowByIdOperationWithFiltering()` - ShowByID with filtering options
- `ShowByIdOperationWithNoFiltering()` - ShowByID without filtering
- `DescribeOperation()` - DESCRIBE commands with mapping kind selection
- `CustomOperation()` - Non-standard commands

**DescriptionMappingKind Selection:**
The `DescribeOperation()` requires a `DescriptionMappingKind` parameter that determines the return type and implementation:

- **`DescriptionMappingKindSingleValue`**: Returns a single object (`*ObjectDetails`)
  - **Use when**: DESCRIBE returns object metadata as a single record (name, owner, comment, etc.)
  - **Generated method**: `Describe(ctx context.Context, id Identifier) (*ObjectDetails, error)`
  - **Implementation**: Uses `validateAndQueryOne()` and `result.convert()`
  - **Examples**: Tasks, Streams, Services, Git Repositories, Secrets

- **`DescriptionMappingKindSlice`**: Returns a slice of objects (`[]ObjectProperty`)
  - **Use when**: DESCRIBE returns property-value pairs or multiple configuration entries
  - **Generated method**: `Describe(ctx context.Context, id Identifier) ([]ObjectProperty, error)`
  - **Implementation**: Uses `validateAndQuery()` and `convertRows()`
  - **Examples**: Procedures, Functions, Views, Storage Integrations, Network Policies

**Pattern Recognition:**
- **Single Value**: Object has fixed metadata structure (created_on, name, owner, comment, specific config fields)
- **Slice**: Object has variable properties returned as key-value pairs (property, value, description columns)

### ShowByID Operation

The `ShowByID` operation provides a convenient method to retrieve a single object by its identifier. It internally uses the `Show` operation with appropriate filtering to find the specific object.

**Purpose and Implementation:**
- **Generated methods**: `ShowByID(ctx context.Context, id Identifier) (*Object, error)` and `ShowByIDSafely(ctx context.Context, id Identifier) (*Object, error)`
- **Implementation**: Calls `Show()` with filtering parameters, then uses `collections.FindFirst()` to locate the object by name
- **Safety**: `ShowByIDSafely()` handles cases where the object might not exist without throwing errors

**Filtering Strategy Selection:**
The filtering options for `ShowByID` must match the filtering capabilities available in the corresponding `Show` operation. Choose based on what the Snowflake `SHOW` command supports:

**Available Filtering Types:**
- **`ShowByIDLikeFiltering`**: `LIKE` pattern matching (`WithLike(Like{Pattern: String(id.Name())})`) - Universal for all objects
- **`ShowByIDInFiltering`**: `IN` clause filtering (`WithIn(In{Schema: id.SchemaId()})`) - For hierarchical objects
- **`ShowByIDExtendedInFiltering`**: Extended `IN` syntax (`WithIn(ExtendedIn{...})`) - Complex hierarchical filtering
- **`ShowByIDServiceInFiltering`**: Service-specific filtering (`WithIn(ServiceIn{...})`) - For service objects
- **`ShowByIDApplicationNameFiltering`**: Application filtering (`WithApplicationName(id.DatabaseId())`) - For application objects

**Selection by Object Hierarchy:**
- **Account-Level** (Users, Roles): `ShowByIDLikeFiltering` only
- **Database-Level** (Schemas): `ShowByIDLikeFiltering` + `ShowByIDInFiltering`
- **Schema-Level** (Views, Functions): `ShowByIDLikeFiltering` + `ShowByIDExtendedInFiltering` (most common)
- **Service Objects**: `ShowByIDLikeFiltering` + `ShowByIDServiceInFiltering`
- **Application Objects**: `ShowByIDApplicationNameFiltering`
- **No Filtering**: `ShowByIdOperationWithNoFiltering()` when SHOW has no filtering options

**Common Pattern:**
```go
ShowByIdOperationWithFiltering(g.ShowByIDLikeFiltering, g.ShowByIDExtendedInFiltering)
```

**Selection Based on Documentation:**
- Check SHOW command "Syntax" section for available clauses (`LIKE`, `IN`, `STARTS WITH`)
- Prefer LIKE + IN combination when both are available for optimal performance

**Query Output Structure Definition Guidelines:**
- **Define separately** above main interface (see example above)
- **Naming**: `<object>DbRow`, `<object>`, `describe<Object>DbRow`, `<object>Details`
- **Field Mapping**: Use documented OUTPUT sections exactly. Only add TODO comments when genuinely unsure:
  ```go
  // TODO: Fields not documented - examine actual output and update
  var objectDbRow = g.DbStruct("objectDBRow")
  ```

**Identifier Types:** Choose based on Snowflake hierarchy (see [Object Hierarchies](sdk-development.mdc#object-hierarchies)):
- `AccountObjectIdentifier`, `DatabaseObjectIdentifier`, `SchemaObjectIdentifier`, `SchemaObjectIdentifierWithArguments`

**Edge Cases and Considerations:**
- Document privilege requirements when relevant (CREATE, ALTER, DROP, SHOW operations)
- Consider ownership transfer, grants, and access patterns for complex objects

## Generator Workflow

### 1. Setup
If missing, create definition files and add it to the mapping in `pkg/sdk/poc/main.go`:
```go
"your_object_def.go": sdk.YourObjectDef,
```

### 2. Documentation Analysis
**Critical Phase - Must Be Thorough:**
- Request documentation URLs for ALL operations (CREATE, ALTER, DROP, SHOW, DESCRIBE)
- Follow the **Documentation Verification Workflow** from DSL Guidelines section
- Note ALL optional vs required parameters
- **Analyze SHOW command filtering options** for ShowByID operation (LIKE, IN, STARTS WITH)
- Note object hierarchy level for appropriate filtering selection
- Identify privilege requirements and edge cases
- **Consult with developers** for unknown or complex scenarios

### 3. Implementation and Verification
**Based on Documentation Analysis:**
- Map each documented syntax element to appropriate DSL pattern
- Reference similar existing objects for complex patterns
- When uncertain about DSL mapping, ask for guidance rather than guessing

### 4. Generation and Validation
```bash
make run-generator-<object_name>  # Uses filename without _def suffix
```

**Post-Generation Validation:**
- Verify generated SQL matches documented Snowflake syntax
- Test unit tests with realistic parameter combinations
- Validate all DDL tags produce expected output

### 5. Generated Files Structure
The generator creates files following the [File Organization Patterns](sdk-development.mdc#file-organization-patterns):
- `*_gen.go` - Interface and option structs with DDL tags
- `*_impl_gen.go` - Implementation methods (SQL execution)
- `*_dto_gen.go` - Request DTOs for builder pattern
- `*_dto_builders_gen.go` - Constructor and builder methods
- `*_validations_gen.go` - Validation functions for all parameters
- `*_gen_test.go` - Unit test templates with TODO placeholders

### 6. Manual Completion
- **NEVER** edit generated files directly (except conversions/unit tests)
- Create `<object_name>_ext.go` for custom extensions
- See **Post-Generation Tasks** section for required manual work

## Common Patterns

### Basic Object with CRUD
```go
var ObjectsDef = g.NewInterface("Objects", "Object", g.KindOfT[SchemaObjectIdentifier]()).
    CreateOperation(url, createStruct).
    AlterOperation(url, alterStruct).
    DropOperation(url, dropStruct).
    ShowOperation(url, dbRow, plainStruct, showStruct)
```

### Complex ALTER with SET/UNSET
```go
AlterOperation(url,
    g.NewQueryStruct("AlterObject").
        Alter().SQL("OBJECT").Name().
        OptionalQueryStructField("Set",
            g.NewQueryStruct("ObjectSet").
                OptionalComment().
                OptionalTextAssignment("FIELD", options),
            g.KeywordOptions().SQL("SET"),
        ).
        OptionalQueryStructField("Unset",
            g.NewQueryStruct("ObjectUnset").
                OptionalSQL("COMMENT").
                OptionalSQL("FIELD"),
            g.ListOptions().NoParentheses().SQL("UNSET"),
        ),
)
```

## Post-Generation Tasks

**Testing:** Complete generated unit test TODOs and implement integration tests following [Testing Strategy](sdk-development.mdc#testing-strategy).

**Manual Work:**
- Fill conversion mappings in `*_impl_gen.go`
- Verify SQL output matches Snowflake documentation
- Test comprehensive parameter combinations


## Best Practices

- **Documentation-driven**: Start with official Snowflake docs, map syntax exactly
- **Quality assurance**: Complete all TODOs, validate SQL output, test comprehensive combinations
- **Architecture**: Use appropriate identifier types, follow [SDK Development Rules](sdk-development.mdc)
